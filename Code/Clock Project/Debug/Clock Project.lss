
Clock Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006c  00800060  000035e6  0000367a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000051  008000cc  008000cc  000036e6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000036e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003744  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  00003780  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003b97  00000000  00000000  00003a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fc3  00000000  00000000  0000761f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c36  00000000  00000000  000085e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009d4  00000000  00000000  0000a218  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bee  00000000  00000000  0000abec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000295e  00000000  00000000  0000b7da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  0000e138  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__ctors_end>
       4:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <__vector_1>
       8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
       c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      10:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      14:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      18:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      1c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      20:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      24:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      28:	0c 94 54 0a 	jmp	0x14a8	; 0x14a8 <__vector_10>
      2c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      30:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      34:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      38:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      3c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      40:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      44:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      48:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      4c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      50:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      54:	03 6e       	ori	r16, 0xE3	; 227
      56:	db 36       	cpi	r29, 0x6B	; 107
      58:	3d 9a       	sbi	0x07, 5	; 7
      5a:	99 99       	sbic	0x13, 1	; 19
      5c:	99 3d       	cpi	r25, 0xD9	; 217
      5e:	ab aa       	std	Y+51, r10	; 0x33
      60:	aa 2a       	or	r10, r26
      62:	3e 00       	.word	0x003e	; ????
      64:	00 00       	nop
      66:	80 3f       	cpi	r24, 0xF0	; 240
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 07       	cpc	r19, r31
      96:	2c 7a       	andi	r18, 0xAC	; 172
      98:	a5 ba       	out	0x15, r10	; 21
      9a:	6c c5       	rjmp	.+2776   	; 0xb74 <I2C_read_with_NACK+0xc>
      9c:	90 da       	rcall	.-2784   	; 0xfffff5be <__eeprom_end+0xff7ef5be>
      9e:	3b 93       	.word	0x933b	; ????
      a0:	65 fc       	sbrc	r6, 5
      a2:	8b bc       	out	0x2b, r8	; 43
      a4:	53 f8       	bld	r5, 3
      a6:	10 fd       	sbrc	r17, 0
      a8:	3c 56       	subi	r19, 0x6C	; 108
      aa:	92 83       	std	Z+2, r25	; 0x02
      ac:	4d bd       	out	0x2d, r20	; 45
      ae:	87 9d       	mul	r24, r7
      b0:	3a b6       	in	r3, 0x3a	; 58
      b2:	3d cb       	rjmp	.-2438   	; 0xfffff72e <__eeprom_end+0xff7ef72e>
      b4:	c9 bf       	out	0x39, r28	; 57
      b6:	5b be       	out	0x3b, r5	; 59
      b8:	73 da       	rcall	.-2842   	; 0xfffff5a0 <__eeprom_end+0xff7ef5a0>
      ba:	0f c9       	rjmp	.-3554   	; 0xfffff2da <__eeprom_end+0xff7ef2da>
      bc:	3f 05       	cpc	r19, r15
      be:	a8 4c       	sbci	r26, 0xC8	; 200
      c0:	cd b2       	in	r12, 0x1d	; 29
      c2:	d4 4e       	sbci	r29, 0xE4	; 228
      c4:	b9 38       	cpi	r27, 0x89	; 137
      c6:	36 a9       	ldd	r19, Z+54	; 0x36
      c8:	02 0c       	add	r0, r2
      ca:	50 b9       	out	0x00, r21	; 0
      cc:	91 86       	std	Z+9, r9	; 0x09
      ce:	88 08       	sbc	r8, r8
      d0:	3c a6       	std	Y+44, r3	; 0x2c
      d2:	aa aa       	std	Y+50, r10	; 0x32
      d4:	2a be       	out	0x3a, r2	; 58
      d6:	00 00       	nop
      d8:	00 80       	ld	r0, Z
      da:	3f 06       	cpc	r3, r31
      dc:	64 ec       	ldi	r22, 0xC4	; 196
      de:	1b 3c       	cpi	r17, 0xCB	; 203
      e0:	04 bc       	out	0x24, r0	; 36
      e2:	16 3e       	cpi	r17, 0xE6	; 230
      e4:	3b e5       	ldi	r19, 0x5B	; 91
      e6:	b9 3c       	cpi	r27, 0xC9	; 201
      e8:	c9 3c       	cpi	r28, 0xC9	; 201
      ea:	37 c2       	rjmp	.+1134   	; 0x55a <DIO_vsetPINDir+0x44>
      ec:	9e 5a       	subi	r25, 0xAE	; 174
      ee:	3d 66       	ori	r19, 0x6D	; 109
      f0:	04 98       	cbi	0x00, 4	; 0
      f2:	08 3e       	cpi	r16, 0xE8	; 232
      f4:	ea 69       	ori	r30, 0x9A	; 154
      f6:	aa aa       	std	Y+50, r10	; 0x32
      f8:	3e 00       	.word	0x003e	; ????
      fa:	00 00       	nop
      fc:	80 3f       	cpi	r24, 0xF0	; 240

000000fe <__trampolines_end>:
      fe:	63 64       	ori	r22, 0x43	; 67
     100:	69 6e       	ori	r22, 0xE9	; 233
     102:	6f 70       	andi	r22, 0x0F	; 15
     104:	73 75       	andi	r23, 0x53	; 83
     106:	78 58       	subi	r23, 0x88	; 136
     108:	5b 00       	.word	0x005b	; ????

0000010a <__ctors_end>:
     10a:	11 24       	eor	r1, r1
     10c:	1f be       	out	0x3f, r1	; 63
     10e:	cf e5       	ldi	r28, 0x5F	; 95
     110:	d8 e0       	ldi	r29, 0x08	; 8
     112:	de bf       	out	0x3e, r29	; 62
     114:	cd bf       	out	0x3d, r28	; 61

00000116 <__do_copy_data>:
     116:	10 e0       	ldi	r17, 0x00	; 0
     118:	a0 e6       	ldi	r26, 0x60	; 96
     11a:	b0 e0       	ldi	r27, 0x00	; 0
     11c:	e6 ee       	ldi	r30, 0xE6	; 230
     11e:	f5 e3       	ldi	r31, 0x35	; 53
     120:	02 c0       	rjmp	.+4      	; 0x126 <__do_copy_data+0x10>
     122:	05 90       	lpm	r0, Z+
     124:	0d 92       	st	X+, r0
     126:	ac 3c       	cpi	r26, 0xCC	; 204
     128:	b1 07       	cpc	r27, r17
     12a:	d9 f7       	brne	.-10     	; 0x122 <__do_copy_data+0xc>

0000012c <__do_clear_bss>:
     12c:	21 e0       	ldi	r18, 0x01	; 1
     12e:	ac ec       	ldi	r26, 0xCC	; 204
     130:	b0 e0       	ldi	r27, 0x00	; 0
     132:	01 c0       	rjmp	.+2      	; 0x136 <.do_clear_bss_start>

00000134 <.do_clear_bss_loop>:
     134:	1d 92       	st	X+, r1

00000136 <.do_clear_bss_start>:
     136:	ad 31       	cpi	r26, 0x1D	; 29
     138:	b2 07       	cpc	r27, r18
     13a:	e1 f7       	brne	.-8      	; 0x134 <.do_clear_bss_loop>
     13c:	0e 94 c5 0b 	call	0x178a	; 0x178a <main>
     140:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <_exit>

00000144 <__bad_interrupt>:
     144:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000148 <EEPROM_write>:
#include <avr/io.h>
#include "std_macros.h"
void EEPROM_write(unsigned short address, unsigned char data )
{
	/*set up address register*/
	EEARL=(char)address;
     148:	8e bb       	out	0x1e, r24	; 30
	EEARH=(char)(address>>8);
     14a:	9f bb       	out	0x1f, r25	; 31
	/*set up data register*/
	EEDR=data ;
     14c:	6d bb       	out	0x1d, r22	; 29
	/*write logical one to EEMWE*/
	SET_BIT(EECR,EEMWE);
     14e:	e2 9a       	sbi	0x1c, 2	; 28
	/*start EEPROM write by setting EEWE*/
	SET_BIT(EECR,EEWE);
     150:	e1 9a       	sbi	0x1c, 1	; 28
	/* wait for completion of write operation*/
	while(READ_BIT(EECR,EEWE)==1);
     152:	e1 99       	sbic	0x1c, 1	; 28
     154:	fe cf       	rjmp	.-4      	; 0x152 <EEPROM_write+0xa>
	
}
     156:	08 95       	ret

00000158 <EEPROM_read>:
unsigned char EEPROM_read( unsigned short address )
{
	/*set up address register*/
	EEARL=(char)address;
     158:	8e bb       	out	0x1e, r24	; 30
	EEARH=(char)(address>>8);
     15a:	9f bb       	out	0x1f, r25	; 31
	/*start EEPROM read by setting EERE*/
	SET_BIT(EECR,EERE);
     15c:	e0 9a       	sbi	0x1c, 0	; 28
	/*return data from data register*/
	return EEDR ;
     15e:	8d b3       	in	r24, 0x1d	; 29
     160:	08 95       	ret

00000162 <gregorianToJD>:
#include "HijriConverter.h"

// Epoch of Islamic calendar: 16 July 622 CE (Julian)
#define JD_ISLAMIC_EPOCH 1948439

long gregorianToJD(uint16_t year, uint8_t month, uint8_t day) {
     162:	8f 92       	push	r8
     164:	9f 92       	push	r9
     166:	af 92       	push	r10
     168:	bf 92       	push	r11
     16a:	cf 92       	push	r12
     16c:	df 92       	push	r13
     16e:	ef 92       	push	r14
     170:	ff 92       	push	r15
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
     176:	fc 01       	movw	r30, r24
     178:	c6 2f       	mov	r28, r22
     17a:	d4 2f       	mov	r29, r20
	if (month <= 2) {
     17c:	63 30       	cpi	r22, 0x03	; 3
     17e:	10 f4       	brcc	.+4      	; 0x184 <gregorianToJD+0x22>
		year -= 1;
     180:	31 97       	sbiw	r30, 0x01	; 1
		month += 12;
     182:	c4 5f       	subi	r28, 0xF4	; 244
	}
	long A = year / 100;
     184:	9f 01       	movw	r18, r30
     186:	36 95       	lsr	r19
     188:	27 95       	ror	r18
     18a:	36 95       	lsr	r19
     18c:	27 95       	ror	r18
     18e:	ab e7       	ldi	r26, 0x7B	; 123
     190:	b4 e1       	ldi	r27, 0x14	; 20
     192:	0e 94 41 17 	call	0x2e82	; 0x2e82 <__umulhisi3>
     196:	96 95       	lsr	r25
     198:	87 95       	ror	r24
     19a:	6c 01       	movw	r12, r24
     19c:	e1 2c       	mov	r14, r1
     19e:	f1 2c       	mov	r15, r1
	long B = 2 - A + (A / 4);
	return (long)(365.25 * (year + 4716)) +
     1a0:	bf 01       	movw	r22, r30
     1a2:	64 59       	subi	r22, 0x94	; 148
     1a4:	7d 4e       	sbci	r23, 0xED	; 237
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	0e 94 c3 13 	call	0x2786	; 0x2786 <__floatunsisf>
     1ae:	20 e0       	ldi	r18, 0x00	; 0
     1b0:	30 ea       	ldi	r19, 0xA0	; 160
     1b2:	46 eb       	ldi	r20, 0xB6	; 182
     1b4:	53 e4       	ldi	r21, 0x43	; 67
     1b6:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__mulsf3>
     1ba:	0e 94 8d 13 	call	0x271a	; 0x271a <__fixsfsi>
     1be:	4b 01       	movw	r8, r22
     1c0:	5c 01       	movw	r10, r24
     1c2:	6c 2f       	mov	r22, r28
     1c4:	70 e0       	ldi	r23, 0x00	; 0
     1c6:	6f 5f       	subi	r22, 0xFF	; 255
     1c8:	7f 4f       	sbci	r23, 0xFF	; 255
     1ca:	07 2e       	mov	r0, r23
     1cc:	00 0c       	add	r0, r0
     1ce:	88 0b       	sbc	r24, r24
     1d0:	99 0b       	sbc	r25, r25
     1d2:	0e 94 c5 13 	call	0x278a	; 0x278a <__floatsisf>
     1d6:	21 e0       	ldi	r18, 0x01	; 1
     1d8:	3d ec       	ldi	r19, 0xCD	; 205
     1da:	44 ef       	ldi	r20, 0xF4	; 244
     1dc:	51 e4       	ldi	r21, 0x41	; 65
     1de:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__mulsf3>
     1e2:	0e 94 8d 13 	call	0x271a	; 0x271a <__fixsfsi>
     1e6:	dc 01       	movw	r26, r24
     1e8:	cb 01       	movw	r24, r22
     1ea:	88 0d       	add	r24, r8
     1ec:	99 1d       	adc	r25, r9
     1ee:	aa 1d       	adc	r26, r10
     1f0:	bb 1d       	adc	r27, r11
     1f2:	4c 01       	movw	r8, r24
     1f4:	5d 01       	movw	r10, r26
     1f6:	8d 0e       	add	r8, r29
     1f8:	91 1c       	adc	r9, r1
     1fa:	a1 1c       	adc	r10, r1
     1fc:	b1 1c       	adc	r11, r1
     1fe:	82 e0       	ldi	r24, 0x02	; 2
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	a0 e0       	ldi	r26, 0x00	; 0
     204:	b0 e0       	ldi	r27, 0x00	; 0
     206:	8c 19       	sub	r24, r12
     208:	9d 09       	sbc	r25, r13
     20a:	ae 09       	sbc	r26, r14
     20c:	bf 09       	sbc	r27, r15
     20e:	f5 94       	asr	r15
     210:	e7 94       	ror	r14
     212:	d7 94       	ror	r13
     214:	c7 94       	ror	r12
     216:	f5 94       	asr	r15
     218:	e7 94       	ror	r14
     21a:	d7 94       	ror	r13
     21c:	c7 94       	ror	r12
     21e:	c8 0e       	add	r12, r24
     220:	d9 1e       	adc	r13, r25
     222:	ea 1e       	adc	r14, r26
     224:	fb 1e       	adc	r15, r27
     226:	d5 01       	movw	r26, r10
     228:	c4 01       	movw	r24, r8
     22a:	8c 0d       	add	r24, r12
     22c:	9d 1d       	adc	r25, r13
     22e:	ae 1d       	adc	r26, r14
     230:	bf 1d       	adc	r27, r15
     232:	bc 01       	movw	r22, r24
     234:	cd 01       	movw	r24, r26
     236:	64 5f       	subi	r22, 0xF4	; 244
     238:	75 40       	sbci	r23, 0x05	; 5
     23a:	81 09       	sbc	r24, r1
     23c:	91 09       	sbc	r25, r1
	(long)(30.6001 * (month + 1)) +
	day + B - 1524;
}
     23e:	df 91       	pop	r29
     240:	cf 91       	pop	r28
     242:	ff 90       	pop	r15
     244:	ef 90       	pop	r14
     246:	df 90       	pop	r13
     248:	cf 90       	pop	r12
     24a:	bf 90       	pop	r11
     24c:	af 90       	pop	r10
     24e:	9f 90       	pop	r9
     250:	8f 90       	pop	r8
     252:	08 95       	ret

00000254 <jdToHijri>:

void jdToHijri(long JD, uint8_t* h_day, uint8_t* h_month, uint16_t* h_year) {
     254:	2f 92       	push	r2
     256:	3f 92       	push	r3
     258:	4f 92       	push	r4
     25a:	5f 92       	push	r5
     25c:	6f 92       	push	r6
     25e:	7f 92       	push	r7
     260:	8f 92       	push	r8
     262:	9f 92       	push	r9
     264:	af 92       	push	r10
     266:	bf 92       	push	r11
     268:	cf 92       	push	r12
     26a:	df 92       	push	r13
     26c:	ef 92       	push	r14
     26e:	ff 92       	push	r15
     270:	0f 93       	push	r16
     272:	1f 93       	push	r17
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
     278:	00 d0       	rcall	.+0      	; 0x27a <jdToHijri+0x26>
     27a:	00 d0       	rcall	.+0      	; 0x27c <jdToHijri+0x28>
     27c:	00 d0       	rcall	.+0      	; 0x27e <jdToHijri+0x2a>
     27e:	cd b7       	in	r28, 0x3d	; 61
     280:	de b7       	in	r29, 0x3e	; 62
     282:	5e 83       	std	Y+6, r21	; 0x06
     284:	4d 83       	std	Y+5, r20	; 0x05
     286:	19 01       	movw	r2, r18
	long daysSinceHijri = JD - JD_ISLAMIC_EPOCH;
     288:	6b 01       	movw	r12, r22
     28a:	7c 01       	movw	r14, r24
     28c:	27 e1       	ldi	r18, 0x17	; 23
     28e:	c2 1a       	sub	r12, r18
     290:	2b eb       	ldi	r18, 0xBB	; 187
     292:	d2 0a       	sbc	r13, r18
     294:	2d e1       	ldi	r18, 0x1D	; 29
     296:	e2 0a       	sbc	r14, r18
     298:	f1 08       	sbc	r15, r1

	long hY = (30 * daysSinceHijri + 10646) / 10631;
     29a:	d7 01       	movw	r26, r14
     29c:	c6 01       	movw	r24, r12
     29e:	88 0f       	add	r24, r24
     2a0:	99 1f       	adc	r25, r25
     2a2:	aa 1f       	adc	r26, r26
     2a4:	bb 1f       	adc	r27, r27
     2a6:	ac 01       	movw	r20, r24
     2a8:	bd 01       	movw	r22, r26
     2aa:	4c 0d       	add	r20, r12
     2ac:	5d 1d       	adc	r21, r13
     2ae:	6e 1d       	adc	r22, r14
     2b0:	7f 1d       	adc	r23, r15
     2b2:	db 01       	movw	r26, r22
     2b4:	ca 01       	movw	r24, r20
     2b6:	88 0f       	add	r24, r24
     2b8:	99 1f       	adc	r25, r25
     2ba:	aa 1f       	adc	r26, r26
     2bc:	bb 1f       	adc	r27, r27
     2be:	88 0f       	add	r24, r24
     2c0:	99 1f       	adc	r25, r25
     2c2:	aa 1f       	adc	r26, r26
     2c4:	bb 1f       	adc	r27, r27
     2c6:	84 0f       	add	r24, r20
     2c8:	95 1f       	adc	r25, r21
     2ca:	a6 1f       	adc	r26, r22
     2cc:	b7 1f       	adc	r27, r23
     2ce:	88 0f       	add	r24, r24
     2d0:	99 1f       	adc	r25, r25
     2d2:	aa 1f       	adc	r26, r26
     2d4:	bb 1f       	adc	r27, r27
     2d6:	bc 01       	movw	r22, r24
     2d8:	cd 01       	movw	r24, r26
     2da:	6a 56       	subi	r22, 0x6A	; 106
     2dc:	76 4d       	sbci	r23, 0xD6	; 214
     2de:	8f 4f       	sbci	r24, 0xFF	; 255
     2e0:	9f 4f       	sbci	r25, 0xFF	; 255
     2e2:	27 e8       	ldi	r18, 0x87	; 135
     2e4:	39 e2       	ldi	r19, 0x29	; 41
     2e6:	40 e0       	ldi	r20, 0x00	; 0
     2e8:	50 e0       	ldi	r21, 0x00	; 0
     2ea:	0e 94 22 17 	call	0x2e44	; 0x2e44 <__divmodsi4>
     2ee:	29 01       	movw	r4, r18
     2f0:	3a 01       	movw	r6, r20
	long priorDays = daysSinceHijri - ((hY - 1) * 354 + (int)((3 + (11 * hY)) / 30));
     2f2:	ba 01       	movw	r22, r20
     2f4:	a9 01       	movw	r20, r18
     2f6:	44 0f       	add	r20, r20
     2f8:	55 1f       	adc	r21, r21
     2fa:	66 1f       	adc	r22, r22
     2fc:	77 1f       	adc	r23, r23
     2fe:	db 01       	movw	r26, r22
     300:	ca 01       	movw	r24, r20
     302:	88 0f       	add	r24, r24
     304:	99 1f       	adc	r25, r25
     306:	aa 1f       	adc	r26, r26
     308:	bb 1f       	adc	r27, r27
     30a:	88 0f       	add	r24, r24
     30c:	99 1f       	adc	r25, r25
     30e:	aa 1f       	adc	r26, r26
     310:	bb 1f       	adc	r27, r27
     312:	84 0f       	add	r24, r20
     314:	95 1f       	adc	r25, r21
     316:	a6 1f       	adc	r26, r22
     318:	b7 1f       	adc	r27, r23
     31a:	84 0d       	add	r24, r4
     31c:	95 1d       	adc	r25, r5
     31e:	a6 1d       	adc	r26, r6
     320:	b7 1d       	adc	r27, r7
     322:	bc 01       	movw	r22, r24
     324:	cd 01       	movw	r24, r26
     326:	6d 5f       	subi	r22, 0xFD	; 253
     328:	7f 4f       	sbci	r23, 0xFF	; 255
     32a:	8f 4f       	sbci	r24, 0xFF	; 255
     32c:	9f 4f       	sbci	r25, 0xFF	; 255
     32e:	2e e1       	ldi	r18, 0x1E	; 30
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	40 e0       	ldi	r20, 0x00	; 0
     334:	50 e0       	ldi	r21, 0x00	; 0
     336:	0e 94 22 17 	call	0x2e44	; 0x2e44 <__divmodsi4>
     33a:	49 01       	movw	r8, r18
     33c:	33 0f       	add	r19, r19
     33e:	aa 08       	sbc	r10, r10
     340:	bb 08       	sbc	r11, r11
     342:	a3 01       	movw	r20, r6
     344:	92 01       	movw	r18, r4
     346:	21 50       	subi	r18, 0x01	; 1
     348:	31 09       	sbc	r19, r1
     34a:	41 09       	sbc	r20, r1
     34c:	51 09       	sbc	r21, r1
     34e:	a2 e6       	ldi	r26, 0x62	; 98
     350:	b1 e0       	ldi	r27, 0x01	; 1
     352:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__muluhisi3>
     356:	86 0e       	add	r8, r22
     358:	97 1e       	adc	r9, r23
     35a:	a8 1e       	adc	r10, r24
     35c:	b9 1e       	adc	r11, r25

	long hM = (priorDays + 28) / 29.5;
     35e:	d7 01       	movw	r26, r14
     360:	c6 01       	movw	r24, r12
     362:	88 19       	sub	r24, r8
     364:	99 09       	sbc	r25, r9
     366:	aa 09       	sbc	r26, r10
     368:	bb 09       	sbc	r27, r11
     36a:	bc 01       	movw	r22, r24
     36c:	cd 01       	movw	r24, r26
     36e:	64 5e       	subi	r22, 0xE4	; 228
     370:	7f 4f       	sbci	r23, 0xFF	; 255
     372:	8f 4f       	sbci	r24, 0xFF	; 255
     374:	9f 4f       	sbci	r25, 0xFF	; 255
     376:	0e 94 c5 13 	call	0x278a	; 0x278a <__floatsisf>
     37a:	20 e0       	ldi	r18, 0x00	; 0
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	4c ee       	ldi	r20, 0xEC	; 236
     380:	51 e4       	ldi	r21, 0x41	; 65
     382:	0e 94 1b 13 	call	0x2636	; 0x2636 <__divsf3>
     386:	0e 94 8d 13 	call	0x271a	; 0x271a <__fixsfsi>
	if (hM < 1) hM = 1;
     38a:	16 16       	cp	r1, r22
     38c:	17 06       	cpc	r1, r23
     38e:	18 06       	cpc	r1, r24
     390:	19 06       	cpc	r1, r25
     392:	24 f0       	brlt	.+8      	; 0x39c <jdToHijri+0x148>
     394:	61 e0       	ldi	r22, 0x01	; 1
     396:	70 e0       	ldi	r23, 0x00	; 0
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	69 83       	std	Y+1, r22	; 0x01
     39e:	7a 83       	std	Y+2, r23	; 0x02
     3a0:	8b 83       	std	Y+3, r24	; 0x03
     3a2:	9c 83       	std	Y+4, r25	; 0x04
     3a4:	6d 30       	cpi	r22, 0x0D	; 13
     3a6:	71 05       	cpc	r23, r1
     3a8:	81 05       	cpc	r24, r1
     3aa:	91 05       	cpc	r25, r1
     3ac:	44 f0       	brlt	.+16     	; 0x3be <jdToHijri+0x16a>
     3ae:	8c e0       	ldi	r24, 0x0C	; 12
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	a0 e0       	ldi	r26, 0x00	; 0
     3b4:	b0 e0       	ldi	r27, 0x00	; 0
     3b6:	89 83       	std	Y+1, r24	; 0x01
     3b8:	9a 83       	std	Y+2, r25	; 0x02
     3ba:	ab 83       	std	Y+3, r26	; 0x03
     3bc:	bc 83       	std	Y+4, r27	; 0x04
	if (hM > 12) hM = 12;

	long hD = JD - JD_ISLAMIC_EPOCH -
     3be:	69 81       	ldd	r22, Y+1	; 0x01
     3c0:	7a 81       	ldd	r23, Y+2	; 0x02
     3c2:	8b 81       	ldd	r24, Y+3	; 0x03
     3c4:	9c 81       	ldd	r25, Y+4	; 0x04
     3c6:	61 50       	subi	r22, 0x01	; 1
     3c8:	71 09       	sbc	r23, r1
     3ca:	81 09       	sbc	r24, r1
     3cc:	91 09       	sbc	r25, r1
     3ce:	0e 94 c5 13 	call	0x278a	; 0x278a <__floatsisf>
     3d2:	20 e0       	ldi	r18, 0x00	; 0
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	4c ee       	ldi	r20, 0xEC	; 236
     3d8:	51 e4       	ldi	r21, 0x41	; 65
     3da:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__mulsf3>
     3de:	0e 94 8d 13 	call	0x271a	; 0x271a <__fixsfsi>
     3e2:	cb 01       	movw	r24, r22
     3e4:	77 0f       	add	r23, r23
     3e6:	aa 0b       	sbc	r26, r26
     3e8:	bb 0b       	sbc	r27, r27
     3ea:	88 0e       	add	r8, r24
     3ec:	99 1e       	adc	r9, r25
     3ee:	aa 1e       	adc	r10, r26
     3f0:	bb 1e       	adc	r11, r27
     3f2:	c8 18       	sub	r12, r8
     3f4:	d9 08       	sbc	r13, r9
     3f6:	ea 08       	sbc	r14, r10
     3f8:	fb 08       	sbc	r15, r11
     3fa:	9f ef       	ldi	r25, 0xFF	; 255
     3fc:	c9 1a       	sub	r12, r25
     3fe:	d9 0a       	sbc	r13, r25
     400:	e9 0a       	sbc	r14, r25
     402:	f9 0a       	sbc	r15, r25
	((hY - 1) * 354 + (int)((3 + (11 * hY)) / 30) + (int)(29.5 * (hM - 1))) + 1;

	if (hD < 1) hD = 1;
     404:	1c 14       	cp	r1, r12
     406:	1d 04       	cpc	r1, r13
     408:	1e 04       	cpc	r1, r14
     40a:	1f 04       	cpc	r1, r15
     40c:	24 f0       	brlt	.+8      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     40e:	c1 2c       	mov	r12, r1
     410:	d1 2c       	mov	r13, r1
     412:	76 01       	movw	r14, r12
     414:	c3 94       	inc	r12
	if (hD > 30) hD = 30;

	*h_day = (uint8_t)hD;
     416:	af e1       	ldi	r26, 0x1F	; 31
     418:	ca 16       	cp	r12, r26
     41a:	d1 04       	cpc	r13, r1
     41c:	e1 04       	cpc	r14, r1
     41e:	f1 04       	cpc	r15, r1
     420:	3c f0       	brlt	.+14     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     422:	0f 2e       	mov	r0, r31
     424:	fe e1       	ldi	r31, 0x1E	; 30
     426:	cf 2e       	mov	r12, r31
     428:	d1 2c       	mov	r13, r1
     42a:	e1 2c       	mov	r14, r1
     42c:	f1 2c       	mov	r15, r1
     42e:	f0 2d       	mov	r31, r0
     430:	ed 81       	ldd	r30, Y+5	; 0x05
     432:	fe 81       	ldd	r31, Y+6	; 0x06
     434:	c0 82       	st	Z, r12
	*h_month = (uint8_t)hM;
     436:	e9 81       	ldd	r30, Y+1	; 0x01
     438:	d1 01       	movw	r26, r2
     43a:	ec 93       	st	X, r30
	*h_year = (uint16_t)hY;
     43c:	d8 01       	movw	r26, r16
     43e:	4d 92       	st	X+, r4
     440:	5c 92       	st	X, r5
}
     442:	26 96       	adiw	r28, 0x06	; 6
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	f8 94       	cli
     448:	de bf       	out	0x3e, r29	; 62
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	cd bf       	out	0x3d, r28	; 61
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	1f 91       	pop	r17
     454:	0f 91       	pop	r16
     456:	ff 90       	pop	r15
     458:	ef 90       	pop	r14
     45a:	df 90       	pop	r13
     45c:	cf 90       	pop	r12
     45e:	bf 90       	pop	r11
     460:	af 90       	pop	r10
     462:	9f 90       	pop	r9
     464:	8f 90       	pop	r8
     466:	7f 90       	pop	r7
     468:	6f 90       	pop	r6
     46a:	5f 90       	pop	r5
     46c:	4f 90       	pop	r4
     46e:	3f 90       	pop	r3
     470:	2f 90       	pop	r2
     472:	08 95       	ret

00000474 <convertToHijriWithOffset>:


void convertToHijriWithOffset(uint16_t g_year, uint8_t g_month, uint8_t g_day,
int8_t day_offset,
uint8_t* h_day, uint8_t* h_month, uint16_t* h_year) {
     474:	8f 92       	push	r8
     476:	9f 92       	push	r9
     478:	af 92       	push	r10
     47a:	bf 92       	push	r11
     47c:	cf 92       	push	r12
     47e:	df 92       	push	r13
     480:	ef 92       	push	r14
     482:	ff 92       	push	r15
     484:	0f 93       	push	r16
     486:	1f 93       	push	r17
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	82 2e       	mov	r8, r18
     48e:	e8 01       	movw	r28, r16
     490:	86 01       	movw	r16, r12
	long jd = gregorianToJD(g_year, g_month, g_day);
     492:	0e 94 b1 00 	call	0x162	; 0x162 <gregorianToJD>
	jd += day_offset;
	jdToHijri(jd, h_day, h_month, h_year);
     496:	08 2c       	mov	r0, r8
     498:	00 0c       	add	r0, r0
     49a:	99 08       	sbc	r9, r9
     49c:	aa 08       	sbc	r10, r10
     49e:	bb 08       	sbc	r11, r11
     4a0:	68 0d       	add	r22, r8
     4a2:	79 1d       	adc	r23, r9
     4a4:	8a 1d       	adc	r24, r10
     4a6:	9b 1d       	adc	r25, r11
     4a8:	97 01       	movw	r18, r14
     4aa:	ae 01       	movw	r20, r28
     4ac:	0e 94 2a 01 	call	0x254	; 0x254 <jdToHijri>
}
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	1f 91       	pop	r17
     4b6:	0f 91       	pop	r16
     4b8:	ff 90       	pop	r15
     4ba:	ef 90       	pop	r14
     4bc:	df 90       	pop	r13
     4be:	cf 90       	pop	r12
     4c0:	bf 90       	pop	r11
     4c2:	af 90       	pop	r10
     4c4:	9f 90       	pop	r9
     4c6:	8f 90       	pop	r8
     4c8:	08 95       	ret

000004ca <UART_vInit>:
	UDR = data;
}

void UART_vSendString(const char *str)
{
	while (*str)
     4ca:	dc 01       	movw	r26, r24
     4cc:	cb 01       	movw	r24, r22
     4ce:	88 0f       	add	r24, r24
     4d0:	99 1f       	adc	r25, r25
     4d2:	aa 1f       	adc	r26, r26
     4d4:	bb 1f       	adc	r27, r27
     4d6:	88 0f       	add	r24, r24
     4d8:	99 1f       	adc	r25, r25
     4da:	aa 1f       	adc	r26, r26
     4dc:	bb 1f       	adc	r27, r27
     4de:	9c 01       	movw	r18, r24
     4e0:	ad 01       	movw	r20, r26
     4e2:	22 0f       	add	r18, r18
     4e4:	33 1f       	adc	r19, r19
     4e6:	44 1f       	adc	r20, r20
     4e8:	55 1f       	adc	r21, r21
     4ea:	22 0f       	add	r18, r18
     4ec:	33 1f       	adc	r19, r19
     4ee:	44 1f       	adc	r20, r20
     4f0:	55 1f       	adc	r21, r21
     4f2:	60 e0       	ldi	r22, 0x00	; 0
     4f4:	72 e1       	ldi	r23, 0x12	; 18
     4f6:	8a e7       	ldi	r24, 0x7A	; 122
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	0e 94 00 17 	call	0x2e00	; 0x2e00 <__udivmodsi4>
     4fe:	21 50       	subi	r18, 0x01	; 1
     500:	31 09       	sbc	r19, r1
     502:	30 bd       	out	0x20, r19	; 32
     504:	29 b9       	out	0x09, r18	; 9
     506:	53 9a       	sbi	0x0a, 3	; 10
     508:	54 9a       	sbi	0x0a, 4	; 10
     50a:	86 e8       	ldi	r24, 0x86	; 134
     50c:	80 bd       	out	0x20, r24	; 32
     50e:	08 95       	ret

00000510 <UART_u8ReceiveData>:
	}
}

char UART_u8ReceiveData(void)
{
	while (!READ_BIT(UCSRA, RXC)); // Wait until data is received
     510:	8b b1       	in	r24, 0x0b	; 11
	return UDR;
     512:	8c b1       	in	r24, 0x0c	; 12
}
     514:	08 95       	ret

00000516 <DIO_vsetPINDir>:
#include <avr/io.h>
#include "std_macros.h"
void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
     516:	82 34       	cpi	r24, 0x42	; 66
     518:	19 f1       	breq	.+70     	; 0x560 <DIO_vsetPINDir+0x4a>
     51a:	18 f4       	brcc	.+6      	; 0x522 <DIO_vsetPINDir+0xc>
     51c:	81 34       	cpi	r24, 0x41	; 65
     51e:	39 f0       	breq	.+14     	; 0x52e <DIO_vsetPINDir+0x18>
     520:	08 95       	ret
     522:	83 34       	cpi	r24, 0x43	; 67
     524:	b1 f1       	breq	.+108    	; 0x592 <DIO_vsetPINDir+0x7c>
     526:	84 34       	cpi	r24, 0x44	; 68
     528:	09 f4       	brne	.+2      	; 0x52c <DIO_vsetPINDir+0x16>
     52a:	4c c0       	rjmp	.+152    	; 0x5c4 <DIO_vsetPINDir+0xae>
     52c:	08 95       	ret
	{
		

		case 'A':
		if(direction==1)
     52e:	41 30       	cpi	r20, 0x01	; 1
     530:	59 f4       	brne	.+22     	; 0x548 <DIO_vsetPINDir+0x32>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
     532:	2a b3       	in	r18, 0x1a	; 26
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	02 c0       	rjmp	.+4      	; 0x53e <DIO_vsetPINDir+0x28>
     53a:	88 0f       	add	r24, r24
     53c:	99 1f       	adc	r25, r25
     53e:	6a 95       	dec	r22
     540:	e2 f7       	brpl	.-8      	; 0x53a <DIO_vsetPINDir+0x24>
     542:	82 2b       	or	r24, r18
     544:	8a bb       	out	0x1a, r24	; 26
     546:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
     548:	2a b3       	in	r18, 0x1a	; 26
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	02 c0       	rjmp	.+4      	; 0x554 <DIO_vsetPINDir+0x3e>
     550:	88 0f       	add	r24, r24
     552:	99 1f       	adc	r25, r25
     554:	6a 95       	dec	r22
     556:	e2 f7       	brpl	.-8      	; 0x550 <DIO_vsetPINDir+0x3a>
     558:	80 95       	com	r24
     55a:	82 23       	and	r24, r18
     55c:	8a bb       	out	0x1a, r24	; 26
     55e:	08 95       	ret
		}
		break;
		case 'B':
		if(direction==1)
     560:	41 30       	cpi	r20, 0x01	; 1
     562:	59 f4       	brne	.+22     	; 0x57a <DIO_vsetPINDir+0x64>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
     564:	27 b3       	in	r18, 0x17	; 23
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	02 c0       	rjmp	.+4      	; 0x570 <DIO_vsetPINDir+0x5a>
     56c:	88 0f       	add	r24, r24
     56e:	99 1f       	adc	r25, r25
     570:	6a 95       	dec	r22
     572:	e2 f7       	brpl	.-8      	; 0x56c <DIO_vsetPINDir+0x56>
     574:	82 2b       	or	r24, r18
     576:	87 bb       	out	0x17, r24	; 23
     578:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
     57a:	27 b3       	in	r18, 0x17	; 23
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	02 c0       	rjmp	.+4      	; 0x586 <DIO_vsetPINDir+0x70>
     582:	88 0f       	add	r24, r24
     584:	99 1f       	adc	r25, r25
     586:	6a 95       	dec	r22
     588:	e2 f7       	brpl	.-8      	; 0x582 <DIO_vsetPINDir+0x6c>
     58a:	80 95       	com	r24
     58c:	82 23       	and	r24, r18
     58e:	87 bb       	out	0x17, r24	; 23
     590:	08 95       	ret
		}
		break;
		case 'C':
		if(direction==1)
     592:	41 30       	cpi	r20, 0x01	; 1
     594:	59 f4       	brne	.+22     	; 0x5ac <DIO_vsetPINDir+0x96>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
     596:	24 b3       	in	r18, 0x14	; 20
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	02 c0       	rjmp	.+4      	; 0x5a2 <DIO_vsetPINDir+0x8c>
     59e:	88 0f       	add	r24, r24
     5a0:	99 1f       	adc	r25, r25
     5a2:	6a 95       	dec	r22
     5a4:	e2 f7       	brpl	.-8      	; 0x59e <DIO_vsetPINDir+0x88>
     5a6:	82 2b       	or	r24, r18
     5a8:	84 bb       	out	0x14, r24	; 20
     5aa:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
     5ac:	24 b3       	in	r18, 0x14	; 20
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <DIO_vsetPINDir+0xa2>
     5b4:	88 0f       	add	r24, r24
     5b6:	99 1f       	adc	r25, r25
     5b8:	6a 95       	dec	r22
     5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <DIO_vsetPINDir+0x9e>
     5bc:	80 95       	com	r24
     5be:	82 23       	and	r24, r18
     5c0:	84 bb       	out	0x14, r24	; 20
     5c2:	08 95       	ret
		}
		break;
		case 'D':
		if(direction==1)
     5c4:	41 30       	cpi	r20, 0x01	; 1
     5c6:	59 f4       	brne	.+22     	; 0x5de <DIO_vsetPINDir+0xc8>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
     5c8:	21 b3       	in	r18, 0x11	; 17
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <DIO_vsetPINDir+0xbe>
     5d0:	88 0f       	add	r24, r24
     5d2:	99 1f       	adc	r25, r25
     5d4:	6a 95       	dec	r22
     5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <DIO_vsetPINDir+0xba>
     5d8:	82 2b       	or	r24, r18
     5da:	81 bb       	out	0x11, r24	; 17
     5dc:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
     5de:	21 b3       	in	r18, 0x11	; 17
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	02 c0       	rjmp	.+4      	; 0x5ea <DIO_vsetPINDir+0xd4>
     5e6:	88 0f       	add	r24, r24
     5e8:	99 1f       	adc	r25, r25
     5ea:	6a 95       	dec	r22
     5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <DIO_vsetPINDir+0xd0>
     5ee:	80 95       	com	r24
     5f0:	82 23       	and	r24, r18
     5f2:	81 bb       	out	0x11, r24	; 17
     5f4:	08 95       	ret

000005f6 <DIO_write>:
}


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
	switch(portname)
     5f6:	82 34       	cpi	r24, 0x42	; 66
     5f8:	19 f1       	breq	.+70     	; 0x640 <DIO_write+0x4a>
     5fa:	18 f4       	brcc	.+6      	; 0x602 <DIO_write+0xc>
     5fc:	81 34       	cpi	r24, 0x41	; 65
     5fe:	39 f0       	breq	.+14     	; 0x60e <DIO_write+0x18>
     600:	08 95       	ret
     602:	83 34       	cpi	r24, 0x43	; 67
     604:	b1 f1       	breq	.+108    	; 0x672 <DIO_write+0x7c>
     606:	84 34       	cpi	r24, 0x44	; 68
     608:	09 f4       	brne	.+2      	; 0x60c <DIO_write+0x16>
     60a:	4c c0       	rjmp	.+152    	; 0x6a4 <DIO_write+0xae>
     60c:	08 95       	ret
	{
		case 'A' :
		
		if(outputvalue==1)
     60e:	41 30       	cpi	r20, 0x01	; 1
     610:	59 f4       	brne	.+22     	; 0x628 <DIO_write+0x32>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
     612:	2b b3       	in	r18, 0x1b	; 27
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	02 c0       	rjmp	.+4      	; 0x61e <DIO_write+0x28>
     61a:	88 0f       	add	r24, r24
     61c:	99 1f       	adc	r25, r25
     61e:	6a 95       	dec	r22
     620:	e2 f7       	brpl	.-8      	; 0x61a <DIO_write+0x24>
     622:	82 2b       	or	r24, r18
     624:	8b bb       	out	0x1b, r24	; 27
     626:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
     628:	2b b3       	in	r18, 0x1b	; 27
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	02 c0       	rjmp	.+4      	; 0x634 <DIO_write+0x3e>
     630:	88 0f       	add	r24, r24
     632:	99 1f       	adc	r25, r25
     634:	6a 95       	dec	r22
     636:	e2 f7       	brpl	.-8      	; 0x630 <DIO_write+0x3a>
     638:	80 95       	com	r24
     63a:	82 23       	and	r24, r18
     63c:	8b bb       	out	0x1b, r24	; 27
     63e:	08 95       	ret
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
     640:	41 30       	cpi	r20, 0x01	; 1
     642:	59 f4       	brne	.+22     	; 0x65a <DIO_write+0x64>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
     644:	28 b3       	in	r18, 0x18	; 24
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	02 c0       	rjmp	.+4      	; 0x650 <DIO_write+0x5a>
     64c:	88 0f       	add	r24, r24
     64e:	99 1f       	adc	r25, r25
     650:	6a 95       	dec	r22
     652:	e2 f7       	brpl	.-8      	; 0x64c <DIO_write+0x56>
     654:	82 2b       	or	r24, r18
     656:	88 bb       	out	0x18, r24	; 24
     658:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
     65a:	28 b3       	in	r18, 0x18	; 24
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	02 c0       	rjmp	.+4      	; 0x666 <DIO_write+0x70>
     662:	88 0f       	add	r24, r24
     664:	99 1f       	adc	r25, r25
     666:	6a 95       	dec	r22
     668:	e2 f7       	brpl	.-8      	; 0x662 <DIO_write+0x6c>
     66a:	80 95       	com	r24
     66c:	82 23       	and	r24, r18
     66e:	88 bb       	out	0x18, r24	; 24
     670:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
     672:	41 30       	cpi	r20, 0x01	; 1
     674:	59 f4       	brne	.+22     	; 0x68c <DIO_write+0x96>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
     676:	25 b3       	in	r18, 0x15	; 21
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	02 c0       	rjmp	.+4      	; 0x682 <DIO_write+0x8c>
     67e:	88 0f       	add	r24, r24
     680:	99 1f       	adc	r25, r25
     682:	6a 95       	dec	r22
     684:	e2 f7       	brpl	.-8      	; 0x67e <DIO_write+0x88>
     686:	82 2b       	or	r24, r18
     688:	85 bb       	out	0x15, r24	; 21
     68a:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
     68c:	25 b3       	in	r18, 0x15	; 21
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	02 c0       	rjmp	.+4      	; 0x698 <DIO_write+0xa2>
     694:	88 0f       	add	r24, r24
     696:	99 1f       	adc	r25, r25
     698:	6a 95       	dec	r22
     69a:	e2 f7       	brpl	.-8      	; 0x694 <DIO_write+0x9e>
     69c:	80 95       	com	r24
     69e:	82 23       	and	r24, r18
     6a0:	85 bb       	out	0x15, r24	; 21
     6a2:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
     6a4:	41 30       	cpi	r20, 0x01	; 1
     6a6:	59 f4       	brne	.+22     	; 0x6be <DIO_write+0xc8>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
     6a8:	22 b3       	in	r18, 0x12	; 18
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <DIO_write+0xbe>
     6b0:	88 0f       	add	r24, r24
     6b2:	99 1f       	adc	r25, r25
     6b4:	6a 95       	dec	r22
     6b6:	e2 f7       	brpl	.-8      	; 0x6b0 <DIO_write+0xba>
     6b8:	82 2b       	or	r24, r18
     6ba:	82 bb       	out	0x12, r24	; 18
     6bc:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
     6be:	22 b3       	in	r18, 0x12	; 18
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	02 c0       	rjmp	.+4      	; 0x6ca <DIO_write+0xd4>
     6c6:	88 0f       	add	r24, r24
     6c8:	99 1f       	adc	r25, r25
     6ca:	6a 95       	dec	r22
     6cc:	e2 f7       	brpl	.-8      	; 0x6c6 <DIO_write+0xd0>
     6ce:	80 95       	com	r24
     6d0:	82 23       	and	r24, r18
     6d2:	82 bb       	out	0x12, r24	; 18
     6d4:	08 95       	ret

000006d6 <DIO_u8read>:
}

unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
	switch(portname)
     6d6:	82 34       	cpi	r24, 0x42	; 66
     6d8:	d9 f0       	breq	.+54     	; 0x710 <DIO_u8read+0x3a>
     6da:	18 f4       	brcc	.+6      	; 0x6e2 <DIO_u8read+0xc>
     6dc:	81 34       	cpi	r24, 0x41	; 65
     6de:	31 f0       	breq	.+12     	; 0x6ec <DIO_u8read+0x16>
     6e0:	4d c0       	rjmp	.+154    	; 0x77c <DIO_u8read+0xa6>
     6e2:	83 34       	cpi	r24, 0x43	; 67
     6e4:	39 f1       	breq	.+78     	; 0x734 <DIO_u8read+0x5e>
     6e6:	84 34       	cpi	r24, 0x44	; 68
     6e8:	b9 f1       	breq	.+110    	; 0x758 <DIO_u8read+0x82>
     6ea:	48 c0       	rjmp	.+144    	; 0x77c <DIO_u8read+0xa6>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
     6ec:	29 b3       	in	r18, 0x19	; 25
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	06 2e       	mov	r0, r22
     6f4:	02 c0       	rjmp	.+4      	; 0x6fa <DIO_u8read+0x24>
     6f6:	88 0f       	add	r24, r24
     6f8:	99 1f       	adc	r25, r25
     6fa:	0a 94       	dec	r0
     6fc:	e2 f7       	brpl	.-8      	; 0x6f6 <DIO_u8read+0x20>
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	82 23       	and	r24, r18
     702:	93 23       	and	r25, r19
     704:	02 c0       	rjmp	.+4      	; 0x70a <DIO_u8read+0x34>
     706:	95 95       	asr	r25
     708:	87 95       	ror	r24
     70a:	6a 95       	dec	r22
     70c:	e2 f7       	brpl	.-8      	; 0x706 <DIO_u8read+0x30>
		break;
     70e:	08 95       	ret
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
     710:	26 b3       	in	r18, 0x16	; 22
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	06 2e       	mov	r0, r22
     718:	02 c0       	rjmp	.+4      	; 0x71e <DIO_u8read+0x48>
     71a:	88 0f       	add	r24, r24
     71c:	99 1f       	adc	r25, r25
     71e:	0a 94       	dec	r0
     720:	e2 f7       	brpl	.-8      	; 0x71a <DIO_u8read+0x44>
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	82 23       	and	r24, r18
     726:	93 23       	and	r25, r19
     728:	02 c0       	rjmp	.+4      	; 0x72e <DIO_u8read+0x58>
     72a:	95 95       	asr	r25
     72c:	87 95       	ror	r24
     72e:	6a 95       	dec	r22
     730:	e2 f7       	brpl	.-8      	; 0x72a <DIO_u8read+0x54>
		break;
     732:	08 95       	ret
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
     734:	23 b3       	in	r18, 0x13	; 19
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	06 2e       	mov	r0, r22
     73c:	02 c0       	rjmp	.+4      	; 0x742 <DIO_u8read+0x6c>
     73e:	88 0f       	add	r24, r24
     740:	99 1f       	adc	r25, r25
     742:	0a 94       	dec	r0
     744:	e2 f7       	brpl	.-8      	; 0x73e <DIO_u8read+0x68>
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	82 23       	and	r24, r18
     74a:	93 23       	and	r25, r19
     74c:	02 c0       	rjmp	.+4      	; 0x752 <DIO_u8read+0x7c>
     74e:	95 95       	asr	r25
     750:	87 95       	ror	r24
     752:	6a 95       	dec	r22
     754:	e2 f7       	brpl	.-8      	; 0x74e <DIO_u8read+0x78>
		break;
     756:	08 95       	ret
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
     758:	20 b3       	in	r18, 0x10	; 16
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	06 2e       	mov	r0, r22
     760:	02 c0       	rjmp	.+4      	; 0x766 <DIO_u8read+0x90>
     762:	88 0f       	add	r24, r24
     764:	99 1f       	adc	r25, r25
     766:	0a 94       	dec	r0
     768:	e2 f7       	brpl	.-8      	; 0x762 <DIO_u8read+0x8c>
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	82 23       	and	r24, r18
     76e:	93 23       	and	r25, r19
     770:	02 c0       	rjmp	.+4      	; 0x776 <DIO_u8read+0xa0>
     772:	95 95       	asr	r25
     774:	87 95       	ror	r24
     776:	6a 95       	dec	r22
     778:	e2 f7       	brpl	.-8      	; 0x772 <DIO_u8read+0x9c>
		break;
     77a:	08 95       	ret
	}
}

unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
     77c:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default:
		break;
	}
	return return_value ;
}
     77e:	08 95       	ret

00000780 <DIO_set_port_direction>:

void DIO_set_port_direction(unsigned char portname,unsigned char direction)
{
	switch(portname)
     780:	82 34       	cpi	r24, 0x42	; 66
     782:	59 f0       	breq	.+22     	; 0x79a <DIO_set_port_direction+0x1a>
     784:	18 f4       	brcc	.+6      	; 0x78c <DIO_set_port_direction+0xc>
     786:	81 34       	cpi	r24, 0x41	; 65
     788:	31 f0       	breq	.+12     	; 0x796 <DIO_set_port_direction+0x16>
     78a:	08 95       	ret
     78c:	83 34       	cpi	r24, 0x43	; 67
     78e:	39 f0       	breq	.+14     	; 0x79e <DIO_set_port_direction+0x1e>
     790:	84 34       	cpi	r24, 0x44	; 68
     792:	39 f0       	breq	.+14     	; 0x7a2 <DIO_set_port_direction+0x22>
     794:	08 95       	ret
	{
		case 'A' :
		DDRA=direction; //set the direction of port A
     796:	6a bb       	out	0x1a, r22	; 26
		break ;
     798:	08 95       	ret
		case 'B':
		DDRB=direction; //set the direction of port B
     79a:	67 bb       	out	0x17, r22	; 23
		break ;
     79c:	08 95       	ret
		case 'C' :
		DDRC=direction; //set the direction of port C
     79e:	64 bb       	out	0x14, r22	; 20
		break ;
     7a0:	08 95       	ret
		case 'D':
		DDRD=direction; //set the direction of port D
     7a2:	61 bb       	out	0x11, r22	; 17
     7a4:	08 95       	ret

000007a6 <DIO_write_port>:
	}
	
}
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
	switch(portname)
     7a6:	82 34       	cpi	r24, 0x42	; 66
     7a8:	59 f0       	breq	.+22     	; 0x7c0 <DIO_write_port+0x1a>
     7aa:	18 f4       	brcc	.+6      	; 0x7b2 <DIO_write_port+0xc>
     7ac:	81 34       	cpi	r24, 0x41	; 65
     7ae:	31 f0       	breq	.+12     	; 0x7bc <DIO_write_port+0x16>
     7b0:	08 95       	ret
     7b2:	83 34       	cpi	r24, 0x43	; 67
     7b4:	39 f0       	breq	.+14     	; 0x7c4 <DIO_write_port+0x1e>
     7b6:	84 34       	cpi	r24, 0x44	; 68
     7b8:	39 f0       	breq	.+14     	; 0x7c8 <DIO_write_port+0x22>
     7ba:	08 95       	ret
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
     7bc:	6b bb       	out	0x1b, r22	; 27
		break ;
     7be:	08 95       	ret
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
     7c0:	68 bb       	out	0x18, r22	; 24
		break ;
     7c2:	08 95       	ret
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
     7c4:	65 bb       	out	0x15, r22	; 21
		break ;
     7c6:	08 95       	ret
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
     7c8:	62 bb       	out	0x12, r22	; 18
     7ca:	08 95       	ret

000007cc <DecimalToBCD>:
#define DS3231_ADDRESS 0x68

// ---------------------- Helper Functions ----------------------

static uint8_t DecimalToBCD(uint8_t dec) {
    return ((dec / 10) << 4) | (dec % 10);
     7cc:	9d ec       	ldi	r25, 0xCD	; 205
     7ce:	89 9f       	mul	r24, r25
     7d0:	91 2d       	mov	r25, r1
     7d2:	11 24       	eor	r1, r1
     7d4:	96 95       	lsr	r25
     7d6:	96 95       	lsr	r25
     7d8:	96 95       	lsr	r25
     7da:	20 e1       	ldi	r18, 0x10	; 16
     7dc:	92 9f       	mul	r25, r18
     7de:	a0 01       	movw	r20, r0
     7e0:	11 24       	eor	r1, r1
     7e2:	99 0f       	add	r25, r25
     7e4:	29 2f       	mov	r18, r25
     7e6:	22 0f       	add	r18, r18
     7e8:	22 0f       	add	r18, r18
     7ea:	92 0f       	add	r25, r18
     7ec:	89 1b       	sub	r24, r25
}
     7ee:	84 2b       	or	r24, r20
     7f0:	08 95       	ret

000007f2 <BCDToDecimal>:

static uint8_t BCDToDecimal(uint8_t bcd) {
    return ((bcd >> 4) * 10) + (bcd & 0x0F);
     7f2:	98 2f       	mov	r25, r24
     7f4:	92 95       	swap	r25
     7f6:	9f 70       	andi	r25, 0x0F	; 15
     7f8:	99 0f       	add	r25, r25
     7fa:	29 2f       	mov	r18, r25
     7fc:	22 0f       	add	r18, r18
     7fe:	22 0f       	add	r18, r18
     800:	92 0f       	add	r25, r18
     802:	8f 70       	andi	r24, 0x0F	; 15
}
     804:	89 0f       	add	r24, r25
     806:	08 95       	ret

00000808 <RTC_SetTime>:

// ---------------------- Time Functions ------------------------

void RTC_SetTime(uint8_t hours, uint8_t minutes, uint8_t seconds) {
     808:	1f 93       	push	r17
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
     80e:	c8 2f       	mov	r28, r24
     810:	d6 2f       	mov	r29, r22
     812:	14 2f       	mov	r17, r20
    I2C_start();
     814:	0e 94 90 05 	call	0xb20	; 0xb20 <I2C_start>
    I2C_write_address(DS3231_ADDRESS << 1);   // Write mode
     818:	80 ed       	ldi	r24, 0xD0	; 208
     81a:	0e 94 9c 05 	call	0xb38	; 0xb38 <I2C_write_address>
    I2C_write_data(0x00);                     // Set register pointer to seconds
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	0e 94 a3 05 	call	0xb46	; 0xb46 <I2C_write_data>
    I2C_write_data(DecimalToBCD(seconds));
     824:	81 2f       	mov	r24, r17
     826:	0e 94 e6 03 	call	0x7cc	; 0x7cc <DecimalToBCD>
     82a:	0e 94 a3 05 	call	0xb46	; 0xb46 <I2C_write_data>
    I2C_write_data(DecimalToBCD(minutes));
     82e:	8d 2f       	mov	r24, r29
     830:	0e 94 e6 03 	call	0x7cc	; 0x7cc <DecimalToBCD>
     834:	0e 94 a3 05 	call	0xb46	; 0xb46 <I2C_write_data>
    I2C_write_data(DecimalToBCD(hours));
     838:	8c 2f       	mov	r24, r28
     83a:	0e 94 e6 03 	call	0x7cc	; 0x7cc <DecimalToBCD>
     83e:	0e 94 a3 05 	call	0xb46	; 0xb46 <I2C_write_data>
    I2C_stop();
     842:	0e 94 aa 05 	call	0xb54	; 0xb54 <I2C_stop>
}
     846:	df 91       	pop	r29
     848:	cf 91       	pop	r28
     84a:	1f 91       	pop	r17
     84c:	08 95       	ret

0000084e <RTC_GetTime>:

void RTC_GetTime(uint8_t* hours, uint8_t* minutes, uint8_t* seconds) {
     84e:	ef 92       	push	r14
     850:	ff 92       	push	r15
     852:	0f 93       	push	r16
     854:	1f 93       	push	r17
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
     85a:	ec 01       	movw	r28, r24
     85c:	8b 01       	movw	r16, r22
     85e:	7a 01       	movw	r14, r20
    I2C_start();
     860:	0e 94 90 05 	call	0xb20	; 0xb20 <I2C_start>
    I2C_write_address(DS3231_ADDRESS << 1);   // Write mode
     864:	80 ed       	ldi	r24, 0xD0	; 208
     866:	0e 94 9c 05 	call	0xb38	; 0xb38 <I2C_write_address>
    I2C_write_data(0x00);                     // Set register pointer to seconds
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	0e 94 a3 05 	call	0xb46	; 0xb46 <I2C_write_data>
    I2C_repeated_start();
     870:	0e 94 96 05 	call	0xb2c	; 0xb2c <I2C_repeated_start>
    I2C_write_address((DS3231_ADDRESS << 1) | 1);  // Read mode
     874:	81 ed       	ldi	r24, 0xD1	; 209
     876:	0e 94 9c 05 	call	0xb38	; 0xb38 <I2C_write_address>

    *seconds = BCDToDecimal(I2C_read_with_ACK());
     87a:	0e 94 ad 05 	call	0xb5a	; 0xb5a <I2C_read_with_ACK>
     87e:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <BCDToDecimal>
     882:	f7 01       	movw	r30, r14
     884:	80 83       	st	Z, r24
    *minutes = BCDToDecimal(I2C_read_with_ACK());
     886:	0e 94 ad 05 	call	0xb5a	; 0xb5a <I2C_read_with_ACK>
     88a:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <BCDToDecimal>
     88e:	f8 01       	movw	r30, r16
     890:	80 83       	st	Z, r24
    *hours   = BCDToDecimal(I2C_read_with_NACK());
     892:	0e 94 b4 05 	call	0xb68	; 0xb68 <I2C_read_with_NACK>
     896:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <BCDToDecimal>
     89a:	88 83       	st	Y, r24

    I2C_stop();
     89c:	0e 94 aa 05 	call	0xb54	; 0xb54 <I2C_stop>
}
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	1f 91       	pop	r17
     8a6:	0f 91       	pop	r16
     8a8:	ff 90       	pop	r15
     8aa:	ef 90       	pop	r14
     8ac:	08 95       	ret

000008ae <RTC_SetDate>:

// ---------------------- Date Functions ------------------------

void RTC_SetDate(uint8_t dayOfWeek, uint8_t date, uint8_t month, uint8_t year) {
     8ae:	0f 93       	push	r16
     8b0:	1f 93       	push	r17
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
     8b6:	08 2f       	mov	r16, r24
     8b8:	16 2f       	mov	r17, r22
     8ba:	d4 2f       	mov	r29, r20
     8bc:	c2 2f       	mov	r28, r18
    I2C_start();
     8be:	0e 94 90 05 	call	0xb20	; 0xb20 <I2C_start>
    I2C_write_address(DS3231_ADDRESS << 1);   // Write mode
     8c2:	80 ed       	ldi	r24, 0xD0	; 208
     8c4:	0e 94 9c 05 	call	0xb38	; 0xb38 <I2C_write_address>
    I2C_write_data(0x03);                     // Start at Day of Week register
     8c8:	83 e0       	ldi	r24, 0x03	; 3
     8ca:	0e 94 a3 05 	call	0xb46	; 0xb46 <I2C_write_data>
    I2C_write_data(DecimalToBCD(dayOfWeek));  // 1 = Sunday
     8ce:	80 2f       	mov	r24, r16
     8d0:	0e 94 e6 03 	call	0x7cc	; 0x7cc <DecimalToBCD>
     8d4:	0e 94 a3 05 	call	0xb46	; 0xb46 <I2C_write_data>
    I2C_write_data(DecimalToBCD(date));
     8d8:	81 2f       	mov	r24, r17
     8da:	0e 94 e6 03 	call	0x7cc	; 0x7cc <DecimalToBCD>
     8de:	0e 94 a3 05 	call	0xb46	; 0xb46 <I2C_write_data>
    I2C_write_data(DecimalToBCD(month));
     8e2:	8d 2f       	mov	r24, r29
     8e4:	0e 94 e6 03 	call	0x7cc	; 0x7cc <DecimalToBCD>
     8e8:	0e 94 a3 05 	call	0xb46	; 0xb46 <I2C_write_data>
    I2C_write_data(DecimalToBCD(year));
     8ec:	8c 2f       	mov	r24, r28
     8ee:	0e 94 e6 03 	call	0x7cc	; 0x7cc <DecimalToBCD>
     8f2:	0e 94 a3 05 	call	0xb46	; 0xb46 <I2C_write_data>
    I2C_stop();
     8f6:	0e 94 aa 05 	call	0xb54	; 0xb54 <I2C_stop>
}
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	1f 91       	pop	r17
     900:	0f 91       	pop	r16
     902:	08 95       	ret

00000904 <RTC_GetDate>:

void RTC_GetDate(uint8_t* dayOfWeek, uint8_t* date, uint8_t* month, uint8_t* year) {
     904:	cf 92       	push	r12
     906:	df 92       	push	r13
     908:	ef 92       	push	r14
     90a:	ff 92       	push	r15
     90c:	0f 93       	push	r16
     90e:	1f 93       	push	r17
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
     914:	6c 01       	movw	r12, r24
     916:	7b 01       	movw	r14, r22
     918:	8a 01       	movw	r16, r20
     91a:	e9 01       	movw	r28, r18
    I2C_start();
     91c:	0e 94 90 05 	call	0xb20	; 0xb20 <I2C_start>
    I2C_write_address(DS3231_ADDRESS << 1);   // Write mode
     920:	80 ed       	ldi	r24, 0xD0	; 208
     922:	0e 94 9c 05 	call	0xb38	; 0xb38 <I2C_write_address>
    I2C_write_data(0x03);                     // Start at Day of Week register
     926:	83 e0       	ldi	r24, 0x03	; 3
     928:	0e 94 a3 05 	call	0xb46	; 0xb46 <I2C_write_data>
    I2C_repeated_start();
     92c:	0e 94 96 05 	call	0xb2c	; 0xb2c <I2C_repeated_start>
    I2C_write_address((DS3231_ADDRESS << 1) | 1);  // Read mode
     930:	81 ed       	ldi	r24, 0xD1	; 209
     932:	0e 94 9c 05 	call	0xb38	; 0xb38 <I2C_write_address>

    *dayOfWeek = BCDToDecimal(I2C_read_with_ACK());
     936:	0e 94 ad 05 	call	0xb5a	; 0xb5a <I2C_read_with_ACK>
     93a:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <BCDToDecimal>
     93e:	f6 01       	movw	r30, r12
     940:	80 83       	st	Z, r24
    *date      = BCDToDecimal(I2C_read_with_ACK());
     942:	0e 94 ad 05 	call	0xb5a	; 0xb5a <I2C_read_with_ACK>
     946:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <BCDToDecimal>
     94a:	f7 01       	movw	r30, r14
     94c:	80 83       	st	Z, r24
    *month     = BCDToDecimal(I2C_read_with_ACK());
     94e:	0e 94 ad 05 	call	0xb5a	; 0xb5a <I2C_read_with_ACK>
     952:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <BCDToDecimal>
     956:	f8 01       	movw	r30, r16
     958:	80 83       	st	Z, r24
    *year      = BCDToDecimal(I2C_read_with_NACK());
     95a:	0e 94 b4 05 	call	0xb68	; 0xb68 <I2C_read_with_NACK>
     95e:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <BCDToDecimal>
     962:	88 83       	st	Y, r24

    I2C_stop();
     964:	0e 94 aa 05 	call	0xb54	; 0xb54 <I2C_stop>
}
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	1f 91       	pop	r17
     96e:	0f 91       	pop	r16
     970:	ff 90       	pop	r15
     972:	ef 90       	pop	r14
     974:	df 90       	pop	r13
     976:	cf 90       	pop	r12
     978:	08 95       	ret

0000097a <RTC_GetDayOfWeek>:

// ---------------------- Extra Utility -------------------------

uint8_t RTC_GetDayOfWeek(void) {
     97a:	cf 93       	push	r28
    uint8_t day;
    I2C_start();
     97c:	0e 94 90 05 	call	0xb20	; 0xb20 <I2C_start>
    I2C_write_address(DS3231_ADDRESS << 1);
     980:	80 ed       	ldi	r24, 0xD0	; 208
     982:	0e 94 9c 05 	call	0xb38	; 0xb38 <I2C_write_address>
    I2C_write_data(0x03);                     // Day of Week register
     986:	83 e0       	ldi	r24, 0x03	; 3
     988:	0e 94 a3 05 	call	0xb46	; 0xb46 <I2C_write_data>
    I2C_repeated_start();
     98c:	0e 94 96 05 	call	0xb2c	; 0xb2c <I2C_repeated_start>
    I2C_write_address((DS3231_ADDRESS << 1) | 1);
     990:	81 ed       	ldi	r24, 0xD1	; 209
     992:	0e 94 9c 05 	call	0xb38	; 0xb38 <I2C_write_address>
    day = BCDToDecimal(I2C_read_with_NACK());
     996:	0e 94 b4 05 	call	0xb68	; 0xb68 <I2C_read_with_NACK>
     99a:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <BCDToDecimal>
     99e:	c8 2f       	mov	r28, r24
    I2C_stop();
     9a0:	0e 94 aa 05 	call	0xb54	; 0xb54 <I2C_stop>
    return day;
}
     9a4:	8c 2f       	mov	r24, r28
     9a6:	cf 91       	pop	r28
     9a8:	08 95       	ret

000009aa <RTC_EnableAlarm1>:
	I2C_write_data(0x80);                         // A1M4 = 1 (ignore day/date)
	I2C_stop();
}


void RTC_EnableAlarm1(void) {
     9aa:	cf 93       	push	r28
	I2C_start();
     9ac:	0e 94 90 05 	call	0xb20	; 0xb20 <I2C_start>
	I2C_write_address(DS3231_ADDRESS << 1);
     9b0:	80 ed       	ldi	r24, 0xD0	; 208
     9b2:	0e 94 9c 05 	call	0xb38	; 0xb38 <I2C_write_address>
	I2C_write_data(0x0E); // Control Register
     9b6:	8e e0       	ldi	r24, 0x0E	; 14
     9b8:	0e 94 a3 05 	call	0xb46	; 0xb46 <I2C_write_data>

	I2C_repeated_start();
     9bc:	0e 94 96 05 	call	0xb2c	; 0xb2c <I2C_repeated_start>
	I2C_write_address((DS3231_ADDRESS << 1) | 1);
     9c0:	81 ed       	ldi	r24, 0xD1	; 209
     9c2:	0e 94 9c 05 	call	0xb38	; 0xb38 <I2C_write_address>
	uint8_t control = I2C_read_with_NACK();
     9c6:	0e 94 b4 05 	call	0xb68	; 0xb68 <I2C_read_with_NACK>
     9ca:	c8 2f       	mov	r28, r24
	I2C_stop();
     9cc:	0e 94 aa 05 	call	0xb54	; 0xb54 <I2C_stop>
     9d0:	cd 7f       	andi	r28, 0xFD	; 253
	// Set INTCN = 1, A1IE = 1, clear A2IE to avoid ?????
	control |= (1 << 2);   // INTCN
	control |= (1 << 0);   // A1IE
	control &= ~(1 << 1);  // A2IE = 0

	I2C_start();
     9d2:	0e 94 90 05 	call	0xb20	; 0xb20 <I2C_start>
	I2C_write_address(DS3231_ADDRESS << 1);
     9d6:	80 ed       	ldi	r24, 0xD0	; 208
     9d8:	0e 94 9c 05 	call	0xb38	; 0xb38 <I2C_write_address>
	I2C_write_data(0x0E);
     9dc:	8e e0       	ldi	r24, 0x0E	; 14
     9de:	0e 94 a3 05 	call	0xb46	; 0xb46 <I2C_write_data>
	I2C_write_data(control);
     9e2:	8c 2f       	mov	r24, r28
     9e4:	85 60       	ori	r24, 0x05	; 5
     9e6:	0e 94 a3 05 	call	0xb46	; 0xb46 <I2C_write_data>
	I2C_stop();
     9ea:	0e 94 aa 05 	call	0xb54	; 0xb54 <I2C_stop>
}
     9ee:	cf 91       	pop	r28
     9f0:	08 95       	ret

000009f2 <RTC_ClearAlarm1Flag>:


void RTC_ClearAlarm1Flag(void) {
     9f2:	cf 93       	push	r28
	I2C_start();
     9f4:	0e 94 90 05 	call	0xb20	; 0xb20 <I2C_start>
	I2C_write_address(DS3231_ADDRESS << 1);
     9f8:	80 ed       	ldi	r24, 0xD0	; 208
     9fa:	0e 94 9c 05 	call	0xb38	; 0xb38 <I2C_write_address>
	I2C_write_data(0x0F); // Status Register
     9fe:	8f e0       	ldi	r24, 0x0F	; 15
     a00:	0e 94 a3 05 	call	0xb46	; 0xb46 <I2C_write_data>

	I2C_repeated_start();
     a04:	0e 94 96 05 	call	0xb2c	; 0xb2c <I2C_repeated_start>
	I2C_write_address((DS3231_ADDRESS << 1) | 1);
     a08:	81 ed       	ldi	r24, 0xD1	; 209
     a0a:	0e 94 9c 05 	call	0xb38	; 0xb38 <I2C_write_address>
	uint8_t status = I2C_read_with_NACK();
     a0e:	0e 94 b4 05 	call	0xb68	; 0xb68 <I2C_read_with_NACK>
     a12:	c8 2f       	mov	r28, r24
	I2C_stop();
     a14:	0e 94 aa 05 	call	0xb54	; 0xb54 <I2C_stop>

	status &= ~(1 << 0); // Clear A1F

	I2C_start();
     a18:	0e 94 90 05 	call	0xb20	; 0xb20 <I2C_start>
	I2C_write_address(DS3231_ADDRESS << 1);
     a1c:	80 ed       	ldi	r24, 0xD0	; 208
     a1e:	0e 94 9c 05 	call	0xb38	; 0xb38 <I2C_write_address>
	I2C_write_data(0x0F);
     a22:	8f e0       	ldi	r24, 0x0F	; 15
     a24:	0e 94 a3 05 	call	0xb46	; 0xb46 <I2C_write_data>
	I2C_write_data(status);
     a28:	8c 2f       	mov	r24, r28
     a2a:	8e 7f       	andi	r24, 0xFE	; 254
     a2c:	0e 94 a3 05 	call	0xb46	; 0xb46 <I2C_write_data>
	I2C_stop();
     a30:	0e 94 aa 05 	call	0xb54	; 0xb54 <I2C_stop>
}
     a34:	cf 91       	pop	r28
     a36:	08 95       	ret

00000a38 <RTC_SetAlarm1>:
    I2C_stop();
    return day;
}
// ---------------------- Alarm Functions -------------------------

void RTC_SetAlarm1(uint8_t hours, uint8_t minutes) {
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	c8 2f       	mov	r28, r24
     a3e:	d6 2f       	mov	r29, r22
	RTC_ClearAlarm1Flag();  // ??? ???? ??? ???????
     a40:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <RTC_ClearAlarm1Flag>

	I2C_start();
     a44:	0e 94 90 05 	call	0xb20	; 0xb20 <I2C_start>
	I2C_write_address(DS3231_ADDRESS << 1); // Write mode
     a48:	80 ed       	ldi	r24, 0xD0	; 208
     a4a:	0e 94 9c 05 	call	0xb38	; 0xb38 <I2C_write_address>
	I2C_write_data(0x07); // Alarm1 register start
     a4e:	87 e0       	ldi	r24, 0x07	; 7
     a50:	0e 94 a3 05 	call	0xb46	; 0xb46 <I2C_write_data>

	I2C_write_data(0x00);                         // Seconds = 0, A1M1 = 0 (match seconds = 0)
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	0e 94 a3 05 	call	0xb46	; 0xb46 <I2C_write_data>
	I2C_write_data(DecimalToBCD(minutes) & 0x7F); // A1M2 = 0 (match minutes)
     a5a:	8d 2f       	mov	r24, r29
     a5c:	0e 94 e6 03 	call	0x7cc	; 0x7cc <DecimalToBCD>
     a60:	8f 77       	andi	r24, 0x7F	; 127
     a62:	0e 94 a3 05 	call	0xb46	; 0xb46 <I2C_write_data>
	I2C_write_data(DecimalToBCD(hours) & 0x7F);   // A1M3 = 0 (match hours)
     a66:	8c 2f       	mov	r24, r28
     a68:	0e 94 e6 03 	call	0x7cc	; 0x7cc <DecimalToBCD>
     a6c:	8f 77       	andi	r24, 0x7F	; 127
     a6e:	0e 94 a3 05 	call	0xb46	; 0xb46 <I2C_write_data>
	I2C_write_data(0x80);                         // A1M4 = 1 (ignore day/date)
     a72:	80 e8       	ldi	r24, 0x80	; 128
     a74:	0e 94 a3 05 	call	0xb46	; 0xb46 <I2C_write_data>
	I2C_stop();
     a78:	0e 94 aa 05 	call	0xb54	; 0xb54 <I2C_stop>
}
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	08 95       	ret

00000a82 <DS3231_GetTemperature>:
	I2C_write_address(DS3231_ADDRESS << 1);
	I2C_write_data(0x0F);
	I2C_write_data(status);
	I2C_stop();
}
int8_t DS3231_GetTemperature(void) {
     a82:	cf 93       	push	r28
	uint8_t temp_msb, temp_lsb;
	I2C_start();
     a84:	0e 94 90 05 	call	0xb20	; 0xb20 <I2C_start>
	I2C_write_address(0xD0); // Address with write bit
     a88:	80 ed       	ldi	r24, 0xD0	; 208
     a8a:	0e 94 9c 05 	call	0xb38	; 0xb38 <I2C_write_address>
	I2C_write_data(0x11);    // Temp MSB register address
     a8e:	81 e1       	ldi	r24, 0x11	; 17
     a90:	0e 94 a3 05 	call	0xb46	; 0xb46 <I2C_write_data>
	I2C_start();             // Repeated start
     a94:	0e 94 90 05 	call	0xb20	; 0xb20 <I2C_start>
	I2C_write_address(0xD1); // Address with read bit
     a98:	81 ed       	ldi	r24, 0xD1	; 209
     a9a:	0e 94 9c 05 	call	0xb38	; 0xb38 <I2C_write_address>
	temp_msb = I2C_read_with_ACK();
     a9e:	0e 94 ad 05 	call	0xb5a	; 0xb5a <I2C_read_with_ACK>
     aa2:	c8 2f       	mov	r28, r24
	temp_lsb = I2C_read_with_NACK(); // Not using fraction
     aa4:	0e 94 b4 05 	call	0xb68	; 0xb68 <I2C_read_with_NACK>
	I2C_stop();
     aa8:	0e 94 aa 05 	call	0xb54	; 0xb54 <I2C_stop>
	return (int8_t)temp_msb;
}
     aac:	8c 2f       	mov	r24, r28
     aae:	cf 91       	pop	r28
     ab0:	08 95       	ret

00000ab2 <RTC_DisableAlarm1>:

void RTC_DisableAlarm1(void) {
     ab2:	cf 93       	push	r28
	uint8_t control;

	// Start I2C and point to the Control Register (0x0E)
	I2C_start();
     ab4:	0e 94 90 05 	call	0xb20	; 0xb20 <I2C_start>
	I2C_write_address(DS3231_ADDRESS << 1); // Write mode
     ab8:	80 ed       	ldi	r24, 0xD0	; 208
     aba:	0e 94 9c 05 	call	0xb38	; 0xb38 <I2C_write_address>
	I2C_write_data(0x0E);                   // Address of Control Register
     abe:	8e e0       	ldi	r24, 0x0E	; 14
     ac0:	0e 94 a3 05 	call	0xb46	; 0xb46 <I2C_write_data>

	// Read the current value of the Control Register
	I2C_repeated_start();
     ac4:	0e 94 96 05 	call	0xb2c	; 0xb2c <I2C_repeated_start>
	I2C_write_address((DS3231_ADDRESS << 1) | 1); // Read mode
     ac8:	81 ed       	ldi	r24, 0xD1	; 209
     aca:	0e 94 9c 05 	call	0xb38	; 0xb38 <I2C_write_address>
	control = I2C_read_with_NACK();
     ace:	0e 94 b4 05 	call	0xb68	; 0xb68 <I2C_read_with_NACK>
     ad2:	c8 2f       	mov	r28, r24
	I2C_stop();
     ad4:	0e 94 aa 05 	call	0xb54	; 0xb54 <I2C_stop>

	// Clear the A1IE bit (bit 0) to disable the interrupt
	control &= ~(1 << 0); // A1IE = 0

	// Write the new value back to the Control Register
	I2C_start();
     ad8:	0e 94 90 05 	call	0xb20	; 0xb20 <I2C_start>
	I2C_write_address(DS3231_ADDRESS << 1); // Write mode
     adc:	80 ed       	ldi	r24, 0xD0	; 208
     ade:	0e 94 9c 05 	call	0xb38	; 0xb38 <I2C_write_address>
	I2C_write_data(0x0E);                   // Address of Control Register
     ae2:	8e e0       	ldi	r24, 0x0E	; 14
     ae4:	0e 94 a3 05 	call	0xb46	; 0xb46 <I2C_write_data>
	I2C_write_data(control);                // Write the modified control byte
     ae8:	8c 2f       	mov	r24, r28
     aea:	8e 7f       	andi	r24, 0xFE	; 254
     aec:	0e 94 a3 05 	call	0xb46	; 0xb46 <I2C_write_data>
	I2C_stop();
     af0:	0e 94 aa 05 	call	0xb54	; 0xb54 <I2C_stop>
     af4:	cf 91       	pop	r28
     af6:	08 95       	ret

00000af8 <I2C_Master_init>:
#include <avr/io.h>
#include "I2C.h"
#define F_CPU 8000000UL
#include <util/delay.h>

void I2C_Master_init(unsigned long SCL_Clock) {
     af8:	9b 01       	movw	r18, r22
     afa:	ac 01       	movw	r20, r24
    TWBR = (unsigned char) (((F_CPU / SCL_Clock) - 16) / (2 * 1));  // Assuming prescaler = 1
     afc:	60 e0       	ldi	r22, 0x00	; 0
     afe:	72 e1       	ldi	r23, 0x12	; 18
     b00:	8a e7       	ldi	r24, 0x7A	; 122
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	0e 94 00 17 	call	0x2e00	; 0x2e00 <__udivmodsi4>
     b08:	da 01       	movw	r26, r20
     b0a:	c9 01       	movw	r24, r18
     b0c:	40 97       	sbiw	r24, 0x10	; 16
     b0e:	a1 09       	sbc	r26, r1
     b10:	b1 09       	sbc	r27, r1
     b12:	b6 95       	lsr	r27
     b14:	a7 95       	ror	r26
     b16:	97 95       	ror	r25
     b18:	87 95       	ror	r24
     b1a:	80 b9       	out	0x00, r24	; 0
    TWSR = 0;  // Set prescaler bits to 0 for no prescaling
     b1c:	11 b8       	out	0x01, r1	; 1
     b1e:	08 95       	ret

00000b20 <I2C_start>:
}

void I2C_start(void) {
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     b20:	84 ea       	ldi	r24, 0xA4	; 164
     b22:	86 bf       	out	0x36, r24	; 54
    while (!(TWCR & (1 << TWINT))); // Wait for transmission to complete
     b24:	06 b6       	in	r0, 0x36	; 54
     b26:	07 fe       	sbrs	r0, 7
     b28:	fd cf       	rjmp	.-6      	; 0xb24 <I2C_start+0x4>
}
     b2a:	08 95       	ret

00000b2c <I2C_repeated_start>:

void I2C_repeated_start(void) {
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     b2c:	84 ea       	ldi	r24, 0xA4	; 164
     b2e:	86 bf       	out	0x36, r24	; 54
    while (!(TWCR & (1 << TWINT))); // Wait for transmission to complete
     b30:	06 b6       	in	r0, 0x36	; 54
     b32:	07 fe       	sbrs	r0, 7
     b34:	fd cf       	rjmp	.-6      	; 0xb30 <I2C_repeated_start+0x4>
}
     b36:	08 95       	ret

00000b38 <I2C_write_address>:

void I2C_write_address(unsigned char address) {
    TWDR = address;
     b38:	83 b9       	out	0x03, r24	; 3
    TWCR = (1 << TWINT) | (1 << TWEN);
     b3a:	84 e8       	ldi	r24, 0x84	; 132
     b3c:	86 bf       	out	0x36, r24	; 54
    while (!(TWCR & (1 << TWINT))); // Wait for transmission to complete
     b3e:	06 b6       	in	r0, 0x36	; 54
     b40:	07 fe       	sbrs	r0, 7
     b42:	fd cf       	rjmp	.-6      	; 0xb3e <I2C_write_address+0x6>
}
     b44:	08 95       	ret

00000b46 <I2C_write_data>:

void I2C_write_data(unsigned char data) {
    TWDR = data;
     b46:	83 b9       	out	0x03, r24	; 3
    TWCR = (1 << TWINT) | (1 << TWEN);
     b48:	84 e8       	ldi	r24, 0x84	; 132
     b4a:	86 bf       	out	0x36, r24	; 54
    while (!(TWCR & (1 << TWINT))); // Wait for transmission to complete
     b4c:	06 b6       	in	r0, 0x36	; 54
     b4e:	07 fe       	sbrs	r0, 7
     b50:	fd cf       	rjmp	.-6      	; 0xb4c <I2C_write_data+0x6>
}
     b52:	08 95       	ret

00000b54 <I2C_stop>:

void I2C_stop(void) {
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     b54:	84 e9       	ldi	r24, 0x94	; 148
     b56:	86 bf       	out	0x36, r24	; 54
     b58:	08 95       	ret

00000b5a <I2C_read_with_ACK>:
}

unsigned char I2C_read_with_ACK(void) {
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA); // Enable ACK
     b5a:	84 ec       	ldi	r24, 0xC4	; 196
     b5c:	86 bf       	out	0x36, r24	; 54
    while (!(TWCR & (1 << TWINT))); // Wait for reception to complete
     b5e:	06 b6       	in	r0, 0x36	; 54
     b60:	07 fe       	sbrs	r0, 7
     b62:	fd cf       	rjmp	.-6      	; 0xb5e <I2C_read_with_ACK+0x4>
    return TWDR;
     b64:	83 b1       	in	r24, 0x03	; 3
}
     b66:	08 95       	ret

00000b68 <I2C_read_with_NACK>:

unsigned char I2C_read_with_NACK(void) {
    TWCR = (1 << TWINT) | (1 << TWEN); // No ACK
     b68:	84 e8       	ldi	r24, 0x84	; 132
     b6a:	86 bf       	out	0x36, r24	; 54
    while (!(TWCR & (1 << TWINT))); // Wait for reception to complete
     b6c:	06 b6       	in	r0, 0x36	; 54
     b6e:	07 fe       	sbrs	r0, 7
     b70:	fd cf       	rjmp	.-6      	; 0xb6c <I2C_read_with_NACK+0x4>
    return TWDR;
     b72:	83 b1       	in	r24, 0x03	; 3
}
     b74:	08 95       	ret

00000b76 <timer0_init_ctc_mode>:
int Temp;
volatile uint8_t is_dst_active = 1;        // 0 for standard time, 1 for DST


void timer0_init_ctc_mode(void) {
	TCCR0 = (1 << WGM01);
     b76:	88 e0       	ldi	r24, 0x08	; 8
     b78:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << CS01) | (1 << CS00);
     b7a:	83 b7       	in	r24, 0x33	; 51
     b7c:	83 60       	ori	r24, 0x03	; 3
     b7e:	83 bf       	out	0x33, r24	; 51
	OCR0 = 124;
     b80:	8c e7       	ldi	r24, 0x7C	; 124
     b82:	8c bf       	out	0x3c, r24	; 60
	TIMSK |= (1 << OCIE0);
     b84:	89 b7       	in	r24, 0x39	; 57
     b86:	82 60       	ori	r24, 0x02	; 2
     b88:	89 bf       	out	0x39, r24	; 57
     b8a:	08 95       	ret

00000b8c <play_feedback_tone>:
	DIO_write('D', 5, 0);       // Ensure buzzer is off
	play_feedback_tone();       // Now play tone (even if alarm was on)
}

void play_feedback_tone(void) {
	cli();
     b8c:	f8 94       	cli
	buzzer_on = 1;
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <buzzer_on>
	buzzer_on_time = 60; // 60 ms beep
     b94:	8c e3       	ldi	r24, 0x3C	; 60
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <buzzer_on_time+0x1>
     b9c:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <buzzer_on_time>
	buzzer_off_time = 0;
     ba0:	10 92 e4 00 	sts	0x00E4, r1	; 0x8000e4 <buzzer_off_time+0x1>
     ba4:	10 92 e3 00 	sts	0x00E3, r1	; 0x8000e3 <buzzer_off_time>
	DIO_write('D', 5, 1);
     ba8:	41 e0       	ldi	r20, 0x01	; 1
     baa:	65 e0       	ldi	r22, 0x05	; 5
     bac:	84 e4       	ldi	r24, 0x44	; 68
     bae:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DIO_write>
	sei();
     bb2:	78 94       	sei
     bb4:	08 95       	ret

00000bb6 <stop_alarm_and_feedback>:
	TIMSK |= (1 << OCIE0);
}


void stop_alarm_and_feedback(void) {
	is_alarm_sounding = 0;
     bb6:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <is_alarm_sounding>
	buzzer_on = 0;
     bba:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <buzzer_on>
	buzzer_on_time = 0;
     bbe:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <buzzer_on_time+0x1>
     bc2:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <buzzer_on_time>
	buzzer_off_time = 0;
     bc6:	10 92 e4 00 	sts	0x00E4, r1	; 0x8000e4 <buzzer_off_time+0x1>
     bca:	10 92 e3 00 	sts	0x00E3, r1	; 0x8000e3 <buzzer_off_time>
	alarm_beep_count = 0;
     bce:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <alarm_beep_count>
	DIO_write('D', 5, 0);       // Ensure buzzer is off
     bd2:	40 e0       	ldi	r20, 0x00	; 0
     bd4:	65 e0       	ldi	r22, 0x05	; 5
     bd6:	84 e4       	ldi	r24, 0x44	; 68
     bd8:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DIO_write>
	play_feedback_tone();       // Now play tone (even if alarm was on)
     bdc:	0e 94 c6 05 	call	0xb8c	; 0xb8c <play_feedback_tone>
     be0:	08 95       	ret

00000be2 <play_alarm_tone>:
	sei();
}


void play_alarm_tone(void) {
	if (!is_alarm_sounding) return;
     be2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <is_alarm_sounding>
     be6:	88 23       	and	r24, r24
     be8:	79 f1       	breq	.+94     	; 0xc48 <play_alarm_tone+0x66>

	cli();
     bea:	f8 94       	cli
	if (alarm_beep_count < 5) {
     bec:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <alarm_beep_count>
     bf0:	85 30       	cpi	r24, 0x05	; 5
     bf2:	a8 f4       	brcc	.+42     	; 0xc1e <play_alarm_tone+0x3c>
		buzzer_on = 1;
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <buzzer_on>
		buzzer_on_time = 60;
     bfa:	8c e3       	ldi	r24, 0x3C	; 60
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <buzzer_on_time+0x1>
     c02:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <buzzer_on_time>
		buzzer_off_time = 40;
     c06:	88 e2       	ldi	r24, 0x28	; 40
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <buzzer_off_time+0x1>
     c0e:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <buzzer_off_time>
		alarm_beep_count++;
     c12:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <alarm_beep_count>
     c16:	8f 5f       	subi	r24, 0xFF	; 255
     c18:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <alarm_beep_count>
     c1c:	0e c0       	rjmp	.+28     	; 0xc3a <play_alarm_tone+0x58>
		} else {
		buzzer_on = 0;
     c1e:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <buzzer_on>
		buzzer_on_time = 0;
     c22:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <buzzer_on_time+0x1>
     c26:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <buzzer_on_time>
		buzzer_off_time = 1000;
     c2a:	88 ee       	ldi	r24, 0xE8	; 232
     c2c:	93 e0       	ldi	r25, 0x03	; 3
     c2e:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <buzzer_off_time+0x1>
     c32:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <buzzer_off_time>
		alarm_beep_count = 0;
     c36:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <alarm_beep_count>
	}
	DIO_write('D', 5, buzzer_on);
     c3a:	40 91 e7 00 	lds	r20, 0x00E7	; 0x8000e7 <buzzer_on>
     c3e:	65 e0       	ldi	r22, 0x05	; 5
     c40:	84 e4       	ldi	r24, 0x44	; 68
     c42:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DIO_write>
	sei();
     c46:	78 94       	sei
     c48:	08 95       	ret

00000c4a <update_date_display>:
}


void update_date_display(void) {
     c4a:	cf 92       	push	r12
     c4c:	df 92       	push	r13
     c4e:	ef 92       	push	r14
     c50:	ff 92       	push	r15
     c52:	0f 93       	push	r16
     c54:	1f 93       	push	r17
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	00 d0       	rcall	.+0      	; 0xc5c <update_date_display+0x12>
     c5c:	00 d0       	rcall	.+0      	; 0xc5e <update_date_display+0x14>
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
	uint8_t d, m;
	uint16_t full_year;

	if (hijri_toggle == 0) {
     c62:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <hijri_toggle>
     c66:	81 11       	cpse	r24, r1
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <update_date_display+0x34>
		d = day;
     c6a:	70 91 d6 00 	lds	r23, 0x00D6	; 0x8000d6 <day>
		m = month;
     c6e:	60 91 d5 00 	lds	r22, 0x00D5	; 0x8000d5 <month>
		full_year = 2000 + year;
     c72:	40 91 d4 00 	lds	r20, 0x00D4	; 0x8000d4 <year>
     c76:	50 e0       	ldi	r21, 0x00	; 0
     c78:	40 53       	subi	r20, 0x30	; 48
     c7a:	58 4f       	sbci	r21, 0xF8	; 248
     c7c:	1b c0       	rjmp	.+54     	; 0xcb4 <update_date_display+0x6a>
		} else {
		uint8_t d_hijri, m_hijri;
		uint16_t y_hijri;
		
		convertToHijriWithOffset(2000 + year, month, day, hijri_day_offset_new,
     c7e:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <year>
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	9e 01       	movw	r18, r28
     c86:	2f 5f       	subi	r18, 0xFF	; 255
     c88:	3f 4f       	sbci	r19, 0xFF	; 255
     c8a:	69 01       	movw	r12, r18
     c8c:	2e 5f       	subi	r18, 0xFE	; 254
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	79 01       	movw	r14, r18
     c92:	8e 01       	movw	r16, r28
     c94:	0c 5f       	subi	r16, 0xFC	; 252
     c96:	1f 4f       	sbci	r17, 0xFF	; 255
     c98:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <hijri_day_offset_new>
     c9c:	40 91 d6 00 	lds	r20, 0x00D6	; 0x8000d6 <day>
     ca0:	60 91 d5 00 	lds	r22, 0x00D5	; 0x8000d5 <month>
     ca4:	80 53       	subi	r24, 0x30	; 48
     ca6:	98 4f       	sbci	r25, 0xF8	; 248
     ca8:	0e 94 3a 02 	call	0x474	; 0x474 <convertToHijriWithOffset>
		&d_hijri, &m_hijri, &y_hijri);

		d = d_hijri;
     cac:	7c 81       	ldd	r23, Y+4	; 0x04
		m = m_hijri;
     cae:	6b 81       	ldd	r22, Y+3	; 0x03
		full_year = y_hijri;
     cb0:	49 81       	ldd	r20, Y+1	; 0x01
     cb2:	5a 81       	ldd	r21, Y+2	; 0x02
	}

	digit_values[8]  = d % 10;
     cb4:	8d ec       	ldi	r24, 0xCD	; 205
     cb6:	78 9f       	mul	r23, r24
     cb8:	21 2d       	mov	r18, r1
     cba:	11 24       	eor	r1, r1
     cbc:	92 2f       	mov	r25, r18
     cbe:	96 95       	lsr	r25
     cc0:	96 95       	lsr	r25
     cc2:	96 95       	lsr	r25
     cc4:	99 0f       	add	r25, r25
     cc6:	39 2f       	mov	r19, r25
     cc8:	33 0f       	add	r19, r19
     cca:	33 0f       	add	r19, r19
     ccc:	93 0f       	add	r25, r19
     cce:	79 1b       	sub	r23, r25
     cd0:	ed ee       	ldi	r30, 0xED	; 237
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	70 87       	std	Z+8, r23	; 0x08
	digit_values[9]  = d / 10;
     cd6:	26 95       	lsr	r18
     cd8:	26 95       	lsr	r18
     cda:	26 95       	lsr	r18
     cdc:	21 87       	std	Z+9, r18	; 0x09
	digit_values[10] = m % 10;
     cde:	68 9f       	mul	r22, r24
     ce0:	81 2d       	mov	r24, r1
     ce2:	11 24       	eor	r1, r1
     ce4:	98 2f       	mov	r25, r24
     ce6:	96 95       	lsr	r25
     ce8:	96 95       	lsr	r25
     cea:	96 95       	lsr	r25
     cec:	99 0f       	add	r25, r25
     cee:	29 2f       	mov	r18, r25
     cf0:	22 0f       	add	r18, r18
     cf2:	22 0f       	add	r18, r18
     cf4:	92 0f       	add	r25, r18
     cf6:	69 1b       	sub	r22, r25
     cf8:	62 87       	std	Z+10, r22	; 0x0a
	digit_values[11] = m / 10;
     cfa:	86 95       	lsr	r24
     cfc:	86 95       	lsr	r24
     cfe:	86 95       	lsr	r24
     d00:	83 87       	std	Z+11, r24	; 0x0b
	digit_values[12] = full_year % 10;
     d02:	9a 01       	movw	r18, r20
     d04:	ad ec       	ldi	r26, 0xCD	; 205
     d06:	bc ec       	ldi	r27, 0xCC	; 204
     d08:	0e 94 41 17 	call	0x2e82	; 0x2e82 <__umulhisi3>
     d0c:	8c 01       	movw	r16, r24
     d0e:	16 95       	lsr	r17
     d10:	07 95       	ror	r16
     d12:	16 95       	lsr	r17
     d14:	07 95       	ror	r16
     d16:	16 95       	lsr	r17
     d18:	07 95       	ror	r16
     d1a:	98 01       	movw	r18, r16
     d1c:	22 0f       	add	r18, r18
     d1e:	33 1f       	adc	r19, r19
     d20:	c8 01       	movw	r24, r16
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	88 0f       	add	r24, r24
     d2c:	99 1f       	adc	r25, r25
     d2e:	82 0f       	add	r24, r18
     d30:	93 1f       	adc	r25, r19
     d32:	9a 01       	movw	r18, r20
     d34:	28 1b       	sub	r18, r24
     d36:	39 0b       	sbc	r19, r25
     d38:	24 87       	std	Z+12, r18	; 0x0c
	digit_values[13] = (full_year / 10) % 10;
     d3a:	98 01       	movw	r18, r16
     d3c:	0e 94 41 17 	call	0x2e82	; 0x2e82 <__umulhisi3>
     d40:	96 95       	lsr	r25
     d42:	87 95       	ror	r24
     d44:	96 95       	lsr	r25
     d46:	87 95       	ror	r24
     d48:	96 95       	lsr	r25
     d4a:	87 95       	ror	r24
     d4c:	9c 01       	movw	r18, r24
     d4e:	22 0f       	add	r18, r18
     d50:	33 1f       	adc	r19, r19
     d52:	88 0f       	add	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	88 0f       	add	r24, r24
     d58:	99 1f       	adc	r25, r25
     d5a:	88 0f       	add	r24, r24
     d5c:	99 1f       	adc	r25, r25
     d5e:	82 0f       	add	r24, r18
     d60:	93 1f       	adc	r25, r19
     d62:	08 1b       	sub	r16, r24
     d64:	19 0b       	sbc	r17, r25
     d66:	05 87       	std	Z+13, r16	; 0x0d
	digit_values[14] = (full_year / 100) % 10;
     d68:	9a 01       	movw	r18, r20
     d6a:	36 95       	lsr	r19
     d6c:	27 95       	ror	r18
     d6e:	36 95       	lsr	r19
     d70:	27 95       	ror	r18
     d72:	ab e7       	ldi	r26, 0x7B	; 123
     d74:	b4 e1       	ldi	r27, 0x14	; 20
     d76:	0e 94 41 17 	call	0x2e82	; 0x2e82 <__umulhisi3>
     d7a:	8c 01       	movw	r16, r24
     d7c:	16 95       	lsr	r17
     d7e:	07 95       	ror	r16
     d80:	98 01       	movw	r18, r16
     d82:	ad ec       	ldi	r26, 0xCD	; 205
     d84:	bc ec       	ldi	r27, 0xCC	; 204
     d86:	0e 94 41 17 	call	0x2e82	; 0x2e82 <__umulhisi3>
     d8a:	96 95       	lsr	r25
     d8c:	87 95       	ror	r24
     d8e:	96 95       	lsr	r25
     d90:	87 95       	ror	r24
     d92:	96 95       	lsr	r25
     d94:	87 95       	ror	r24
     d96:	9c 01       	movw	r18, r24
     d98:	22 0f       	add	r18, r18
     d9a:	33 1f       	adc	r19, r19
     d9c:	88 0f       	add	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	88 0f       	add	r24, r24
     da2:	99 1f       	adc	r25, r25
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	82 0f       	add	r24, r18
     daa:	93 1f       	adc	r25, r19
     dac:	08 1b       	sub	r16, r24
     dae:	19 0b       	sbc	r17, r25
     db0:	06 87       	std	Z+14, r16	; 0x0e
	digit_values[15] = (full_year / 1000) % 10;
     db2:	9a 01       	movw	r18, r20
     db4:	36 95       	lsr	r19
     db6:	27 95       	ror	r18
     db8:	36 95       	lsr	r19
     dba:	27 95       	ror	r18
     dbc:	36 95       	lsr	r19
     dbe:	27 95       	ror	r18
     dc0:	a5 ec       	ldi	r26, 0xC5	; 197
     dc2:	b0 e2       	ldi	r27, 0x20	; 32
     dc4:	0e 94 41 17 	call	0x2e82	; 0x2e82 <__umulhisi3>
     dc8:	ac 01       	movw	r20, r24
     dca:	52 95       	swap	r21
     dcc:	42 95       	swap	r20
     dce:	4f 70       	andi	r20, 0x0F	; 15
     dd0:	45 27       	eor	r20, r21
     dd2:	5f 70       	andi	r21, 0x0F	; 15
     dd4:	45 27       	eor	r20, r21
     dd6:	9a 01       	movw	r18, r20
     dd8:	ad ec       	ldi	r26, 0xCD	; 205
     dda:	bc ec       	ldi	r27, 0xCC	; 204
     ddc:	0e 94 41 17 	call	0x2e82	; 0x2e82 <__umulhisi3>
     de0:	96 95       	lsr	r25
     de2:	87 95       	ror	r24
     de4:	96 95       	lsr	r25
     de6:	87 95       	ror	r24
     de8:	96 95       	lsr	r25
     dea:	87 95       	ror	r24
     dec:	9c 01       	movw	r18, r24
     dee:	22 0f       	add	r18, r18
     df0:	33 1f       	adc	r19, r19
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	88 0f       	add	r24, r24
     df8:	99 1f       	adc	r25, r25
     dfa:	88 0f       	add	r24, r24
     dfc:	99 1f       	adc	r25, r25
     dfe:	82 0f       	add	r24, r18
     e00:	93 1f       	adc	r25, r19
     e02:	48 1b       	sub	r20, r24
     e04:	59 0b       	sbc	r21, r25
     e06:	47 87       	std	Z+15, r20	; 0x0f
}
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	0f 90       	pop	r0
     e10:	df 91       	pop	r29
     e12:	cf 91       	pop	r28
     e14:	1f 91       	pop	r17
     e16:	0f 91       	pop	r16
     e18:	ff 90       	pop	r15
     e1a:	ef 90       	pop	r14
     e1c:	df 90       	pop	r13
     e1e:	cf 90       	pop	r12
     e20:	08 95       	ret

00000e22 <update_prayer_and_day_leds>:
	update_prayer_and_day_leds();
	update_date_display();
}

void update_prayer_and_day_leds(void) {
	uint8_t dow = (RTC_GetDayOfWeek() + 6) % 7;
     e22:	0e 94 bd 04 	call	0x97a	; 0x97a <RTC_GetDayOfWeek>
	uint16_t combined = ((uint16_t)day_leds_data[dow] << 8) | prayer_leds_data[current_prayer];
     e26:	e0 91 dc 00 	lds	r30, 0x00DC	; 0x8000dc <current_prayer>
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	06 96       	adiw	r24, 0x06	; 6
     e2e:	67 e0       	ldi	r22, 0x07	; 7
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <__divmodhi4>
     e36:	dc 01       	movw	r26, r24
     e38:	bb 27       	eor	r27, r27
     e3a:	a0 54       	subi	r26, 0x40	; 64
     e3c:	bf 4f       	sbci	r27, 0xFF	; 255
     e3e:	8c 91       	ld	r24, X
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	98 2f       	mov	r25, r24
     e44:	88 27       	eor	r24, r24
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	e9 53       	subi	r30, 0x39	; 57
     e4a:	ff 4f       	sbci	r31, 0xFF	; 255
     e4c:	20 81       	ld	r18, Z
     e4e:	82 2b       	or	r24, r18
	if (hijri_toggle == 0) combined |= (1 << 6);
     e50:	20 91 cf 00 	lds	r18, 0x00CF	; 0x8000cf <hijri_toggle>
     e54:	21 11       	cpse	r18, r1
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <update_prayer_and_day_leds+0x3a>
     e58:	80 64       	ori	r24, 0x40	; 64
     e5a:	01 c0       	rjmp	.+2      	; 0xe5e <update_prayer_and_day_leds+0x3c>
	else combined |= (1 << 5);
     e5c:	80 62       	ori	r24, 0x20	; 32
	shift_register_send_16bit(combined);
     e5e:	0e 94 94 11 	call	0x2328	; 0x2328 <shift_register_send_16bit>
     e62:	08 95       	ret

00000e64 <update_display_array>:
	digit_values[15] = (full_year / 1000) % 10;
}

void update_display_array(void) {
	// --- Time Display Conversion (24h to 12h) ---
	uint8_t display_hours = hours;
     e64:	20 91 da 00 	lds	r18, 0x00DA	; 0x8000da <hours>

	// Convert current time to 12-hour format for display
	if (display_hours >= 12) {
     e68:	2c 30       	cpi	r18, 0x0C	; 12
     e6a:	20 f0       	brcs	.+8      	; 0xe74 <update_display_array+0x10>
		if (display_hours > 12) {
     e6c:	2d 30       	cpi	r18, 0x0D	; 13
     e6e:	28 f0       	brcs	.+10     	; 0xe7a <update_display_array+0x16>
			display_hours -= 12;
     e70:	2c 50       	subi	r18, 0x0C	; 12
     e72:	03 c0       	rjmp	.+6      	; 0xe7a <update_display_array+0x16>
		}
		} else if (display_hours == 0) { // Midnight case
     e74:	21 11       	cpse	r18, r1
     e76:	01 c0       	rjmp	.+2      	; 0xe7a <update_display_array+0x16>
		display_hours = 12;
     e78:	2c e0       	ldi	r18, 0x0C	; 12
	}

	// Update time digits with 12-hour format
	digit_values[0] = minutes % 10;
     e7a:	50 91 d9 00 	lds	r21, 0x00D9	; 0x8000d9 <minutes>
     e7e:	8d ec       	ldi	r24, 0xCD	; 205
     e80:	58 9f       	mul	r21, r24
     e82:	31 2d       	mov	r19, r1
     e84:	11 24       	eor	r1, r1
     e86:	93 2f       	mov	r25, r19
     e88:	96 95       	lsr	r25
     e8a:	96 95       	lsr	r25
     e8c:	96 95       	lsr	r25
     e8e:	99 0f       	add	r25, r25
     e90:	49 2f       	mov	r20, r25
     e92:	44 0f       	add	r20, r20
     e94:	44 0f       	add	r20, r20
     e96:	94 0f       	add	r25, r20
     e98:	59 1b       	sub	r21, r25
     e9a:	ed ee       	ldi	r30, 0xED	; 237
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	50 83       	st	Z, r21
	digit_values[1] = minutes / 10;
     ea0:	36 95       	lsr	r19
     ea2:	36 95       	lsr	r19
     ea4:	36 95       	lsr	r19
     ea6:	31 83       	std	Z+1, r19	; 0x01
	digit_values[2] = display_hours % 10;
     ea8:	28 9f       	mul	r18, r24
     eaa:	81 2d       	mov	r24, r1
     eac:	11 24       	eor	r1, r1
     eae:	98 2f       	mov	r25, r24
     eb0:	96 95       	lsr	r25
     eb2:	96 95       	lsr	r25
     eb4:	96 95       	lsr	r25
     eb6:	99 0f       	add	r25, r25
     eb8:	39 2f       	mov	r19, r25
     eba:	33 0f       	add	r19, r19
     ebc:	33 0f       	add	r19, r19
     ebe:	93 0f       	add	r25, r19
     ec0:	29 1b       	sub	r18, r25
     ec2:	22 83       	std	Z+2, r18	; 0x02
	digit_values[3] = display_hours / 10;
     ec4:	86 95       	lsr	r24
     ec6:	86 95       	lsr	r24
     ec8:	86 95       	lsr	r24
     eca:	83 83       	std	Z+3, r24	; 0x03

	// --- Prayer Time Display Conversion (24h to 12h) ---
	PrayerTime p = prayer_times[current_prayer];
     ecc:	e0 91 dc 00 	lds	r30, 0x00DC	; 0x8000dc <current_prayer>
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	ee 0f       	add	r30, r30
     ed4:	ff 1f       	adc	r31, r31
     ed6:	e1 50       	subi	r30, 0x01	; 1
     ed8:	ff 4f       	sbci	r31, 0xFF	; 255
     eda:	20 81       	ld	r18, Z
     edc:	51 81       	ldd	r21, Z+1	; 0x01
	uint8_t display_prayer_hour = p.hour;

	// Convert prayer time to 12-hour format for display
	if (display_prayer_hour >= 12) {
     ede:	2c 30       	cpi	r18, 0x0C	; 12
     ee0:	20 f0       	brcs	.+8      	; 0xeea <update_display_array+0x86>
		if (display_prayer_hour > 12) {
     ee2:	2d 30       	cpi	r18, 0x0D	; 13
     ee4:	28 f0       	brcs	.+10     	; 0xef0 <update_display_array+0x8c>
			display_prayer_hour -= 12;
     ee6:	2c 50       	subi	r18, 0x0C	; 12
     ee8:	03 c0       	rjmp	.+6      	; 0xef0 <update_display_array+0x8c>
		}
		} else if (display_prayer_hour == 0) { // Fajr might be midnight
     eea:	21 11       	cpse	r18, r1
     eec:	01 c0       	rjmp	.+2      	; 0xef0 <update_display_array+0x8c>
		display_prayer_hour = 12;
     eee:	2c e0       	ldi	r18, 0x0C	; 12
	}

	// Update current prayer time digits with 12-hour format
	digit_values[4] = p.minute % 10;
     ef0:	8d ec       	ldi	r24, 0xCD	; 205
     ef2:	58 9f       	mul	r21, r24
     ef4:	31 2d       	mov	r19, r1
     ef6:	11 24       	eor	r1, r1
     ef8:	93 2f       	mov	r25, r19
     efa:	96 95       	lsr	r25
     efc:	96 95       	lsr	r25
     efe:	96 95       	lsr	r25
     f00:	99 0f       	add	r25, r25
     f02:	49 2f       	mov	r20, r25
     f04:	44 0f       	add	r20, r20
     f06:	44 0f       	add	r20, r20
     f08:	94 0f       	add	r25, r20
     f0a:	59 1b       	sub	r21, r25
     f0c:	ed ee       	ldi	r30, 0xED	; 237
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	54 83       	std	Z+4, r21	; 0x04
	digit_values[5] = p.minute / 10;
     f12:	36 95       	lsr	r19
     f14:	36 95       	lsr	r19
     f16:	36 95       	lsr	r19
     f18:	35 83       	std	Z+5, r19	; 0x05
	digit_values[6] = display_prayer_hour % 10;
     f1a:	28 9f       	mul	r18, r24
     f1c:	81 2d       	mov	r24, r1
     f1e:	11 24       	eor	r1, r1
     f20:	98 2f       	mov	r25, r24
     f22:	96 95       	lsr	r25
     f24:	96 95       	lsr	r25
     f26:	96 95       	lsr	r25
     f28:	99 0f       	add	r25, r25
     f2a:	39 2f       	mov	r19, r25
     f2c:	33 0f       	add	r19, r19
     f2e:	33 0f       	add	r19, r19
     f30:	93 0f       	add	r25, r19
     f32:	29 1b       	sub	r18, r25
     f34:	26 83       	std	Z+6, r18	; 0x06
	digit_values[7] = display_prayer_hour / 10;
     f36:	86 95       	lsr	r24
     f38:	86 95       	lsr	r24
     f3a:	86 95       	lsr	r24
     f3c:	87 83       	std	Z+7, r24	; 0x07

	// Update LEDs and date display
	update_prayer_and_day_leds();
     f3e:	0e 94 11 07 	call	0xe22	; 0xe22 <update_prayer_and_day_leds>
	update_date_display();
     f42:	0e 94 25 06 	call	0xc4a	; 0xc4a <update_date_display>
     f46:	08 95       	ret

00000f48 <timeToHM>:
	if (hijri_toggle == 0) combined |= (1 << 6);
	else combined |= (1 << 5);
	shift_register_send_16bit(combined);
}

void timeToHM(double time, uint8_t* hour, uint8_t* minute) {
     f48:	7f 92       	push	r7
     f4a:	8f 92       	push	r8
     f4c:	9f 92       	push	r9
     f4e:	af 92       	push	r10
     f50:	bf 92       	push	r11
     f52:	cf 92       	push	r12
     f54:	df 92       	push	r13
     f56:	ef 92       	push	r14
     f58:	ff 92       	push	r15
     f5a:	0f 93       	push	r16
     f5c:	1f 93       	push	r17
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	ea 01       	movw	r28, r20
     f64:	89 01       	movw	r16, r18
	time = fmod(time, 24.0);
     f66:	20 e0       	ldi	r18, 0x00	; 0
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	40 ec       	ldi	r20, 0xC0	; 192
     f6c:	51 e4       	ldi	r21, 0x41	; 65
     f6e:	0e 94 60 14 	call	0x28c0	; 0x28c0 <fmod>
     f72:	c6 2e       	mov	r12, r22
     f74:	d7 2e       	mov	r13, r23
     f76:	e8 2e       	mov	r14, r24
     f78:	f9 2e       	mov	r15, r25
     f7a:	a6 2e       	mov	r10, r22
     f7c:	b7 2e       	mov	r11, r23
     f7e:	98 2e       	mov	r9, r24
     f80:	89 2e       	mov	r8, r25
	if (time < 0) time += 24.0;
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	a9 01       	movw	r20, r18
     f88:	0e 94 11 13 	call	0x2622	; 0x2622 <__cmpsf2>
     f8c:	88 23       	and	r24, r24
     f8e:	74 f4       	brge	.+28     	; 0xfac <timeToHM+0x64>
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	40 ec       	ldi	r20, 0xC0	; 192
     f96:	51 e4       	ldi	r21, 0x41	; 65
     f98:	6c 2d       	mov	r22, r12
     f9a:	7d 2d       	mov	r23, r13
     f9c:	8e 2d       	mov	r24, r14
     f9e:	9f 2d       	mov	r25, r15
     fa0:	0e 94 18 12 	call	0x2430	; 0x2430 <__addsf3>
     fa4:	a6 2e       	mov	r10, r22
     fa6:	b7 2e       	mov	r11, r23
     fa8:	98 2e       	mov	r9, r24
     faa:	89 2e       	mov	r8, r25

	time += (0.5 / 60.0);  // Add 0.5 minute to minimize float rounding issues
     fac:	29 e8       	ldi	r18, 0x89	; 137
     fae:	38 e8       	ldi	r19, 0x88	; 136
     fb0:	48 e0       	ldi	r20, 0x08	; 8
     fb2:	5c e3       	ldi	r21, 0x3C	; 60
     fb4:	6a 2d       	mov	r22, r10
     fb6:	7b 2d       	mov	r23, r11
     fb8:	89 2d       	mov	r24, r9
     fba:	98 2d       	mov	r25, r8
     fbc:	0e 94 18 12 	call	0x2430	; 0x2430 <__addsf3>
     fc0:	4b 01       	movw	r8, r22
     fc2:	5c 01       	movw	r10, r24

	int h = (int)floor(time);
     fc4:	0e 94 00 14 	call	0x2800	; 0x2800 <floor>
     fc8:	0e 94 8d 13 	call	0x271a	; 0x271a <__fixsfsi>
     fcc:	6b 01       	movw	r12, r22
     fce:	7c 01       	movw	r14, r24
     fd0:	76 2e       	mov	r7, r22
	int m = (int)((time - h) * 60.0);
     fd2:	07 2e       	mov	r0, r23
     fd4:	00 0c       	add	r0, r0
     fd6:	88 0b       	sbc	r24, r24
     fd8:	99 0b       	sbc	r25, r25
     fda:	0e 94 c5 13 	call	0x278a	; 0x278a <__floatsisf>
     fde:	9b 01       	movw	r18, r22
     fe0:	ac 01       	movw	r20, r24
     fe2:	c5 01       	movw	r24, r10
     fe4:	b4 01       	movw	r22, r8
     fe6:	0e 94 17 12 	call	0x242e	; 0x242e <__subsf3>
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	40 e7       	ldi	r20, 0x70	; 112
     ff0:	52 e4       	ldi	r21, 0x42	; 66
     ff2:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__mulsf3>
     ff6:	0e 94 8d 13 	call	0x271a	; 0x271a <__fixsfsi>
     ffa:	9b 01       	movw	r18, r22

	if (m >= 60) { m -= 60; h = (h + 1) % 24; }
     ffc:	6c 33       	cpi	r22, 0x3C	; 60
     ffe:	71 05       	cpc	r23, r1
    1000:	4c f0       	brlt	.+18     	; 0x1014 <timeToHM+0xcc>
    1002:	2c 53       	subi	r18, 0x3C	; 60
    1004:	31 09       	sbc	r19, r1
    1006:	c6 01       	movw	r24, r12
    1008:	01 96       	adiw	r24, 0x01	; 1
    100a:	68 e1       	ldi	r22, 0x18	; 24
    100c:	70 e0       	ldi	r23, 0x00	; 0
    100e:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <__divmodhi4>
    1012:	78 2e       	mov	r7, r24

	*hour = (uint8_t)h;
    1014:	78 82       	st	Y, r7
	*minute = (uint8_t)m;
    1016:	f8 01       	movw	r30, r16
    1018:	20 83       	st	Z, r18
}
    101a:	df 91       	pop	r29
    101c:	cf 91       	pop	r28
    101e:	1f 91       	pop	r17
    1020:	0f 91       	pop	r16
    1022:	ff 90       	pop	r15
    1024:	ef 90       	pop	r14
    1026:	df 90       	pop	r13
    1028:	cf 90       	pop	r12
    102a:	bf 90       	pop	r11
    102c:	af 90       	pop	r10
    102e:	9f 90       	pop	r9
    1030:	8f 90       	pop	r8
    1032:	7f 90       	pop	r7
    1034:	08 95       	ret

00001036 <update_prayer_times_today>:

void update_prayer_times_today(void) {
    1036:	8f 92       	push	r8
    1038:	9f 92       	push	r9
    103a:	af 92       	push	r10
    103c:	bf 92       	push	r11
    103e:	cf 92       	push	r12
    1040:	df 92       	push	r13
    1042:	ef 92       	push	r14
    1044:	ff 92       	push	r15
    1046:	0f 93       	push	r16
    1048:	1f 93       	push	r17
    104a:	cf 93       	push	r28
    104c:	df 93       	push	r29
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	6e 97       	sbiw	r28, 0x1e	; 30
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	f8 94       	cli
    1058:	de bf       	out	0x3e, r29	; 62
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	cd bf       	out	0x3d, r28	; 61
	uint8_t fajr_h, fajr_m;
	uint8_t dhuhr_h, dhuhr_m, asr_h, asr_m, maghrib_h, maghrib_m, isha_h, isha_m;

	double times[5];
	calcPrayers(2000 + year, month, day, LATITUDE, LONGITUDE, 2, is_dst_active, times);
    105e:	80 90 60 00 	lds	r8, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1062:	91 2c       	mov	r9, r1
    1064:	40 91 d6 00 	lds	r20, 0x00D6	; 0x8000d6 <day>
    1068:	50 e0       	ldi	r21, 0x00	; 0
    106a:	60 91 d5 00 	lds	r22, 0x00D5	; 0x8000d5 <month>
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <year>
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	9e 01       	movw	r18, r28
    1078:	25 5f       	subi	r18, 0xF5	; 245
    107a:	3f 4f       	sbci	r19, 0xFF	; 255
    107c:	3f 93       	push	r19
    107e:	2f 93       	push	r18
    1080:	68 94       	set
    1082:	aa 24       	eor	r10, r10
    1084:	a1 f8       	bld	r10, 1
    1086:	b1 2c       	mov	r11, r1
    1088:	0f 2e       	mov	r0, r31
    108a:	f3 e0       	ldi	r31, 0x03	; 3
    108c:	cf 2e       	mov	r12, r31
    108e:	f8 ef       	ldi	r31, 0xF8	; 248
    1090:	df 2e       	mov	r13, r31
    1092:	f9 ef       	ldi	r31, 0xF9	; 249
    1094:	ef 2e       	mov	r14, r31
    1096:	f1 e4       	ldi	r31, 0x41	; 65
    1098:	ff 2e       	mov	r15, r31
    109a:	f0 2d       	mov	r31, r0
    109c:	01 e9       	ldi	r16, 0x91	; 145
    109e:	1f e0       	ldi	r17, 0x0F	; 15
    10a0:	20 ef       	ldi	r18, 0xF0	; 240
    10a2:	31 e4       	ldi	r19, 0x41	; 65
    10a4:	80 53       	subi	r24, 0x30	; 48
    10a6:	98 4f       	sbci	r25, 0xF8	; 248
    10a8:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <calcPrayers>

	timeToHM(times[0], &fajr_h, &fajr_m);
    10ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    10ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    10b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    10b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    10b4:	9e 01       	movw	r18, r28
    10b6:	2e 5f       	subi	r18, 0xFE	; 254
    10b8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ba:	ae 01       	movw	r20, r28
    10bc:	4f 5f       	subi	r20, 0xFF	; 255
    10be:	5f 4f       	sbci	r21, 0xFF	; 255
    10c0:	0e 94 a4 07 	call	0xf48	; 0xf48 <timeToHM>
	timeToHM(times[1], &dhuhr_h, &dhuhr_m);
    10c4:	6f 85       	ldd	r22, Y+15	; 0x0f
    10c6:	78 89       	ldd	r23, Y+16	; 0x10
    10c8:	89 89       	ldd	r24, Y+17	; 0x11
    10ca:	9a 89       	ldd	r25, Y+18	; 0x12
    10cc:	9e 01       	movw	r18, r28
    10ce:	2c 5f       	subi	r18, 0xFC	; 252
    10d0:	3f 4f       	sbci	r19, 0xFF	; 255
    10d2:	ae 01       	movw	r20, r28
    10d4:	4d 5f       	subi	r20, 0xFD	; 253
    10d6:	5f 4f       	sbci	r21, 0xFF	; 255
    10d8:	0e 94 a4 07 	call	0xf48	; 0xf48 <timeToHM>
	timeToHM(times[2], &asr_h, &asr_m);
    10dc:	6b 89       	ldd	r22, Y+19	; 0x13
    10de:	7c 89       	ldd	r23, Y+20	; 0x14
    10e0:	8d 89       	ldd	r24, Y+21	; 0x15
    10e2:	9e 89       	ldd	r25, Y+22	; 0x16
    10e4:	9e 01       	movw	r18, r28
    10e6:	2a 5f       	subi	r18, 0xFA	; 250
    10e8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ea:	ae 01       	movw	r20, r28
    10ec:	4b 5f       	subi	r20, 0xFB	; 251
    10ee:	5f 4f       	sbci	r21, 0xFF	; 255
    10f0:	0e 94 a4 07 	call	0xf48	; 0xf48 <timeToHM>
	timeToHM(times[3], &maghrib_h, &maghrib_m);
    10f4:	6f 89       	ldd	r22, Y+23	; 0x17
    10f6:	78 8d       	ldd	r23, Y+24	; 0x18
    10f8:	89 8d       	ldd	r24, Y+25	; 0x19
    10fa:	9a 8d       	ldd	r25, Y+26	; 0x1a
    10fc:	9e 01       	movw	r18, r28
    10fe:	28 5f       	subi	r18, 0xF8	; 248
    1100:	3f 4f       	sbci	r19, 0xFF	; 255
    1102:	ae 01       	movw	r20, r28
    1104:	49 5f       	subi	r20, 0xF9	; 249
    1106:	5f 4f       	sbci	r21, 0xFF	; 255
    1108:	0e 94 a4 07 	call	0xf48	; 0xf48 <timeToHM>
	timeToHM(times[4], &isha_h, &isha_m);
    110c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    110e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1110:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1112:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1114:	9e 01       	movw	r18, r28
    1116:	26 5f       	subi	r18, 0xF6	; 246
    1118:	3f 4f       	sbci	r19, 0xFF	; 255
    111a:	ae 01       	movw	r20, r28
    111c:	47 5f       	subi	r20, 0xF7	; 247
    111e:	5f 4f       	sbci	r21, 0xFF	; 255
    1120:	0e 94 a4 07 	call	0xf48	; 0xf48 <timeToHM>

	prayer_times[0].hour = fajr_h;    prayer_times[0].minute = fajr_m;
    1124:	ef ef       	ldi	r30, 0xFF	; 255
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	80 83       	st	Z, r24
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	81 83       	std	Z+1, r24	; 0x01
	prayer_times[1].hour = dhuhr_h;   prayer_times[1].minute = dhuhr_m;
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	82 83       	std	Z+2, r24	; 0x02
    1134:	8c 81       	ldd	r24, Y+4	; 0x04
    1136:	83 83       	std	Z+3, r24	; 0x03
	prayer_times[2].hour = asr_h;     prayer_times[2].minute = asr_m;
    1138:	8d 81       	ldd	r24, Y+5	; 0x05
    113a:	84 83       	std	Z+4, r24	; 0x04
    113c:	8e 81       	ldd	r24, Y+6	; 0x06
    113e:	85 83       	std	Z+5, r24	; 0x05
	prayer_times[3].hour = maghrib_h; prayer_times[3].minute = maghrib_m;
    1140:	8f 81       	ldd	r24, Y+7	; 0x07
    1142:	86 83       	std	Z+6, r24	; 0x06
    1144:	88 85       	ldd	r24, Y+8	; 0x08
    1146:	87 83       	std	Z+7, r24	; 0x07
	prayer_times[4].hour = isha_h;    prayer_times[4].minute = isha_m;
    1148:	89 85       	ldd	r24, Y+9	; 0x09
    114a:	80 87       	std	Z+8, r24	; 0x08
    114c:	8a 85       	ldd	r24, Y+10	; 0x0a
    114e:	81 87       	std	Z+9, r24	; 0x09
}
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	6e 96       	adiw	r28, 0x1e	; 30
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	f8 94       	cli
    115a:	de bf       	out	0x3e, r29	; 62
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	cd bf       	out	0x3d, r28	; 61
    1160:	df 91       	pop	r29
    1162:	cf 91       	pop	r28
    1164:	1f 91       	pop	r17
    1166:	0f 91       	pop	r16
    1168:	ff 90       	pop	r15
    116a:	ef 90       	pop	r14
    116c:	df 90       	pop	r13
    116e:	cf 90       	pop	r12
    1170:	bf 90       	pop	r11
    1172:	af 90       	pop	r10
    1174:	9f 90       	pop	r9
    1176:	8f 90       	pop	r8
    1178:	08 95       	ret

0000117a <clear_shiftregister>:

void clear_shiftregister() {
	shift_register_send_16bit(0);
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	0e 94 94 11 	call	0x2328	; 0x2328 <shift_register_send_16bit>
	shift_register_send_digit_select16(0xFFFF);
    1182:	8f ef       	ldi	r24, 0xFF	; 255
    1184:	9f ef       	ldi	r25, 0xFF	; 255
    1186:	0e 94 d5 11 	call	0x23aa	; 0x23aa <shift_register_send_digit_select16>
    118a:	08 95       	ret

0000118c <disable_display>:
}

void disable_display(void) {
	DDRC &= ~0b11111100;
    118c:	84 b3       	in	r24, 0x14	; 20
    118e:	83 70       	andi	r24, 0x03	; 3
    1190:	84 bb       	out	0x14, r24	; 20
	PORTC &= ~0b11111100;
    1192:	85 b3       	in	r24, 0x15	; 21
    1194:	83 70       	andi	r24, 0x03	; 3
    1196:	85 bb       	out	0x15, r24	; 21

	DDRA &= ~(1 << PA7);
    1198:	d7 98       	cbi	0x1a, 7	; 26
	DDRD &= ~(1 << PD7);
    119a:	8f 98       	cbi	0x11, 7	; 17
    119c:	08 95       	ret

0000119e <enable_display>:
}

void enable_display(void) {
	DDRC |= 0b11111100;
    119e:	84 b3       	in	r24, 0x14	; 20
    11a0:	8c 6f       	ori	r24, 0xFC	; 252
    11a2:	84 bb       	out	0x14, r24	; 20

	DDRA |= (1 << PA7);
    11a4:	d7 9a       	sbi	0x1a, 7	; 26
	DDRD |= (1 << PD7);
    11a6:	8f 9a       	sbi	0x11, 7	; 17
	PORTA |= (1 << PA7);
    11a8:	df 9a       	sbi	0x1b, 7	; 27
	PORTD |= (1 << PD7);
    11aa:	97 9a       	sbi	0x12, 7	; 18
    11ac:	08 95       	ret

000011ae <process_uart_command>:
}


void process_uart_command(void) {
    11ae:	cf 93       	push	r28
    11b0:	df 93       	push	r29
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <process_uart_command+0x6>
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <process_uart_command+0x8>
    11b6:	1f 92       	push	r1
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
	play_feedback_tone();
    11bc:	0e 94 c6 05 	call	0xb8c	; 0xb8c <play_feedback_tone>
	uint8_t len = strlen(uart_buffer);
    11c0:	e9 e0       	ldi	r30, 0x09	; 9
    11c2:	f1 e0       	ldi	r31, 0x01	; 1
    11c4:	01 90       	ld	r0, Z+
    11c6:	00 20       	and	r0, r0
    11c8:	e9 f7       	brne	.-6      	; 0x11c4 <process_uart_command+0x16>
    11ca:	31 97       	sbiw	r30, 0x01	; 1
    11cc:	e9 50       	subi	r30, 0x09	; 9
    11ce:	f1 40       	sbci	r31, 0x01	; 1
	if (uart_buffer[len - 1] == '\n' || uart_buffer[len - 1] == '\r') uart_buffer[len - 1] = '\0';
    11d0:	ff 27       	eor	r31, r31
    11d2:	31 97       	sbiw	r30, 0x01	; 1
    11d4:	df 01       	movw	r26, r30
    11d6:	a7 5f       	subi	r26, 0xF7	; 247
    11d8:	be 4f       	sbci	r27, 0xFE	; 254
    11da:	8c 91       	ld	r24, X
    11dc:	8a 30       	cpi	r24, 0x0A	; 10
    11de:	11 f0       	breq	.+4      	; 0x11e4 <process_uart_command+0x36>
    11e0:	8d 30       	cpi	r24, 0x0D	; 13
    11e2:	19 f4       	brne	.+6      	; 0x11ea <process_uart_command+0x3c>
    11e4:	e7 5f       	subi	r30, 0xF7	; 247
    11e6:	fe 4f       	sbci	r31, 0xFE	; 254
    11e8:	10 82       	st	Z, r1

	if (strncmp(uart_buffer, "T:", 2) == 0) {
    11ea:	42 e0       	ldi	r20, 0x02	; 2
    11ec:	50 e0       	ldi	r21, 0x00	; 0
    11ee:	6d e6       	ldi	r22, 0x6D	; 109
    11f0:	70 e0       	ldi	r23, 0x00	; 0
    11f2:	89 e0       	ldi	r24, 0x09	; 9
    11f4:	91 e0       	ldi	r25, 0x01	; 1
    11f6:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <strncmp>
    11fa:	89 2b       	or	r24, r25
    11fc:	f9 f4       	brne	.+62     	; 0x123c <process_uart_command+0x8e>
		uint8_t h, m;
		if (sscanf(uart_buffer + 2, "%2hhu:%2hhu", &h, &m) == 2) RTC_SetTime(h, m, 0);
    11fe:	ce 01       	movw	r24, r28
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	9f 93       	push	r25
    1204:	8f 93       	push	r24
    1206:	02 96       	adiw	r24, 0x02	; 2
    1208:	9f 93       	push	r25
    120a:	8f 93       	push	r24
    120c:	80 e7       	ldi	r24, 0x70	; 112
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	9f 93       	push	r25
    1212:	8f 93       	push	r24
    1214:	8b e0       	ldi	r24, 0x0B	; 11
    1216:	91 e0       	ldi	r25, 0x01	; 1
    1218:	9f 93       	push	r25
    121a:	8f 93       	push	r24
    121c:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <sscanf>
    1220:	0f b6       	in	r0, 0x3f	; 63
    1222:	f8 94       	cli
    1224:	de bf       	out	0x3e, r29	; 62
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	cd bf       	out	0x3d, r28	; 61
    122a:	02 97       	sbiw	r24, 0x02	; 2
    122c:	09 f0       	breq	.+2      	; 0x1230 <process_uart_command+0x82>
    122e:	2b c1       	rjmp	.+598    	; 0x1486 <process_uart_command+0x2d8>
    1230:	40 e0       	ldi	r20, 0x00	; 0
    1232:	69 81       	ldd	r22, Y+1	; 0x01
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	0e 94 04 04 	call	0x808	; 0x808 <RTC_SetTime>
    123a:	25 c1       	rjmp	.+586    	; 0x1486 <process_uart_command+0x2d8>
		} else if (strncmp(uart_buffer, "D:", 2) == 0) {
    123c:	42 e0       	ldi	r20, 0x02	; 2
    123e:	50 e0       	ldi	r21, 0x00	; 0
    1240:	6c e7       	ldi	r22, 0x7C	; 124
    1242:	70 e0       	ldi	r23, 0x00	; 0
    1244:	89 e0       	ldi	r24, 0x09	; 9
    1246:	91 e0       	ldi	r25, 0x01	; 1
    1248:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <strncmp>
    124c:	89 2b       	or	r24, r25
    124e:	39 f5       	brne	.+78     	; 0x129e <process_uart_command+0xf0>
		uint8_t dow, d, mo; uint16_t y;
		if (sscanf(uart_buffer + 2, "%hhu:%hhu/%hhu/%4hu", &dow, &d, &mo, &y) == 4)
    1250:	ce 01       	movw	r24, r28
    1252:	01 96       	adiw	r24, 0x01	; 1
    1254:	9f 93       	push	r25
    1256:	8f 93       	push	r24
    1258:	02 96       	adiw	r24, 0x02	; 2
    125a:	9f 93       	push	r25
    125c:	8f 93       	push	r24
    125e:	01 96       	adiw	r24, 0x01	; 1
    1260:	9f 93       	push	r25
    1262:	8f 93       	push	r24
    1264:	01 96       	adiw	r24, 0x01	; 1
    1266:	9f 93       	push	r25
    1268:	8f 93       	push	r24
    126a:	8f e7       	ldi	r24, 0x7F	; 127
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	9f 93       	push	r25
    1270:	8f 93       	push	r24
    1272:	8b e0       	ldi	r24, 0x0B	; 11
    1274:	91 e0       	ldi	r25, 0x01	; 1
    1276:	9f 93       	push	r25
    1278:	8f 93       	push	r24
    127a:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <sscanf>
    127e:	0f b6       	in	r0, 0x3f	; 63
    1280:	f8 94       	cli
    1282:	de bf       	out	0x3e, r29	; 62
    1284:	0f be       	out	0x3f, r0	; 63
    1286:	cd bf       	out	0x3d, r28	; 61
    1288:	04 97       	sbiw	r24, 0x04	; 4
    128a:	09 f0       	breq	.+2      	; 0x128e <process_uart_command+0xe0>
    128c:	fc c0       	rjmp	.+504    	; 0x1486 <process_uart_command+0x2d8>
		RTC_SetDate(dow, d, mo, (uint8_t)(y - 2000));
    128e:	29 81       	ldd	r18, Y+1	; 0x01
    1290:	20 5d       	subi	r18, 0xD0	; 208
    1292:	4b 81       	ldd	r20, Y+3	; 0x03
    1294:	6c 81       	ldd	r22, Y+4	; 0x04
    1296:	8d 81       	ldd	r24, Y+5	; 0x05
    1298:	0e 94 57 04 	call	0x8ae	; 0x8ae <RTC_SetDate>
    129c:	f4 c0       	rjmp	.+488    	; 0x1486 <process_uart_command+0x2d8>
	} else if (strncmp(uart_buffer, "A:", 2) == 0) {
    129e:	42 e0       	ldi	r20, 0x02	; 2
    12a0:	50 e0       	ldi	r21, 0x00	; 0
    12a2:	63 e9       	ldi	r22, 0x93	; 147
    12a4:	70 e0       	ldi	r23, 0x00	; 0
    12a6:	89 e0       	ldi	r24, 0x09	; 9
    12a8:	91 e0       	ldi	r25, 0x01	; 1
    12aa:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <strncmp>
    12ae:	89 2b       	or	r24, r25
    12b0:	51 f5       	brne	.+84     	; 0x1306 <process_uart_command+0x158>
		uint8_t h, m;
		if (sscanf(uart_buffer + 2, "%2hhu:%2hhu", &h, &m) == 2) {
    12b2:	ce 01       	movw	r24, r28
    12b4:	01 96       	adiw	r24, 0x01	; 1
    12b6:	9f 93       	push	r25
    12b8:	8f 93       	push	r24
    12ba:	02 96       	adiw	r24, 0x02	; 2
    12bc:	9f 93       	push	r25
    12be:	8f 93       	push	r24
    12c0:	80 e7       	ldi	r24, 0x70	; 112
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	9f 93       	push	r25
    12c6:	8f 93       	push	r24
    12c8:	8b e0       	ldi	r24, 0x0B	; 11
    12ca:	91 e0       	ldi	r25, 0x01	; 1
    12cc:	9f 93       	push	r25
    12ce:	8f 93       	push	r24
    12d0:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <sscanf>
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	f8 94       	cli
    12d8:	de bf       	out	0x3e, r29	; 62
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	cd bf       	out	0x3d, r28	; 61
    12de:	02 97       	sbiw	r24, 0x02	; 2
    12e0:	09 f0       	breq	.+2      	; 0x12e4 <process_uart_command+0x136>
    12e2:	d1 c0       	rjmp	.+418    	; 0x1486 <process_uart_command+0x2d8>
			RTC_SetAlarm1(h, m);
    12e4:	69 81       	ldd	r22, Y+1	; 0x01
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	0e 94 1c 05 	call	0xa38	; 0xa38 <RTC_SetAlarm1>
			RTC_EnableAlarm1();
    12ec:	0e 94 d5 04 	call	0x9aa	; 0x9aa <RTC_EnableAlarm1>
			EEPROM_write(ADDR_ALARM_HOUR, h);
    12f0:	6b 81       	ldd	r22, Y+3	; 0x03
    12f2:	84 e0       	ldi	r24, 0x04	; 4
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	0e 94 a4 00 	call	0x148	; 0x148 <EEPROM_write>
			EEPROM_write(ADDR_ALARM_MINUTE, m);
    12fa:	69 81       	ldd	r22, Y+1	; 0x01
    12fc:	85 e0       	ldi	r24, 0x05	; 5
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	0e 94 a4 00 	call	0x148	; 0x148 <EEPROM_write>
    1304:	c0 c0       	rjmp	.+384    	; 0x1486 <process_uart_command+0x2d8>
		}
	} else if (strcmp(uart_buffer, "d") == 0) { // Using lowercase 'd' for safety
    1306:	66 e9       	ldi	r22, 0x96	; 150
    1308:	70 e0       	ldi	r23, 0x00	; 0
    130a:	89 e0       	ldi	r24, 0x09	; 9
    130c:	91 e0       	ldi	r25, 0x01	; 1
    130e:	0e 94 6f 17 	call	0x2ede	; 0x2ede <strcmp>
    1312:	89 2b       	or	r24, r25
    1314:	79 f4       	brne	.+30     	; 0x1334 <process_uart_command+0x186>
		RTC_DisableAlarm1();
    1316:	0e 94 59 05 	call	0xab2	; 0xab2 <RTC_DisableAlarm1>
		RTC_ClearAlarm1Flag();
    131a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <RTC_ClearAlarm1Flag>
		EEPROM_write(ADDR_ALARM_HOUR, 0xFF);
    131e:	6f ef       	ldi	r22, 0xFF	; 255
    1320:	84 e0       	ldi	r24, 0x04	; 4
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	0e 94 a4 00 	call	0x148	; 0x148 <EEPROM_write>
		EEPROM_write(ADDR_ALARM_MINUTE, 0xFF);
    1328:	6f ef       	ldi	r22, 0xFF	; 255
    132a:	85 e0       	ldi	r24, 0x05	; 5
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	0e 94 a4 00 	call	0x148	; 0x148 <EEPROM_write>
    1332:	a9 c0       	rjmp	.+338    	; 0x1486 <process_uart_command+0x2d8>
	} else if (strcmp(uart_buffer, "S") == 0) {
    1334:	68 e9       	ldi	r22, 0x98	; 152
    1336:	70 e0       	ldi	r23, 0x00	; 0
    1338:	89 e0       	ldi	r24, 0x09	; 9
    133a:	91 e0       	ldi	r25, 0x01	; 1
    133c:	0e 94 6f 17 	call	0x2ede	; 0x2ede <strcmp>
    1340:	89 2b       	or	r24, r25
    1342:	19 f4       	brne	.+6      	; 0x134a <process_uart_command+0x19c>
			stop_alarm_and_feedback();
    1344:	0e 94 db 05 	call	0xbb6	; 0xbb6 <stop_alarm_and_feedback>
    1348:	9e c0       	rjmp	.+316    	; 0x1486 <process_uart_command+0x2d8>
		} else if (strcmp(uart_buffer, "H") == 0) {
    134a:	6a e9       	ldi	r22, 0x9A	; 154
    134c:	70 e0       	ldi	r23, 0x00	; 0
    134e:	89 e0       	ldi	r24, 0x09	; 9
    1350:	91 e0       	ldi	r25, 0x01	; 1
    1352:	0e 94 6f 17 	call	0x2ede	; 0x2ede <strcmp>
    1356:	89 2b       	or	r24, r25
    1358:	61 f4       	brne	.+24     	; 0x1372 <process_uart_command+0x1c4>
		power_save_enabled = 1;
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <power_save_enabled>
		motion_idle_counter = 0;
    1360:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <motion_idle_counter>
    1364:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <motion_idle_counter+0x1>
    1368:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <motion_idle_counter+0x2>
    136c:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <motion_idle_counter+0x3>
    1370:	8a c0       	rjmp	.+276    	; 0x1486 <process_uart_command+0x2d8>
		} else if (strcmp(uart_buffer, "P") == 0) {
    1372:	6c e9       	ldi	r22, 0x9C	; 156
    1374:	70 e0       	ldi	r23, 0x00	; 0
    1376:	89 e0       	ldi	r24, 0x09	; 9
    1378:	91 e0       	ldi	r25, 0x01	; 1
    137a:	0e 94 6f 17 	call	0x2ede	; 0x2ede <strcmp>
    137e:	89 2b       	or	r24, r25
    1380:	41 f4       	brne	.+16     	; 0x1392 <process_uart_command+0x1e4>
		power_save_enabled = 0;
    1382:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <power_save_enabled>
		system_awake = 1;
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <system_awake>
		enable_display();
    138c:	0e 94 cf 08 	call	0x119e	; 0x119e <enable_display>
    1390:	7a c0       	rjmp	.+244    	; 0x1486 <process_uart_command+0x2d8>
		} else if (strcmp(uart_buffer, "+1") == 0) {
    1392:	6e e9       	ldi	r22, 0x9E	; 158
    1394:	70 e0       	ldi	r23, 0x00	; 0
    1396:	89 e0       	ldi	r24, 0x09	; 9
    1398:	91 e0       	ldi	r25, 0x01	; 1
    139a:	0e 94 6f 17 	call	0x2ede	; 0x2ede <strcmp>
    139e:	89 2b       	or	r24, r25
    13a0:	49 f4       	brne	.+18     	; 0x13b4 <process_uart_command+0x206>
		hijri_day_offset_new = 1;
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <hijri_day_offset_new>
		EEPROM_write(ADDR_HIJRI_OFFSET, (char)hijri_day_offset_new);
    13a8:	61 e0       	ldi	r22, 0x01	; 1
    13aa:	82 e0       	ldi	r24, 0x02	; 2
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	0e 94 a4 00 	call	0x148	; 0x148 <EEPROM_write>
    13b2:	69 c0       	rjmp	.+210    	; 0x1486 <process_uart_command+0x2d8>
		} else if (strcmp(uart_buffer, "+2") == 0) {
    13b4:	61 ea       	ldi	r22, 0xA1	; 161
    13b6:	70 e0       	ldi	r23, 0x00	; 0
    13b8:	89 e0       	ldi	r24, 0x09	; 9
    13ba:	91 e0       	ldi	r25, 0x01	; 1
    13bc:	0e 94 6f 17 	call	0x2ede	; 0x2ede <strcmp>
    13c0:	89 2b       	or	r24, r25
    13c2:	49 f4       	brne	.+18     	; 0x13d6 <process_uart_command+0x228>
		hijri_day_offset_new = 2;
    13c4:	82 e0       	ldi	r24, 0x02	; 2
    13c6:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <hijri_day_offset_new>
		EEPROM_write(ADDR_HIJRI_OFFSET, (char)hijri_day_offset_new);
    13ca:	62 e0       	ldi	r22, 0x02	; 2
    13cc:	82 e0       	ldi	r24, 0x02	; 2
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	0e 94 a4 00 	call	0x148	; 0x148 <EEPROM_write>
    13d4:	58 c0       	rjmp	.+176    	; 0x1486 <process_uart_command+0x2d8>
		} else if (strcmp(uart_buffer, "0") == 0) {
    13d6:	64 ea       	ldi	r22, 0xA4	; 164
    13d8:	70 e0       	ldi	r23, 0x00	; 0
    13da:	89 e0       	ldi	r24, 0x09	; 9
    13dc:	91 e0       	ldi	r25, 0x01	; 1
    13de:	0e 94 6f 17 	call	0x2ede	; 0x2ede <strcmp>
    13e2:	89 2b       	or	r24, r25
    13e4:	41 f4       	brne	.+16     	; 0x13f6 <process_uart_command+0x248>
		hijri_day_offset_new = 0;
    13e6:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <hijri_day_offset_new>
		EEPROM_write(ADDR_HIJRI_OFFSET, (char)hijri_day_offset_new);
    13ea:	60 e0       	ldi	r22, 0x00	; 0
    13ec:	82 e0       	ldi	r24, 0x02	; 2
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	0e 94 a4 00 	call	0x148	; 0x148 <EEPROM_write>
    13f4:	48 c0       	rjmp	.+144    	; 0x1486 <process_uart_command+0x2d8>
		} else if (strcmp(uart_buffer, "-1") == 0) {
    13f6:	66 ea       	ldi	r22, 0xA6	; 166
    13f8:	70 e0       	ldi	r23, 0x00	; 0
    13fa:	89 e0       	ldi	r24, 0x09	; 9
    13fc:	91 e0       	ldi	r25, 0x01	; 1
    13fe:	0e 94 6f 17 	call	0x2ede	; 0x2ede <strcmp>
    1402:	89 2b       	or	r24, r25
    1404:	49 f4       	brne	.+18     	; 0x1418 <process_uart_command+0x26a>
		hijri_day_offset_new = -1;
    1406:	8f ef       	ldi	r24, 0xFF	; 255
    1408:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <hijri_day_offset_new>
		EEPROM_write(ADDR_HIJRI_OFFSET, (char)hijri_day_offset_new);
    140c:	6f ef       	ldi	r22, 0xFF	; 255
    140e:	82 e0       	ldi	r24, 0x02	; 2
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	0e 94 a4 00 	call	0x148	; 0x148 <EEPROM_write>
    1416:	37 c0       	rjmp	.+110    	; 0x1486 <process_uart_command+0x2d8>
		} else if (strcmp(uart_buffer, "-2") == 0) {
    1418:	69 ea       	ldi	r22, 0xA9	; 169
    141a:	70 e0       	ldi	r23, 0x00	; 0
    141c:	89 e0       	ldi	r24, 0x09	; 9
    141e:	91 e0       	ldi	r25, 0x01	; 1
    1420:	0e 94 6f 17 	call	0x2ede	; 0x2ede <strcmp>
    1424:	89 2b       	or	r24, r25
    1426:	49 f4       	brne	.+18     	; 0x143a <process_uart_command+0x28c>
		hijri_day_offset_new = -2;
    1428:	8e ef       	ldi	r24, 0xFE	; 254
    142a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <hijri_day_offset_new>
		EEPROM_write(ADDR_HIJRI_OFFSET, (char)hijri_day_offset_new);
    142e:	6e ef       	ldi	r22, 0xFE	; 254
    1430:	82 e0       	ldi	r24, 0x02	; 2
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	0e 94 a4 00 	call	0x148	; 0x148 <EEPROM_write>
    1438:	26 c0       	rjmp	.+76     	; 0x1486 <process_uart_command+0x2d8>
		} else if (strcmp(uart_buffer, "C") == 0) {
    143a:	6c ea       	ldi	r22, 0xAC	; 172
    143c:	70 e0       	ldi	r23, 0x00	; 0
    143e:	89 e0       	ldi	r24, 0x09	; 9
    1440:	91 e0       	ldi	r25, 0x01	; 1
    1442:	0e 94 6f 17 	call	0x2ede	; 0x2ede <strcmp>
    1446:	89 2b       	or	r24, r25
    1448:	61 f4       	brne	.+24     	; 0x1462 <process_uart_command+0x2b4>
		is_dst_active = 1;
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		EEPROM_write(ADDR_DST_ACTIVE, (char)is_dst_active);
    1450:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1454:	83 e0       	ldi	r24, 0x03	; 3
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	0e 94 a4 00 	call	0x148	; 0x148 <EEPROM_write>
		update_prayer_times_today();
    145c:	0e 94 1b 08 	call	0x1036	; 0x1036 <update_prayer_times_today>
    1460:	12 c0       	rjmp	.+36     	; 0x1486 <process_uart_command+0x2d8>
		} else if (strcmp(uart_buffer, "W") == 0) {
    1462:	6e ea       	ldi	r22, 0xAE	; 174
    1464:	70 e0       	ldi	r23, 0x00	; 0
    1466:	89 e0       	ldi	r24, 0x09	; 9
    1468:	91 e0       	ldi	r25, 0x01	; 1
    146a:	0e 94 6f 17 	call	0x2ede	; 0x2ede <strcmp>
    146e:	89 2b       	or	r24, r25
    1470:	51 f4       	brne	.+20     	; 0x1486 <process_uart_command+0x2d8>
		is_dst_active = 0;
    1472:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		EEPROM_write(ADDR_DST_ACTIVE, (char)is_dst_active);
    1476:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    147a:	83 e0       	ldi	r24, 0x03	; 3
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	0e 94 a4 00 	call	0x148	; 0x148 <EEPROM_write>
		update_prayer_times_today();
    1482:	0e 94 1b 08 	call	0x1036	; 0x1036 <update_prayer_times_today>
	}

	memset(uart_buffer, 0, sizeof(uart_buffer));
    1486:	84 e1       	ldi	r24, 0x14	; 20
    1488:	e9 e0       	ldi	r30, 0x09	; 9
    148a:	f1 e0       	ldi	r31, 0x01	; 1
    148c:	df 01       	movw	r26, r30
    148e:	1d 92       	st	X+, r1
    1490:	8a 95       	dec	r24
    1492:	e9 f7       	brne	.-6      	; 0x148e <process_uart_command+0x2e0>
	uart_index = 0;
    1494:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <uart_index>
}
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	df 91       	pop	r29
    14a4:	cf 91       	pop	r28
    14a6:	08 95       	ret

000014a8 <__vector_10>:

ISR(TIMER0_COMP_vect) {
    14a8:	1f 92       	push	r1
    14aa:	0f 92       	push	r0
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	0f 92       	push	r0
    14b0:	11 24       	eor	r1, r1
    14b2:	2f 93       	push	r18
    14b4:	3f 93       	push	r19
    14b6:	4f 93       	push	r20
    14b8:	5f 93       	push	r21
    14ba:	6f 93       	push	r22
    14bc:	7f 93       	push	r23
    14be:	8f 93       	push	r24
    14c0:	9f 93       	push	r25
    14c2:	af 93       	push	r26
    14c4:	bf 93       	push	r27
    14c6:	ef 93       	push	r30
    14c8:	ff 93       	push	r31
	if (system_awake) {
    14ca:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <system_awake>
    14ce:	88 23       	and	r24, r24
    14d0:	41 f1       	breq	.+80     	; 0x1522 <__vector_10+0x7a>
		uint8_t real_digit = digit_map[current_digit];
    14d2:	e0 91 ec 00 	lds	r30, 0x00EC	; 0x8000ec <current_digit>
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	e0 55       	subi	r30, 0x50	; 80
    14da:	ff 4f       	sbci	r31, 0xFF	; 255
		uint16_t digit_mask = ~(1 << real_digit);
		shift_register_send_digit_select16(digit_mask);
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	00 80       	ld	r0, Z
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <__vector_10+0x40>
    14e4:	88 0f       	add	r24, r24
    14e6:	99 1f       	adc	r25, r25
    14e8:	0a 94       	dec	r0
    14ea:	e2 f7       	brpl	.-8      	; 0x14e4 <__vector_10+0x3c>
    14ec:	80 95       	com	r24
    14ee:	90 95       	com	r25
    14f0:	0e 94 d5 11 	call	0x23aa	; 0x23aa <shift_register_send_digit_select16>
		seven_seg_write('B', digit_values[current_digit]);
    14f4:	e0 91 ec 00 	lds	r30, 0x00EC	; 0x8000ec <current_digit>
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	e3 51       	subi	r30, 0x13	; 19
    14fc:	ff 4f       	sbci	r31, 0xFF	; 255
    14fe:	60 81       	ld	r22, Z
    1500:	82 e4       	ldi	r24, 0x42	; 66
    1502:	0e 94 14 11 	call	0x2228	; 0x2228 <seven_seg_write>
		current_digit = (current_digit + 1) % 16;
    1506:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <current_digit>
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	01 96       	adiw	r24, 0x01	; 1
    150e:	8f 70       	andi	r24, 0x0F	; 15
    1510:	90 78       	andi	r25, 0x80	; 128
    1512:	99 23       	and	r25, r25
    1514:	24 f4       	brge	.+8      	; 0x151e <__vector_10+0x76>
    1516:	01 97       	sbiw	r24, 0x01	; 1
    1518:	80 6f       	ori	r24, 0xF0	; 240
    151a:	9f 6f       	ori	r25, 0xFF	; 255
    151c:	01 96       	adiw	r24, 0x01	; 1
    151e:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <current_digit>
	}

	ms_counter++;
    1522:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <ms_counter>
    1526:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <ms_counter+0x1>
    152a:	01 96       	adiw	r24, 0x01	; 1
    152c:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <ms_counter+0x1>
    1530:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <ms_counter>
	five_sec_counter++;
    1534:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <five_sec_counter>
    1538:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <five_sec_counter+0x1>
    153c:	01 96       	adiw	r24, 0x01	; 1
    153e:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <five_sec_counter+0x1>
    1542:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <five_sec_counter>

	if (power_save_enabled) {
    1546:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <power_save_enabled>
    154a:	88 23       	and	r24, r24
    154c:	b1 f1       	breq	.+108    	; 0x15ba <__vector_10+0x112>
		if (PIND & (1 << PD3)) {
    154e:	83 9b       	sbis	0x10, 3	; 16
    1550:	12 c0       	rjmp	.+36     	; 0x1576 <__vector_10+0xce>
			motion_idle_counter = 0;
    1552:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <motion_idle_counter>
    1556:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <motion_idle_counter+0x1>
    155a:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <motion_idle_counter+0x2>
    155e:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <motion_idle_counter+0x3>
			if (!system_awake) {
    1562:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <system_awake>
    1566:	81 11       	cpse	r24, r1
    1568:	28 c0       	rjmp	.+80     	; 0x15ba <__vector_10+0x112>
				system_awake = 1;
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <system_awake>
				enable_display();
    1570:	0e 94 cf 08 	call	0x119e	; 0x119e <enable_display>
    1574:	22 c0       	rjmp	.+68     	; 0x15ba <__vector_10+0x112>
			}
			} else {
			if (system_awake && ++motion_idle_counter >= 60000) {
    1576:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <system_awake>
    157a:	88 23       	and	r24, r24
    157c:	f1 f0       	breq	.+60     	; 0x15ba <__vector_10+0x112>
    157e:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <motion_idle_counter>
    1582:	90 91 de 00 	lds	r25, 0x00DE	; 0x8000de <motion_idle_counter+0x1>
    1586:	a0 91 df 00 	lds	r26, 0x00DF	; 0x8000df <motion_idle_counter+0x2>
    158a:	b0 91 e0 00 	lds	r27, 0x00E0	; 0x8000e0 <motion_idle_counter+0x3>
    158e:	01 96       	adiw	r24, 0x01	; 1
    1590:	a1 1d       	adc	r26, r1
    1592:	b1 1d       	adc	r27, r1
    1594:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <motion_idle_counter>
    1598:	90 93 de 00 	sts	0x00DE, r25	; 0x8000de <motion_idle_counter+0x1>
    159c:	a0 93 df 00 	sts	0x00DF, r26	; 0x8000df <motion_idle_counter+0x2>
    15a0:	b0 93 e0 00 	sts	0x00E0, r27	; 0x8000e0 <motion_idle_counter+0x3>
    15a4:	80 36       	cpi	r24, 0x60	; 96
    15a6:	9a 4e       	sbci	r25, 0xEA	; 234
    15a8:	a1 05       	cpc	r26, r1
    15aa:	b1 05       	cpc	r27, r1
    15ac:	30 f0       	brcs	.+12     	; 0x15ba <__vector_10+0x112>
				system_awake = 0;
    15ae:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <system_awake>
				clear_shiftregister();
    15b2:	0e 94 bd 08 	call	0x117a	; 0x117a <clear_shiftregister>
				disable_display();
    15b6:	0e 94 c6 08 	call	0x118c	; 0x118c <disable_display>
			}
		}
	}
	
	DIO_write('A', 7, 1);
    15ba:	41 e0       	ldi	r20, 0x01	; 1
    15bc:	67 e0       	ldi	r22, 0x07	; 7
    15be:	81 e4       	ldi	r24, 0x41	; 65
    15c0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DIO_write>
	DIO_write('D', 7, 1);
    15c4:	41 e0       	ldi	r20, 0x01	; 1
    15c6:	67 e0       	ldi	r22, 0x07	; 7
    15c8:	84 e4       	ldi	r24, 0x44	; 68
    15ca:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DIO_write>

	if (temp_digit == 0) {
    15ce:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <temp_digit>
    15d2:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <temp_digit+0x1>
    15d6:	89 2b       	or	r24, r25
    15d8:	81 f4       	brne	.+32     	; 0x15fa <__vector_10+0x152>
		seven_seg_writeT(Temp % 10);
    15da:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <Temp>
    15de:	90 91 fe 00 	lds	r25, 0x00FE	; 0x8000fe <Temp+0x1>
    15e2:	6a e0       	ldi	r22, 0x0A	; 10
    15e4:	70 e0       	ldi	r23, 0x00	; 0
    15e6:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <__divmodhi4>
    15ea:	0e 94 5d 11 	call	0x22ba	; 0x22ba <seven_seg_writeT>
		DIO_write('D', 7, 0);
    15ee:	40 e0       	ldi	r20, 0x00	; 0
    15f0:	67 e0       	ldi	r22, 0x07	; 7
    15f2:	84 e4       	ldi	r24, 0x44	; 68
    15f4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DIO_write>
    15f8:	10 c0       	rjmp	.+32     	; 0x161a <__vector_10+0x172>
		} else {
		seven_seg_writeT(Temp / 10);
    15fa:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <Temp>
    15fe:	90 91 fe 00 	lds	r25, 0x00FE	; 0x8000fe <Temp+0x1>
    1602:	6a e0       	ldi	r22, 0x0A	; 10
    1604:	70 e0       	ldi	r23, 0x00	; 0
    1606:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <__divmodhi4>
    160a:	86 2f       	mov	r24, r22
    160c:	0e 94 5d 11 	call	0x22ba	; 0x22ba <seven_seg_writeT>
		DIO_write('A', 7, 0);
    1610:	40 e0       	ldi	r20, 0x00	; 0
    1612:	67 e0       	ldi	r22, 0x07	; 7
    1614:	81 e4       	ldi	r24, 0x41	; 65
    1616:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DIO_write>
	}
	temp_digit ^= 1;
    161a:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <temp_digit>
    161e:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <temp_digit+0x1>
    1622:	21 e0       	ldi	r18, 0x01	; 1
    1624:	82 27       	eor	r24, r18
    1626:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <temp_digit+0x1>
    162a:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <temp_digit>


	

	if (UCSRA & (1 << RXC)) {
    162e:	5f 9b       	sbis	0x0b, 7	; 11
    1630:	19 c0       	rjmp	.+50     	; 0x1664 <__vector_10+0x1bc>
		char c = UART_u8ReceiveData();
    1632:	0e 94 88 02 	call	0x510	; 0x510 <UART_u8ReceiveData>
		if (c == '\n') {
    1636:	8a 30       	cpi	r24, 0x0A	; 10
    1638:	49 f4       	brne	.+18     	; 0x164c <__vector_10+0x1a4>
			uart_buffer[uart_index] = '\0';
    163a:	e0 91 d2 00 	lds	r30, 0x00D2	; 0x8000d2 <uart_index>
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	e7 5f       	subi	r30, 0xF7	; 247
    1642:	fe 4f       	sbci	r31, 0xFE	; 254
    1644:	10 82       	st	Z, r1
			process_uart_command();
    1646:	0e 94 d7 08 	call	0x11ae	; 0x11ae <process_uart_command>
    164a:	0c c0       	rjmp	.+24     	; 0x1664 <__vector_10+0x1bc>
			} else if (uart_index < sizeof(uart_buffer) - 1) {
    164c:	e0 91 d2 00 	lds	r30, 0x00D2	; 0x8000d2 <uart_index>
    1650:	e3 31       	cpi	r30, 0x13	; 19
    1652:	40 f4       	brcc	.+16     	; 0x1664 <__vector_10+0x1bc>
			uart_buffer[uart_index++] = c;
    1654:	91 e0       	ldi	r25, 0x01	; 1
    1656:	9e 0f       	add	r25, r30
    1658:	90 93 d2 00 	sts	0x00D2, r25	; 0x8000d2 <uart_index>
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	e7 5f       	subi	r30, 0xF7	; 247
    1660:	fe 4f       	sbci	r31, 0xFE	; 254
    1662:	80 83       	st	Z, r24
		}
	}
	
	// Handle buzzer timing
	static uint16_t buzzer_counter = 0;
	if (buzzer_on_time > 0) {
    1664:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <buzzer_on_time>
    1668:	90 91 e6 00 	lds	r25, 0x00E6	; 0x8000e6 <buzzer_on_time+0x1>
    166c:	89 2b       	or	r24, r25
    166e:	31 f1       	breq	.+76     	; 0x16bc <__vector_10+0x214>
		buzzer_counter++;
    1670:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <__data_end>
    1674:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <__data_end+0x1>
    1678:	01 96       	adiw	r24, 0x01	; 1
    167a:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__data_end+0x1>
    167e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__data_end>
		if (buzzer_counter >= buzzer_on_time) {
    1682:	20 91 e5 00 	lds	r18, 0x00E5	; 0x8000e5 <buzzer_on_time>
    1686:	30 91 e6 00 	lds	r19, 0x00E6	; 0x8000e6 <buzzer_on_time+0x1>
    168a:	82 17       	cp	r24, r18
    168c:	93 07       	cpc	r25, r19
    168e:	b0 f1       	brcs	.+108    	; 0x16fc <__vector_10+0x254>
			buzzer_counter = 0;
    1690:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__data_end+0x1>
    1694:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <__data_end>
			buzzer_on_time = 0;
    1698:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <buzzer_on_time+0x1>
    169c:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <buzzer_on_time>
			buzzer_off_time = 1;
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <buzzer_off_time+0x1>
    16a8:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <buzzer_off_time>
			buzzer_on = 0;
    16ac:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <buzzer_on>
			DIO_write('D', 5, 0);
    16b0:	40 e0       	ldi	r20, 0x00	; 0
    16b2:	65 e0       	ldi	r22, 0x05	; 5
    16b4:	84 e4       	ldi	r24, 0x44	; 68
    16b6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DIO_write>
    16ba:	20 c0       	rjmp	.+64     	; 0x16fc <__vector_10+0x254>
		}
		} else if (buzzer_off_time > 0) {
    16bc:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <buzzer_off_time>
    16c0:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <buzzer_off_time+0x1>
    16c4:	89 2b       	or	r24, r25
    16c6:	d1 f0       	breq	.+52     	; 0x16fc <__vector_10+0x254>
		buzzer_counter++;
    16c8:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <__data_end>
    16cc:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <__data_end+0x1>
    16d0:	01 96       	adiw	r24, 0x01	; 1
    16d2:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__data_end+0x1>
    16d6:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__data_end>
		if (buzzer_counter >= buzzer_off_time) {
    16da:	20 91 e3 00 	lds	r18, 0x00E3	; 0x8000e3 <buzzer_off_time>
    16de:	30 91 e4 00 	lds	r19, 0x00E4	; 0x8000e4 <buzzer_off_time+0x1>
    16e2:	82 17       	cp	r24, r18
    16e4:	93 07       	cpc	r25, r19
    16e6:	50 f0       	brcs	.+20     	; 0x16fc <__vector_10+0x254>
			buzzer_counter = 0;
    16e8:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__data_end+0x1>
    16ec:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <__data_end>
			buzzer_off_time = 0;
    16f0:	10 92 e4 00 	sts	0x00E4, r1	; 0x8000e4 <buzzer_off_time+0x1>
    16f4:	10 92 e3 00 	sts	0x00E3, r1	; 0x8000e3 <buzzer_off_time>
			play_alarm_tone(); // Continue alarm sequence if it's sounding
    16f8:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <play_alarm_tone>
		}
	}

}
    16fc:	ff 91       	pop	r31
    16fe:	ef 91       	pop	r30
    1700:	bf 91       	pop	r27
    1702:	af 91       	pop	r26
    1704:	9f 91       	pop	r25
    1706:	8f 91       	pop	r24
    1708:	7f 91       	pop	r23
    170a:	6f 91       	pop	r22
    170c:	5f 91       	pop	r21
    170e:	4f 91       	pop	r20
    1710:	3f 91       	pop	r19
    1712:	2f 91       	pop	r18
    1714:	0f 90       	pop	r0
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	0f 90       	pop	r0
    171a:	1f 90       	pop	r1
    171c:	18 95       	reti

0000171e <__vector_1>:

ISR(INT0_vect) {
    171e:	1f 92       	push	r1
    1720:	0f 92       	push	r0
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	0f 92       	push	r0
    1726:	11 24       	eor	r1, r1
    1728:	2f 93       	push	r18
    172a:	3f 93       	push	r19
    172c:	4f 93       	push	r20
    172e:	5f 93       	push	r21
    1730:	6f 93       	push	r22
    1732:	7f 93       	push	r23
    1734:	8f 93       	push	r24
    1736:	9f 93       	push	r25
    1738:	af 93       	push	r26
    173a:	bf 93       	push	r27
    173c:	ef 93       	push	r30
    173e:	ff 93       	push	r31
	is_alarm_sounding = 1;
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <is_alarm_sounding>
	alarm_beep_count = 0;
    1746:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <alarm_beep_count>
	play_alarm_tone();
    174a:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <play_alarm_tone>
	if (power_save_enabled && !system_awake) {
    174e:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <power_save_enabled>
    1752:	88 23       	and	r24, r24
    1754:	49 f0       	breq	.+18     	; 0x1768 <__vector_1+0x4a>
    1756:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <system_awake>
    175a:	81 11       	cpse	r24, r1
    175c:	05 c0       	rjmp	.+10     	; 0x1768 <__vector_1+0x4a>
		system_awake = 1;
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <system_awake>
		enable_display();
    1764:	0e 94 cf 08 	call	0x119e	; 0x119e <enable_display>
	}
}
    1768:	ff 91       	pop	r31
    176a:	ef 91       	pop	r30
    176c:	bf 91       	pop	r27
    176e:	af 91       	pop	r26
    1770:	9f 91       	pop	r25
    1772:	8f 91       	pop	r24
    1774:	7f 91       	pop	r23
    1776:	6f 91       	pop	r22
    1778:	5f 91       	pop	r21
    177a:	4f 91       	pop	r20
    177c:	3f 91       	pop	r19
    177e:	2f 91       	pop	r18
    1780:	0f 90       	pop	r0
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	0f 90       	pop	r0
    1786:	1f 90       	pop	r1
    1788:	18 95       	reti

0000178a <main>:

int main(void) {
	I2C_Master_init(100000);
    178a:	60 ea       	ldi	r22, 0xA0	; 160
    178c:	76 e8       	ldi	r23, 0x86	; 134
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <I2C_Master_init>
	UART_vInit(9600);
    1796:	60 e8       	ldi	r22, 0x80	; 128
    1798:	75 e2       	ldi	r23, 0x25	; 37
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	0e 94 65 02 	call	0x4ca	; 0x4ca <UART_vInit>
	seven_seg_vinit('B');
    17a2:	82 e4       	ldi	r24, 0x42	; 66
    17a4:	0e 94 10 11 	call	0x2220	; 0x2220 <seven_seg_vinit>
	seven_seg_vinitT();
    17a8:	0e 94 39 11 	call	0x2272	; 0x2272 <seven_seg_vinitT>
	shift_register_init();
    17ac:	0e 94 84 11 	call	0x2308	; 0x2308 <shift_register_init>
	shift_registers_init16();
    17b0:	0e 94 c5 11 	call	0x238a	; 0x238a <shift_registers_init16>
	timer0_init_ctc_mode();
    17b4:	0e 94 bb 05 	call	0xb76	; 0xb76 <timer0_init_ctc_mode>

	DIO_vsetPINDir('D', 3, 0); // PIR
    17b8:	40 e0       	ldi	r20, 0x00	; 0
    17ba:	63 e0       	ldi	r22, 0x03	; 3
    17bc:	84 e4       	ldi	r24, 0x44	; 68
    17be:	0e 94 8b 02 	call	0x516	; 0x516 <DIO_vsetPINDir>
	DIO_vsetPINDir('D', 5, 1); // Buzzer
    17c2:	41 e0       	ldi	r20, 0x01	; 1
    17c4:	65 e0       	ldi	r22, 0x05	; 5
    17c6:	84 e4       	ldi	r24, 0x44	; 68
    17c8:	0e 94 8b 02 	call	0x516	; 0x516 <DIO_vsetPINDir>
	DIO_vsetPINDir('D', 2, 0); // INT0
    17cc:	40 e0       	ldi	r20, 0x00	; 0
    17ce:	62 e0       	ldi	r22, 0x02	; 2
    17d0:	84 e4       	ldi	r24, 0x44	; 68
    17d2:	0e 94 8b 02 	call	0x516	; 0x516 <DIO_vsetPINDir>
	DIO_vsetPINDir('D',7,1);
    17d6:	41 e0       	ldi	r20, 0x01	; 1
    17d8:	67 e0       	ldi	r22, 0x07	; 7
    17da:	84 e4       	ldi	r24, 0x44	; 68
    17dc:	0e 94 8b 02 	call	0x516	; 0x516 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',7,1);
    17e0:	41 e0       	ldi	r20, 0x01	; 1
    17e2:	67 e0       	ldi	r22, 0x07	; 7
    17e4:	81 e4       	ldi	r24, 0x41	; 65
    17e6:	0e 94 8b 02 	call	0x516	; 0x516 <DIO_vsetPINDir>
	DIO_vsetPINDir('D', ISD1820_PIN, 1); // ISD1820 OUTPUT PIN
    17ea:	41 e0       	ldi	r20, 0x01	; 1
    17ec:	66 e0       	ldi	r22, 0x06	; 6
    17ee:	84 e4       	ldi	r24, 0x44	; 68
    17f0:	0e 94 8b 02 	call	0x516	; 0x516 <DIO_vsetPINDir>

	MCUCR |= (1 << ISC01);
    17f4:	85 b7       	in	r24, 0x35	; 53
    17f6:	82 60       	ori	r24, 0x02	; 2
    17f8:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
    17fa:	85 b7       	in	r24, 0x35	; 53
    17fc:	8e 7f       	andi	r24, 0xFE	; 254
    17fe:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);
    1800:	8b b7       	in	r24, 0x3b	; 59
    1802:	80 64       	ori	r24, 0x40	; 64
    1804:	8b bf       	out	0x3b, r24	; 59

	enable_display();
    1806:	0e 94 cf 08 	call	0x119e	; 0x119e <enable_display>

	sei();
    180a:	78 94       	sei

	hijri_day_offset_new = (int8_t)EEPROM_read(ADDR_HIJRI_OFFSET);
    180c:	82 e0       	ldi	r24, 0x02	; 2
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	0e 94 ac 00 	call	0x158	; 0x158 <EEPROM_read>
    1814:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <hijri_day_offset_new>
	is_dst_active = (uint8_t)EEPROM_read(ADDR_DST_ACTIVE);
    1818:	83 e0       	ldi	r24, 0x03	; 3
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	0e 94 ac 00 	call	0x158	; 0x158 <EEPROM_read>
    1820:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

	// New: Load and set alarm from EEPROM on startup
	uint8_t alarm_h = EEPROM_read(ADDR_ALARM_HOUR);
    1824:	84 e0       	ldi	r24, 0x04	; 4
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	0e 94 ac 00 	call	0x158	; 0x158 <EEPROM_read>
    182c:	c8 2f       	mov	r28, r24
	uint8_t alarm_m = EEPROM_read(ADDR_ALARM_MINUTE);
    182e:	85 e0       	ldi	r24, 0x05	; 5
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	0e 94 ac 00 	call	0x158	; 0x158 <EEPROM_read>

	// Check if the stored alarm time is valid (not 0xFF)
	if (alarm_h != 0xFF && alarm_m != 0xFF) {
    1836:	cf 3f       	cpi	r28, 0xFF	; 255
    1838:	49 f0       	breq	.+18     	; 0x184c <main+0xc2>
    183a:	8f 3f       	cpi	r24, 0xFF	; 255
    183c:	39 f0       	breq	.+14     	; 0x184c <main+0xc2>
		RTC_SetAlarm1(alarm_h, alarm_m);
    183e:	68 2f       	mov	r22, r24
    1840:	8c 2f       	mov	r24, r28
    1842:	0e 94 1c 05 	call	0xa38	; 0xa38 <RTC_SetAlarm1>
		RTC_EnableAlarm1();
    1846:	0e 94 d5 04 	call	0x9aa	; 0x9aa <RTC_EnableAlarm1>
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <main+0xc6>
		} else {
		RTC_DisableAlarm1();
    184c:	0e 94 59 05 	call	0xab2	; 0xab2 <RTC_DisableAlarm1>
	}
	

	RTC_ClearAlarm1Flag();
    1850:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <RTC_ClearAlarm1Flag>

	RTC_GetTime(&hours, &minutes, &seconds);
    1854:	48 ed       	ldi	r20, 0xD8	; 216
    1856:	50 e0       	ldi	r21, 0x00	; 0
    1858:	69 ed       	ldi	r22, 0xD9	; 217
    185a:	70 e0       	ldi	r23, 0x00	; 0
    185c:	8a ed       	ldi	r24, 0xDA	; 218
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	0e 94 27 04 	call	0x84e	; 0x84e <RTC_GetTime>
	RTC_GetDate(&dayofweek, &day, &month, &year);
    1864:	24 ed       	ldi	r18, 0xD4	; 212
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	45 ed       	ldi	r20, 0xD5	; 213
    186a:	50 e0       	ldi	r21, 0x00	; 0
    186c:	66 ed       	ldi	r22, 0xD6	; 214
    186e:	70 e0       	ldi	r23, 0x00	; 0
    1870:	87 ed       	ldi	r24, 0xD7	; 215
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	0e 94 82 04 	call	0x904	; 0x904 <RTC_GetDate>
	last_displayed_day = day;
    1878:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <day>
    187c:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <last_displayed_day>

	update_prayer_times_today();
    1880:	0e 94 1b 08 	call	0x1036	; 0x1036 <update_prayer_times_today>
	update_display_array();
    1884:	0e 94 32 07 	call	0xe64	; 0xe64 <update_display_array>
	update_prayer_and_day_leds();
    1888:	0e 94 11 07 	call	0xe22	; 0xe22 <update_prayer_and_day_leds>

		}

		if (five_sec_counter >= 5000) {
			five_sec_counter = 0;
			current_prayer = (current_prayer + 1) % 5;
    188c:	c5 e0       	ldi	r28, 0x05	; 5
    188e:	d0 e0       	ldi	r29, 0x00	; 0
			}

			// ? ????? ????? ??? ???? ??? ??????
			if (current_adhan != -1 &&
			(hours != prayer_times[current_adhan].hour || minutes != prayer_times[current_adhan].minute)) {
				current_adhan = -1;
    1890:	1f ef       	ldi	r17, 0xFF	; 255
	update_prayer_times_today();
	update_display_array();
	update_prayer_and_day_leds();
	
	while (1) {
		if (ms_counter >= 1000) {
    1892:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <ms_counter>
    1896:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <ms_counter+0x1>
    189a:	88 3e       	cpi	r24, 0xE8	; 232
    189c:	93 40       	sbci	r25, 0x03	; 3
    189e:	08 f4       	brcc	.+2      	; 0x18a2 <main+0x118>
    18a0:	77 c0       	rjmp	.+238    	; 0x1990 <main+0x206>
			ms_counter = 0;
    18a2:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <ms_counter+0x1>
    18a6:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <ms_counter>
			RTC_GetTime(&hours, &minutes, &seconds);
    18aa:	48 ed       	ldi	r20, 0xD8	; 216
    18ac:	50 e0       	ldi	r21, 0x00	; 0
    18ae:	69 ed       	ldi	r22, 0xD9	; 217
    18b0:	70 e0       	ldi	r23, 0x00	; 0
    18b2:	8a ed       	ldi	r24, 0xDA	; 218
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	0e 94 27 04 	call	0x84e	; 0x84e <RTC_GetTime>
			RTC_GetDate(&dayofweek, &day, &month, &year);
    18ba:	24 ed       	ldi	r18, 0xD4	; 212
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	45 ed       	ldi	r20, 0xD5	; 213
    18c0:	50 e0       	ldi	r21, 0x00	; 0
    18c2:	66 ed       	ldi	r22, 0xD6	; 214
    18c4:	70 e0       	ldi	r23, 0x00	; 0
    18c6:	87 ed       	ldi	r24, 0xD7	; 215
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	0e 94 82 04 	call	0x904	; 0x904 <RTC_GetDate>
			update_display_array();
    18ce:	0e 94 32 07 	call	0xe64	; 0xe64 <update_display_array>

			if (day != last_displayed_day) {
    18d2:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <day>
    18d6:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <last_displayed_day>
    18da:	89 17       	cp	r24, r25
    18dc:	21 f0       	breq	.+8      	; 0x18e6 <main+0x15c>
				last_displayed_day = day;
    18de:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <last_displayed_day>
				update_prayer_times_today();
    18e2:	0e 94 1b 08 	call	0x1036	; 0x1036 <update_prayer_times_today>
			}

			// ? ????? ISD1820 ??? ??? ??????
			for (int i = 0; i < 5; i++) {
				if (hours == prayer_times[i].hour && minutes == prayer_times[i].minute) {
    18e6:	30 91 da 00 	lds	r19, 0x00DA	; 0x8000da <hours>
    18ea:	40 91 d9 00 	lds	r20, 0x00D9	; 0x8000d9 <minutes>
    18ee:	ef ef       	ldi	r30, 0xFF	; 255
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
				last_displayed_day = day;
				update_prayer_times_today();
			}

			// ? ????? ISD1820 ??? ??? ??????
			for (int i = 0; i < 5; i++) {
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	90 e0       	ldi	r25, 0x00	; 0
				if (hours == prayer_times[i].hour && minutes == prayer_times[i].minute) {
    18f6:	20 81       	ld	r18, Z
    18f8:	23 13       	cpse	r18, r19
    18fa:	21 c0       	rjmp	.+66     	; 0x193e <main+0x1b4>
    18fc:	21 81       	ldd	r18, Z+1	; 0x01
    18fe:	24 13       	cpse	r18, r20
    1900:	1e c0       	rjmp	.+60     	; 0x193e <main+0x1b4>
					if (current_adhan != i) {
    1902:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <current_adhan>
    1906:	02 2e       	mov	r0, r18
    1908:	00 0c       	add	r0, r0
    190a:	33 0b       	sbc	r19, r19
    190c:	28 17       	cp	r18, r24
    190e:	39 07       	cpc	r19, r25
    1910:	d9 f0       	breq	.+54     	; 0x1948 <main+0x1be>
						current_adhan = i;
    1912:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <current_adhan>
						DIO_write('D', ISD1820_PIN, 1);
    1916:	41 e0       	ldi	r20, 0x01	; 1
    1918:	66 e0       	ldi	r22, 0x06	; 6
    191a:	84 e4       	ldi	r24, 0x44	; 68
    191c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1920:	8f ef       	ldi	r24, 0xFF	; 255
    1922:	91 ee       	ldi	r25, 0xE1	; 225
    1924:	24 e0       	ldi	r18, 0x04	; 4
    1926:	81 50       	subi	r24, 0x01	; 1
    1928:	90 40       	sbci	r25, 0x00	; 0
    192a:	20 40       	sbci	r18, 0x00	; 0
    192c:	e1 f7       	brne	.-8      	; 0x1926 <main+0x19c>
    192e:	00 c0       	rjmp	.+0      	; 0x1930 <main+0x1a6>
    1930:	00 00       	nop
						_delay_ms(200);  // ????? ??? ????
						DIO_write('D', ISD1820_PIN, 0);
    1932:	40 e0       	ldi	r20, 0x00	; 0
    1934:	66 e0       	ldi	r22, 0x06	; 6
    1936:	84 e4       	ldi	r24, 0x44	; 68
    1938:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DIO_write>
    193c:	05 c0       	rjmp	.+10     	; 0x1948 <main+0x1be>
				last_displayed_day = day;
				update_prayer_times_today();
			}

			// ? ????? ISD1820 ??? ??? ??????
			for (int i = 0; i < 5; i++) {
    193e:	01 96       	adiw	r24, 0x01	; 1
    1940:	32 96       	adiw	r30, 0x02	; 2
    1942:	85 30       	cpi	r24, 0x05	; 5
    1944:	91 05       	cpc	r25, r1
    1946:	b9 f6       	brne	.-82     	; 0x18f6 <main+0x16c>
					break;
				}
			}

			// ? ????? ????? ??? ???? ??? ??????
			if (current_adhan != -1 &&
    1948:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <current_adhan>
    194c:	8f 3f       	cpi	r24, 0xFF	; 255
    194e:	b9 f0       	breq	.+46     	; 0x197e <main+0x1f4>
			(hours != prayer_times[current_adhan].hour || minutes != prayer_times[current_adhan].minute)) {
    1950:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <current_adhan>
    1954:	ee 0f       	add	r30, r30
    1956:	ff 0b       	sbc	r31, r31
    1958:	e1 50       	subi	r30, 0x01	; 1
    195a:	ff 4f       	sbci	r31, 0xFF	; 255
					break;
				}
			}

			// ? ????? ????? ??? ???? ??? ??????
			if (current_adhan != -1 &&
    195c:	90 81       	ld	r25, Z
    195e:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <hours>
    1962:	98 13       	cpse	r25, r24
    1964:	0a c0       	rjmp	.+20     	; 0x197a <main+0x1f0>
			(hours != prayer_times[current_adhan].hour || minutes != prayer_times[current_adhan].minute)) {
    1966:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <current_adhan>
    196a:	ee 0f       	add	r30, r30
    196c:	ff 0b       	sbc	r31, r31
    196e:	e1 50       	subi	r30, 0x01	; 1
    1970:	ff 4f       	sbci	r31, 0xFF	; 255
    1972:	91 81       	ldd	r25, Z+1	; 0x01
    1974:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <minutes>
    1978:	98 13       	cpse	r25, r24
				current_adhan = -1;
    197a:	10 93 62 00 	sts	0x0062, r17	; 0x800062 <current_adhan>
			}
			Temp = DS3231_GetTemperature();  // ???? ??? ms_counter >= 1000
    197e:	0e 94 41 05 	call	0xa82	; 0xa82 <DS3231_GetTemperature>
    1982:	08 2e       	mov	r0, r24
    1984:	00 0c       	add	r0, r0
    1986:	99 0b       	sbc	r25, r25
    1988:	90 93 fe 00 	sts	0x00FE, r25	; 0x8000fe <Temp+0x1>
    198c:	80 93 fd 00 	sts	0x00FD, r24	; 0x8000fd <Temp>

		}

		if (five_sec_counter >= 5000) {
    1990:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <five_sec_counter>
    1994:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <five_sec_counter+0x1>
    1998:	88 38       	cpi	r24, 0x88	; 136
    199a:	93 41       	sbci	r25, 0x13	; 19
    199c:	b8 f0       	brcs	.+46     	; 0x19cc <main+0x242>
			five_sec_counter = 0;
    199e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <five_sec_counter+0x1>
    19a2:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <five_sec_counter>
			current_prayer = (current_prayer + 1) % 5;
    19a6:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <current_prayer>
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	01 96       	adiw	r24, 0x01	; 1
    19ae:	be 01       	movw	r22, r28
    19b0:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <__divmodhi4>
    19b4:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <current_prayer>
			update_display_array();
    19b8:	0e 94 32 07 	call	0xe64	; 0xe64 <update_display_array>
			update_prayer_and_day_leds();
    19bc:	0e 94 11 07 	call	0xe22	; 0xe22 <update_prayer_and_day_leds>
			hijri_toggle ^= 1;
    19c0:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <hijri_toggle>
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	89 27       	eor	r24, r25
    19c8:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <hijri_toggle>
			
		}

		if (DIO_u8read('D', 4) == 1) {
    19cc:	64 e0       	ldi	r22, 0x04	; 4
    19ce:	84 e4       	ldi	r24, 0x44	; 68
    19d0:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <DIO_u8read>
    19d4:	81 30       	cpi	r24, 0x01	; 1
    19d6:	09 f0       	breq	.+2      	; 0x19da <main+0x250>
    19d8:	5c cf       	rjmp	.-328    	; 0x1892 <main+0x108>
				is_alarm_sounding = 0;
    19da:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <is_alarm_sounding>
				buzzer_on = 0;
    19de:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <buzzer_on>
				buzzer_on_time = 0;
    19e2:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <buzzer_on_time+0x1>
    19e6:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <buzzer_on_time>
				buzzer_off_time = 0;
    19ea:	10 92 e4 00 	sts	0x00E4, r1	; 0x8000e4 <buzzer_off_time+0x1>
    19ee:	10 92 e3 00 	sts	0x00E3, r1	; 0x8000e3 <buzzer_off_time>
				alarm_beep_count = 0;
    19f2:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <alarm_beep_count>
				DIO_write('D', 5, 0);       // Ensure buzzer is off
    19f6:	40 e0       	ldi	r20, 0x00	; 0
    19f8:	65 e0       	ldi	r22, 0x05	; 5
    19fa:	84 e4       	ldi	r24, 0x44	; 68
    19fc:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DIO_write>
    1a00:	48 cf       	rjmp	.-368    	; 0x1892 <main+0x108>

00001a02 <fixAngle>:

// Asr time offset
double asrOffset(double lat, double dec, double factor) {
	double angle = RAD_TO_DEG * atan(1.0 / (factor + tan(fabs(lat-dec)*DEG_TO_RAD)));
	return hourAngle(lat, dec, angle);
}
    1a02:	0f 93       	push	r16
    1a04:	1f 93       	push	r17
    1a06:	cf 93       	push	r28
    1a08:	df 93       	push	r29
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	44 eb       	ldi	r20, 0xB4	; 180
    1a10:	53 e4       	ldi	r21, 0x43	; 67
    1a12:	0e 94 60 14 	call	0x28c0	; 0x28c0 <fmod>
    1a16:	06 2f       	mov	r16, r22
    1a18:	17 2f       	mov	r17, r23
    1a1a:	d8 2f       	mov	r29, r24
    1a1c:	c9 2f       	mov	r28, r25
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	a9 01       	movw	r20, r18
    1a24:	0e 94 11 13 	call	0x2622	; 0x2622 <__cmpsf2>
    1a28:	88 23       	and	r24, r24
    1a2a:	74 f4       	brge	.+28     	; 0x1a48 <fixAngle+0x46>
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	44 eb       	ldi	r20, 0xB4	; 180
    1a32:	53 e4       	ldi	r21, 0x43	; 67
    1a34:	60 2f       	mov	r22, r16
    1a36:	71 2f       	mov	r23, r17
    1a38:	8d 2f       	mov	r24, r29
    1a3a:	9c 2f       	mov	r25, r28
    1a3c:	0e 94 18 12 	call	0x2430	; 0x2430 <__addsf3>
    1a40:	06 2f       	mov	r16, r22
    1a42:	17 2f       	mov	r17, r23
    1a44:	d8 2f       	mov	r29, r24
    1a46:	c9 2f       	mov	r28, r25
    1a48:	60 2f       	mov	r22, r16
    1a4a:	71 2f       	mov	r23, r17
    1a4c:	8d 2f       	mov	r24, r29
    1a4e:	9c 2f       	mov	r25, r28
    1a50:	df 91       	pop	r29
    1a52:	cf 91       	pop	r28
    1a54:	1f 91       	pop	r17
    1a56:	0f 91       	pop	r16
    1a58:	08 95       	ret

00001a5a <fixHour>:
    1a5a:	0f 93       	push	r16
    1a5c:	1f 93       	push	r17
    1a5e:	cf 93       	push	r28
    1a60:	df 93       	push	r29
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	40 ec       	ldi	r20, 0xC0	; 192
    1a68:	51 e4       	ldi	r21, 0x41	; 65
    1a6a:	0e 94 60 14 	call	0x28c0	; 0x28c0 <fmod>
    1a6e:	06 2f       	mov	r16, r22
    1a70:	17 2f       	mov	r17, r23
    1a72:	d8 2f       	mov	r29, r24
    1a74:	c9 2f       	mov	r28, r25
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	a9 01       	movw	r20, r18
    1a7c:	0e 94 11 13 	call	0x2622	; 0x2622 <__cmpsf2>
    1a80:	88 23       	and	r24, r24
    1a82:	74 f4       	brge	.+28     	; 0x1aa0 <fixHour+0x46>
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	40 ec       	ldi	r20, 0xC0	; 192
    1a8a:	51 e4       	ldi	r21, 0x41	; 65
    1a8c:	60 2f       	mov	r22, r16
    1a8e:	71 2f       	mov	r23, r17
    1a90:	8d 2f       	mov	r24, r29
    1a92:	9c 2f       	mov	r25, r28
    1a94:	0e 94 18 12 	call	0x2430	; 0x2430 <__addsf3>
    1a98:	06 2f       	mov	r16, r22
    1a9a:	17 2f       	mov	r17, r23
    1a9c:	d8 2f       	mov	r29, r24
    1a9e:	c9 2f       	mov	r28, r25
    1aa0:	60 2f       	mov	r22, r16
    1aa2:	71 2f       	mov	r23, r17
    1aa4:	8d 2f       	mov	r24, r29
    1aa6:	9c 2f       	mov	r25, r28
    1aa8:	df 91       	pop	r29
    1aaa:	cf 91       	pop	r28
    1aac:	1f 91       	pop	r17
    1aae:	0f 91       	pop	r16
    1ab0:	08 95       	ret

00001ab2 <julianDate>:
    1ab2:	4f 92       	push	r4
    1ab4:	5f 92       	push	r5
    1ab6:	6f 92       	push	r6
    1ab8:	7f 92       	push	r7
    1aba:	8f 92       	push	r8
    1abc:	9f 92       	push	r9
    1abe:	af 92       	push	r10
    1ac0:	bf 92       	push	r11
    1ac2:	ef 92       	push	r14
    1ac4:	ff 92       	push	r15
    1ac6:	0f 93       	push	r16
    1ac8:	1f 93       	push	r17
    1aca:	cf 93       	push	r28
    1acc:	df 93       	push	r29
    1ace:	00 d0       	rcall	.+0      	; 0x1ad0 <julianDate+0x1e>
    1ad0:	00 d0       	rcall	.+0      	; 0x1ad2 <julianDate+0x20>
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62
    1ad6:	8c 01       	movw	r16, r24
    1ad8:	7a 83       	std	Y+2, r23	; 0x02
    1ada:	69 83       	std	Y+1, r22	; 0x01
    1adc:	7a 01       	movw	r14, r20
    1ade:	63 30       	cpi	r22, 0x03	; 3
    1ae0:	71 05       	cpc	r23, r1
    1ae2:	34 f4       	brge	.+12     	; 0x1af0 <julianDate+0x3e>
    1ae4:	01 50       	subi	r16, 0x01	; 1
    1ae6:	11 09       	sbc	r17, r1
    1ae8:	cb 01       	movw	r24, r22
    1aea:	0c 96       	adiw	r24, 0x0c	; 12
    1aec:	9a 83       	std	Y+2, r25	; 0x02
    1aee:	89 83       	std	Y+1, r24	; 0x01
    1af0:	b8 01       	movw	r22, r16
    1af2:	64 59       	subi	r22, 0x94	; 148
    1af4:	7d 4e       	sbci	r23, 0xED	; 237
    1af6:	07 2e       	mov	r0, r23
    1af8:	00 0c       	add	r0, r0
    1afa:	88 0b       	sbc	r24, r24
    1afc:	99 0b       	sbc	r25, r25
    1afe:	0e 94 c5 13 	call	0x278a	; 0x278a <__floatsisf>
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	30 ea       	ldi	r19, 0xA0	; 160
    1b06:	46 eb       	ldi	r20, 0xB6	; 182
    1b08:	53 e4       	ldi	r21, 0x43	; 67
    1b0a:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__mulsf3>
    1b0e:	0e 94 00 14 	call	0x2800	; 0x2800 <floor>
    1b12:	4b 01       	movw	r8, r22
    1b14:	5c 01       	movw	r10, r24
    1b16:	69 81       	ldd	r22, Y+1	; 0x01
    1b18:	7a 81       	ldd	r23, Y+2	; 0x02
    1b1a:	6f 5f       	subi	r22, 0xFF	; 255
    1b1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1e:	07 2e       	mov	r0, r23
    1b20:	00 0c       	add	r0, r0
    1b22:	88 0b       	sbc	r24, r24
    1b24:	99 0b       	sbc	r25, r25
    1b26:	0e 94 c5 13 	call	0x278a	; 0x278a <__floatsisf>
    1b2a:	21 e0       	ldi	r18, 0x01	; 1
    1b2c:	3d ec       	ldi	r19, 0xCD	; 205
    1b2e:	44 ef       	ldi	r20, 0xF4	; 244
    1b30:	51 e4       	ldi	r21, 0x41	; 65
    1b32:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__mulsf3>
    1b36:	0e 94 00 14 	call	0x2800	; 0x2800 <floor>
    1b3a:	2b 01       	movw	r4, r22
    1b3c:	3c 01       	movw	r6, r24
    1b3e:	c8 01       	movw	r24, r16
    1b40:	64 e6       	ldi	r22, 0x64	; 100
    1b42:	70 e0       	ldi	r23, 0x00	; 0
    1b44:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <__divmodhi4>
    1b48:	22 e0       	ldi	r18, 0x02	; 2
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	26 1b       	sub	r18, r22
    1b4e:	37 0b       	sbc	r19, r23
    1b50:	c8 01       	movw	r24, r16
    1b52:	60 e9       	ldi	r22, 0x90	; 144
    1b54:	71 e0       	ldi	r23, 0x01	; 1
    1b56:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <__divmodhi4>
    1b5a:	62 0f       	add	r22, r18
    1b5c:	73 1f       	adc	r23, r19
    1b5e:	07 2e       	mov	r0, r23
    1b60:	00 0c       	add	r0, r0
    1b62:	88 0b       	sbc	r24, r24
    1b64:	99 0b       	sbc	r25, r25
    1b66:	0e 94 c5 13 	call	0x278a	; 0x278a <__floatsisf>
    1b6a:	69 83       	std	Y+1, r22	; 0x01
    1b6c:	7a 83       	std	Y+2, r23	; 0x02
    1b6e:	8b 83       	std	Y+3, r24	; 0x03
    1b70:	9c 83       	std	Y+4, r25	; 0x04
    1b72:	a3 01       	movw	r20, r6
    1b74:	92 01       	movw	r18, r4
    1b76:	c5 01       	movw	r24, r10
    1b78:	b4 01       	movw	r22, r8
    1b7a:	0e 94 18 12 	call	0x2430	; 0x2430 <__addsf3>
    1b7e:	4b 01       	movw	r8, r22
    1b80:	5c 01       	movw	r10, r24
    1b82:	b7 01       	movw	r22, r14
    1b84:	ff 0c       	add	r15, r15
    1b86:	88 0b       	sbc	r24, r24
    1b88:	99 0b       	sbc	r25, r25
    1b8a:	0e 94 c5 13 	call	0x278a	; 0x278a <__floatsisf>
    1b8e:	9b 01       	movw	r18, r22
    1b90:	ac 01       	movw	r20, r24
    1b92:	c5 01       	movw	r24, r10
    1b94:	b4 01       	movw	r22, r8
    1b96:	0e 94 18 12 	call	0x2430	; 0x2430 <__addsf3>
    1b9a:	9b 01       	movw	r18, r22
    1b9c:	ac 01       	movw	r20, r24
    1b9e:	69 81       	ldd	r22, Y+1	; 0x01
    1ba0:	7a 81       	ldd	r23, Y+2	; 0x02
    1ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba6:	0e 94 18 12 	call	0x2430	; 0x2430 <__addsf3>
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	30 e9       	ldi	r19, 0x90	; 144
    1bae:	4e eb       	ldi	r20, 0xBE	; 190
    1bb0:	54 e4       	ldi	r21, 0x44	; 68
    1bb2:	0e 94 17 12 	call	0x242e	; 0x242e <__subsf3>
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	df 91       	pop	r29
    1bc0:	cf 91       	pop	r28
    1bc2:	1f 91       	pop	r17
    1bc4:	0f 91       	pop	r16
    1bc6:	ff 90       	pop	r15
    1bc8:	ef 90       	pop	r14
    1bca:	bf 90       	pop	r11
    1bcc:	af 90       	pop	r10
    1bce:	9f 90       	pop	r9
    1bd0:	8f 90       	pop	r8
    1bd2:	7f 90       	pop	r7
    1bd4:	6f 90       	pop	r6
    1bd6:	5f 90       	pop	r5
    1bd8:	4f 90       	pop	r4
    1bda:	08 95       	ret

00001bdc <sunPosition>:
    1bdc:	4f 92       	push	r4
    1bde:	5f 92       	push	r5
    1be0:	6f 92       	push	r6
    1be2:	7f 92       	push	r7
    1be4:	8f 92       	push	r8
    1be6:	9f 92       	push	r9
    1be8:	af 92       	push	r10
    1bea:	bf 92       	push	r11
    1bec:	cf 92       	push	r12
    1bee:	df 92       	push	r13
    1bf0:	ef 92       	push	r14
    1bf2:	ff 92       	push	r15
    1bf4:	0f 93       	push	r16
    1bf6:	1f 93       	push	r17
    1bf8:	cf 93       	push	r28
    1bfa:	df 93       	push	r29
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
    1c00:	2a 97       	sbiw	r28, 0x0a	; 10
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	de bf       	out	0x3e, r29	; 62
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	cd bf       	out	0x3d, r28	; 61
    1c0c:	5a 87       	std	Y+10, r21	; 0x0a
    1c0e:	49 87       	std	Y+9, r20	; 0x09
    1c10:	89 01       	movw	r16, r18
    1c12:	24 e6       	ldi	r18, 0x64	; 100
    1c14:	31 ea       	ldi	r19, 0xA1	; 161
    1c16:	45 e1       	ldi	r20, 0x15	; 21
    1c18:	5a e4       	ldi	r21, 0x4A	; 74
    1c1a:	0e 94 17 12 	call	0x242e	; 0x242e <__subsf3>
    1c1e:	6b 01       	movw	r12, r22
    1c20:	7c 01       	movw	r14, r24
    1c22:	2d e4       	ldi	r18, 0x4D	; 77
    1c24:	30 e5       	ldi	r19, 0x50	; 80
    1c26:	4c e7       	ldi	r20, 0x7C	; 124
    1c28:	5f e3       	ldi	r21, 0x3F	; 63
    1c2a:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__mulsf3>
    1c2e:	26 eb       	ldi	r18, 0xB6	; 182
    1c30:	33 ec       	ldi	r19, 0xC3	; 195
    1c32:	42 eb       	ldi	r20, 0xB2	; 178
    1c34:	53 e4       	ldi	r21, 0x43	; 67
    1c36:	0e 94 18 12 	call	0x2430	; 0x2430 <__addsf3>
    1c3a:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <fixAngle>
    1c3e:	4b 01       	movw	r8, r22
    1c40:	5c 01       	movw	r10, r24
    1c42:	23 e6       	ldi	r18, 0x63	; 99
    1c44:	33 e5       	ldi	r19, 0x53	; 83
    1c46:	4c e7       	ldi	r20, 0x7C	; 124
    1c48:	5f e3       	ldi	r21, 0x3F	; 63
    1c4a:	c7 01       	movw	r24, r14
    1c4c:	b6 01       	movw	r22, r12
    1c4e:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__mulsf3>
    1c52:	21 ec       	ldi	r18, 0xC1	; 193
    1c54:	3a e3       	ldi	r19, 0x3A	; 58
    1c56:	4c e8       	ldi	r20, 0x8C	; 140
    1c58:	53 e4       	ldi	r21, 0x43	; 67
    1c5a:	0e 94 18 12 	call	0x2430	; 0x2430 <__addsf3>
    1c5e:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <fixAngle>
    1c62:	69 83       	std	Y+1, r22	; 0x01
    1c64:	7a 83       	std	Y+2, r23	; 0x02
    1c66:	8b 83       	std	Y+3, r24	; 0x03
    1c68:	9c 83       	std	Y+4, r25	; 0x04
    1c6a:	25 e3       	ldi	r18, 0x35	; 53
    1c6c:	3a ef       	ldi	r19, 0xFA	; 250
    1c6e:	4e e8       	ldi	r20, 0x8E	; 142
    1c70:	5c e3       	ldi	r21, 0x3C	; 60
    1c72:	c5 01       	movw	r24, r10
    1c74:	b4 01       	movw	r22, r8
    1c76:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__mulsf3>
    1c7a:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <sin>
    1c7e:	2b 01       	movw	r4, r22
    1c80:	3c 01       	movw	r6, r24
    1c82:	a5 01       	movw	r20, r10
    1c84:	94 01       	movw	r18, r8
    1c86:	c5 01       	movw	r24, r10
    1c88:	b4 01       	movw	r22, r8
    1c8a:	0e 94 18 12 	call	0x2430	; 0x2430 <__addsf3>
    1c8e:	25 e3       	ldi	r18, 0x35	; 53
    1c90:	3a ef       	ldi	r19, 0xFA	; 250
    1c92:	4e e8       	ldi	r20, 0x8E	; 142
    1c94:	5c e3       	ldi	r21, 0x3C	; 60
    1c96:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__mulsf3>
    1c9a:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <sin>
    1c9e:	4b 01       	movw	r8, r22
    1ca0:	5c 01       	movw	r10, r24
    1ca2:	28 eb       	ldi	r18, 0xB8	; 184
    1ca4:	3e e1       	ldi	r19, 0x1E	; 30
    1ca6:	45 ef       	ldi	r20, 0xF5	; 245
    1ca8:	5f e3       	ldi	r21, 0x3F	; 63
    1caa:	c3 01       	movw	r24, r6
    1cac:	b2 01       	movw	r22, r4
    1cae:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__mulsf3>
    1cb2:	29 81       	ldd	r18, Y+1	; 0x01
    1cb4:	3a 81       	ldd	r19, Y+2	; 0x02
    1cb6:	4b 81       	ldd	r20, Y+3	; 0x03
    1cb8:	5c 81       	ldd	r21, Y+4	; 0x04
    1cba:	0e 94 18 12 	call	0x2430	; 0x2430 <__addsf3>
    1cbe:	2b 01       	movw	r4, r22
    1cc0:	3c 01       	movw	r6, r24
    1cc2:	2a e0       	ldi	r18, 0x0A	; 10
    1cc4:	37 ed       	ldi	r19, 0xD7	; 215
    1cc6:	43 ea       	ldi	r20, 0xA3	; 163
    1cc8:	5c e3       	ldi	r21, 0x3C	; 60
    1cca:	c5 01       	movw	r24, r10
    1ccc:	b4 01       	movw	r22, r8
    1cce:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__mulsf3>
    1cd2:	9b 01       	movw	r18, r22
    1cd4:	ac 01       	movw	r20, r24
    1cd6:	c3 01       	movw	r24, r6
    1cd8:	b2 01       	movw	r22, r4
    1cda:	0e 94 18 12 	call	0x2430	; 0x2430 <__addsf3>
    1cde:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <fixAngle>
    1ce2:	25 e3       	ldi	r18, 0x35	; 53
    1ce4:	3a ef       	ldi	r19, 0xFA	; 250
    1ce6:	4e e8       	ldi	r20, 0x8E	; 142
    1ce8:	5c e3       	ldi	r21, 0x3C	; 60
    1cea:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__mulsf3>
    1cee:	4b 01       	movw	r8, r22
    1cf0:	5c 01       	movw	r10, r24
    1cf2:	0e 94 16 13 	call	0x262c	; 0x262c <cos>
    1cf6:	6d 83       	std	Y+5, r22	; 0x05
    1cf8:	7e 83       	std	Y+6, r23	; 0x06
    1cfa:	8f 83       	std	Y+7, r24	; 0x07
    1cfc:	98 87       	std	Y+8, r25	; 0x08
    1cfe:	26 e0       	ldi	r18, 0x06	; 6
    1d00:	36 e4       	ldi	r19, 0x46	; 70
    1d02:	41 ec       	ldi	r20, 0xC1	; 193
    1d04:	54 e3       	ldi	r21, 0x34	; 52
    1d06:	c7 01       	movw	r24, r14
    1d08:	b6 01       	movw	r22, r12
    1d0a:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__mulsf3>
    1d0e:	9b 01       	movw	r18, r22
    1d10:	ac 01       	movw	r20, r24
    1d12:	62 e1       	ldi	r22, 0x12	; 18
    1d14:	73 e8       	ldi	r23, 0x83	; 131
    1d16:	8b eb       	ldi	r24, 0xBB	; 187
    1d18:	91 e4       	ldi	r25, 0x41	; 65
    1d1a:	0e 94 17 12 	call	0x242e	; 0x242e <__subsf3>
    1d1e:	25 e3       	ldi	r18, 0x35	; 53
    1d20:	3a ef       	ldi	r19, 0xFA	; 250
    1d22:	4e e8       	ldi	r20, 0x8E	; 142
    1d24:	5c e3       	ldi	r21, 0x3C	; 60
    1d26:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__mulsf3>
    1d2a:	6b 01       	movw	r12, r22
    1d2c:	7c 01       	movw	r14, r24
    1d2e:	0e 94 16 13 	call	0x262c	; 0x262c <cos>
    1d32:	2b 01       	movw	r4, r22
    1d34:	3c 01       	movw	r6, r24
    1d36:	c5 01       	movw	r24, r10
    1d38:	b4 01       	movw	r22, r8
    1d3a:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <sin>
    1d3e:	4b 01       	movw	r8, r22
    1d40:	5c 01       	movw	r10, r24
    1d42:	9b 01       	movw	r18, r22
    1d44:	ac 01       	movw	r20, r24
    1d46:	c3 01       	movw	r24, r6
    1d48:	b2 01       	movw	r22, r4
    1d4a:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__mulsf3>
    1d4e:	2d 81       	ldd	r18, Y+5	; 0x05
    1d50:	3e 81       	ldd	r19, Y+6	; 0x06
    1d52:	4f 81       	ldd	r20, Y+7	; 0x07
    1d54:	58 85       	ldd	r21, Y+8	; 0x08
    1d56:	0e 94 b2 12 	call	0x2564	; 0x2564 <atan2>
    1d5a:	20 ee       	ldi	r18, 0xE0	; 224
    1d5c:	3e e2       	ldi	r19, 0x2E	; 46
    1d5e:	45 e6       	ldi	r20, 0x65	; 101
    1d60:	52 e4       	ldi	r21, 0x42	; 66
    1d62:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__mulsf3>
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	40 e7       	ldi	r20, 0x70	; 112
    1d6c:	51 e4       	ldi	r21, 0x41	; 65
    1d6e:	0e 94 1b 13 	call	0x2636	; 0x2636 <__divsf3>
    1d72:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <fixHour>
    1d76:	2b 01       	movw	r4, r22
    1d78:	3c 01       	movw	r6, r24
    1d7a:	c7 01       	movw	r24, r14
    1d7c:	b6 01       	movw	r22, r12
    1d7e:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <sin>
    1d82:	9b 01       	movw	r18, r22
    1d84:	ac 01       	movw	r20, r24
    1d86:	c5 01       	movw	r24, r10
    1d88:	b4 01       	movw	r22, r8
    1d8a:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__mulsf3>
    1d8e:	0e 94 84 12 	call	0x2508	; 0x2508 <asin>
    1d92:	20 ee       	ldi	r18, 0xE0	; 224
    1d94:	3e e2       	ldi	r19, 0x2E	; 46
    1d96:	45 e6       	ldi	r20, 0x65	; 101
    1d98:	52 e4       	ldi	r21, 0x42	; 66
    1d9a:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__mulsf3>
    1d9e:	e9 85       	ldd	r30, Y+9	; 0x09
    1da0:	fa 85       	ldd	r31, Y+10	; 0x0a
    1da2:	60 83       	st	Z, r22
    1da4:	71 83       	std	Z+1, r23	; 0x01
    1da6:	82 83       	std	Z+2, r24	; 0x02
    1da8:	93 83       	std	Z+3, r25	; 0x03
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	40 e7       	ldi	r20, 0x70	; 112
    1db0:	51 e4       	ldi	r21, 0x41	; 65
    1db2:	69 81       	ldd	r22, Y+1	; 0x01
    1db4:	7a 81       	ldd	r23, Y+2	; 0x02
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dba:	0e 94 1b 13 	call	0x2636	; 0x2636 <__divsf3>
    1dbe:	a3 01       	movw	r20, r6
    1dc0:	92 01       	movw	r18, r4
    1dc2:	0e 94 17 12 	call	0x242e	; 0x242e <__subsf3>
    1dc6:	f8 01       	movw	r30, r16
    1dc8:	60 83       	st	Z, r22
    1dca:	71 83       	std	Z+1, r23	; 0x01
    1dcc:	82 83       	std	Z+2, r24	; 0x02
    1dce:	93 83       	std	Z+3, r25	; 0x03
    1dd0:	2a 96       	adiw	r28, 0x0a	; 10
    1dd2:	0f b6       	in	r0, 0x3f	; 63
    1dd4:	f8 94       	cli
    1dd6:	de bf       	out	0x3e, r29	; 62
    1dd8:	0f be       	out	0x3f, r0	; 63
    1dda:	cd bf       	out	0x3d, r28	; 61
    1ddc:	df 91       	pop	r29
    1dde:	cf 91       	pop	r28
    1de0:	1f 91       	pop	r17
    1de2:	0f 91       	pop	r16
    1de4:	ff 90       	pop	r15
    1de6:	ef 90       	pop	r14
    1de8:	df 90       	pop	r13
    1dea:	cf 90       	pop	r12
    1dec:	bf 90       	pop	r11
    1dee:	af 90       	pop	r10
    1df0:	9f 90       	pop	r9
    1df2:	8f 90       	pop	r8
    1df4:	7f 90       	pop	r7
    1df6:	6f 90       	pop	r6
    1df8:	5f 90       	pop	r5
    1dfa:	4f 90       	pop	r4
    1dfc:	08 95       	ret

00001dfe <hourAngle>:
    1dfe:	4f 92       	push	r4
    1e00:	5f 92       	push	r5
    1e02:	6f 92       	push	r6
    1e04:	7f 92       	push	r7
    1e06:	8f 92       	push	r8
    1e08:	9f 92       	push	r9
    1e0a:	af 92       	push	r10
    1e0c:	bf 92       	push	r11
    1e0e:	cf 92       	push	r12
    1e10:	df 92       	push	r13
    1e12:	ef 92       	push	r14
    1e14:	ff 92       	push	r15
    1e16:	0f 93       	push	r16
    1e18:	1f 93       	push	r17
    1e1a:	cf 93       	push	r28
    1e1c:	df 93       	push	r29
    1e1e:	cd b7       	in	r28, 0x3d	; 61
    1e20:	de b7       	in	r29, 0x3e	; 62
    1e22:	28 97       	sbiw	r28, 0x08	; 8
    1e24:	0f b6       	in	r0, 0x3f	; 63
    1e26:	f8 94       	cli
    1e28:	de bf       	out	0x3e, r29	; 62
    1e2a:	0f be       	out	0x3f, r0	; 63
    1e2c:	cd bf       	out	0x3d, r28	; 61
    1e2e:	4b 01       	movw	r8, r22
    1e30:	5c 01       	movw	r10, r24
    1e32:	29 83       	std	Y+1, r18	; 0x01
    1e34:	3a 83       	std	Y+2, r19	; 0x02
    1e36:	4b 83       	std	Y+3, r20	; 0x03
    1e38:	5c 83       	std	Y+4, r21	; 0x04
    1e3a:	c8 01       	movw	r24, r16
    1e3c:	b7 01       	movw	r22, r14
    1e3e:	90 58       	subi	r25, 0x80	; 128
    1e40:	25 e3       	ldi	r18, 0x35	; 53
    1e42:	3a ef       	ldi	r19, 0xFA	; 250
    1e44:	4e e8       	ldi	r20, 0x8E	; 142
    1e46:	5c e3       	ldi	r21, 0x3C	; 60
    1e48:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__mulsf3>
    1e4c:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <sin>
    1e50:	6d 83       	std	Y+5, r22	; 0x05
    1e52:	7e 83       	std	Y+6, r23	; 0x06
    1e54:	8f 83       	std	Y+7, r24	; 0x07
    1e56:	98 87       	std	Y+8, r25	; 0x08
    1e58:	25 e3       	ldi	r18, 0x35	; 53
    1e5a:	3a ef       	ldi	r19, 0xFA	; 250
    1e5c:	4e e8       	ldi	r20, 0x8E	; 142
    1e5e:	5c e3       	ldi	r21, 0x3C	; 60
    1e60:	c5 01       	movw	r24, r10
    1e62:	b4 01       	movw	r22, r8
    1e64:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__mulsf3>
    1e68:	4b 01       	movw	r8, r22
    1e6a:	5c 01       	movw	r10, r24
    1e6c:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <sin>
    1e70:	2b 01       	movw	r4, r22
    1e72:	3c 01       	movw	r6, r24
    1e74:	25 e3       	ldi	r18, 0x35	; 53
    1e76:	3a ef       	ldi	r19, 0xFA	; 250
    1e78:	4e e8       	ldi	r20, 0x8E	; 142
    1e7a:	5c e3       	ldi	r21, 0x3C	; 60
    1e7c:	69 81       	ldd	r22, Y+1	; 0x01
    1e7e:	7a 81       	ldd	r23, Y+2	; 0x02
    1e80:	8b 81       	ldd	r24, Y+3	; 0x03
    1e82:	9c 81       	ldd	r25, Y+4	; 0x04
    1e84:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__mulsf3>
    1e88:	6b 01       	movw	r12, r22
    1e8a:	7c 01       	movw	r14, r24
    1e8c:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <sin>
    1e90:	69 83       	std	Y+1, r22	; 0x01
    1e92:	7a 83       	std	Y+2, r23	; 0x02
    1e94:	8b 83       	std	Y+3, r24	; 0x03
    1e96:	9c 83       	std	Y+4, r25	; 0x04
    1e98:	c5 01       	movw	r24, r10
    1e9a:	b4 01       	movw	r22, r8
    1e9c:	0e 94 16 13 	call	0x262c	; 0x262c <cos>
    1ea0:	4b 01       	movw	r8, r22
    1ea2:	5c 01       	movw	r10, r24
    1ea4:	c7 01       	movw	r24, r14
    1ea6:	b6 01       	movw	r22, r12
    1ea8:	0e 94 16 13 	call	0x262c	; 0x262c <cos>
    1eac:	6b 01       	movw	r12, r22
    1eae:	7c 01       	movw	r14, r24
    1eb0:	29 81       	ldd	r18, Y+1	; 0x01
    1eb2:	3a 81       	ldd	r19, Y+2	; 0x02
    1eb4:	4b 81       	ldd	r20, Y+3	; 0x03
    1eb6:	5c 81       	ldd	r21, Y+4	; 0x04
    1eb8:	c3 01       	movw	r24, r6
    1eba:	b2 01       	movw	r22, r4
    1ebc:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__mulsf3>
    1ec0:	9b 01       	movw	r18, r22
    1ec2:	ac 01       	movw	r20, r24
    1ec4:	6d 81       	ldd	r22, Y+5	; 0x05
    1ec6:	7e 81       	ldd	r23, Y+6	; 0x06
    1ec8:	8f 81       	ldd	r24, Y+7	; 0x07
    1eca:	98 85       	ldd	r25, Y+8	; 0x08
    1ecc:	0e 94 17 12 	call	0x242e	; 0x242e <__subsf3>
    1ed0:	2b 01       	movw	r4, r22
    1ed2:	3c 01       	movw	r6, r24
    1ed4:	a7 01       	movw	r20, r14
    1ed6:	96 01       	movw	r18, r12
    1ed8:	c5 01       	movw	r24, r10
    1eda:	b4 01       	movw	r22, r8
    1edc:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__mulsf3>
    1ee0:	9b 01       	movw	r18, r22
    1ee2:	ac 01       	movw	r20, r24
    1ee4:	c3 01       	movw	r24, r6
    1ee6:	b2 01       	movw	r22, r4
    1ee8:	0e 94 1b 13 	call	0x2636	; 0x2636 <__divsf3>
    1eec:	0e 94 06 12 	call	0x240c	; 0x240c <acos>
    1ef0:	20 ee       	ldi	r18, 0xE0	; 224
    1ef2:	3e e2       	ldi	r19, 0x2E	; 46
    1ef4:	45 e6       	ldi	r20, 0x65	; 101
    1ef6:	52 e4       	ldi	r21, 0x42	; 66
    1ef8:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__mulsf3>
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	40 e7       	ldi	r20, 0x70	; 112
    1f02:	51 e4       	ldi	r21, 0x41	; 65
    1f04:	0e 94 1b 13 	call	0x2636	; 0x2636 <__divsf3>
    1f08:	28 96       	adiw	r28, 0x08	; 8
    1f0a:	0f b6       	in	r0, 0x3f	; 63
    1f0c:	f8 94       	cli
    1f0e:	de bf       	out	0x3e, r29	; 62
    1f10:	0f be       	out	0x3f, r0	; 63
    1f12:	cd bf       	out	0x3d, r28	; 61
    1f14:	df 91       	pop	r29
    1f16:	cf 91       	pop	r28
    1f18:	1f 91       	pop	r17
    1f1a:	0f 91       	pop	r16
    1f1c:	ff 90       	pop	r15
    1f1e:	ef 90       	pop	r14
    1f20:	df 90       	pop	r13
    1f22:	cf 90       	pop	r12
    1f24:	bf 90       	pop	r11
    1f26:	af 90       	pop	r10
    1f28:	9f 90       	pop	r9
    1f2a:	8f 90       	pop	r8
    1f2c:	7f 90       	pop	r7
    1f2e:	6f 90       	pop	r6
    1f30:	5f 90       	pop	r5
    1f32:	4f 90       	pop	r4
    1f34:	08 95       	ret

00001f36 <calcPrayers>:
void calcPrayers(
int year, int month, int day,
double lat, double lon,
int tzOffset, int dstOffset,
double times[5]
) {
    1f36:	2f 92       	push	r2
    1f38:	3f 92       	push	r3
    1f3a:	4f 92       	push	r4
    1f3c:	5f 92       	push	r5
    1f3e:	6f 92       	push	r6
    1f40:	7f 92       	push	r7
    1f42:	8f 92       	push	r8
    1f44:	9f 92       	push	r9
    1f46:	af 92       	push	r10
    1f48:	bf 92       	push	r11
    1f4a:	cf 92       	push	r12
    1f4c:	df 92       	push	r13
    1f4e:	ef 92       	push	r14
    1f50:	ff 92       	push	r15
    1f52:	0f 93       	push	r16
    1f54:	1f 93       	push	r17
    1f56:	cf 93       	push	r28
    1f58:	df 93       	push	r29
    1f5a:	cd b7       	in	r28, 0x3d	; 61
    1f5c:	de b7       	in	r29, 0x3e	; 62
    1f5e:	a0 97       	sbiw	r28, 0x20	; 32
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	f8 94       	cli
    1f64:	de bf       	out	0x3e, r29	; 62
    1f66:	0f be       	out	0x3f, r0	; 63
    1f68:	cd bf       	out	0x3d, r28	; 61
    1f6a:	0d 87       	std	Y+13, r16	; 0x0d
    1f6c:	1e 87       	std	Y+14, r17	; 0x0e
    1f6e:	2f 87       	std	Y+15, r18	; 0x0f
    1f70:	38 8b       	std	Y+16, r19	; 0x10
    1f72:	2d a8       	ldd	r2, Y+53	; 0x35
    1f74:	3e a8       	ldd	r3, Y+54	; 0x36
	double jd = julianDate(year, month, day);
    1f76:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <julianDate>
	double D, EoT;
	sunPosition(jd, &D, &EoT);
    1f7a:	9e 01       	movw	r18, r28
    1f7c:	2b 5f       	subi	r18, 0xFB	; 251
    1f7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f80:	ae 01       	movw	r20, r28
    1f82:	4f 5f       	subi	r20, 0xFF	; 255
    1f84:	5f 4f       	sbci	r21, 0xFF	; 255
    1f86:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <sunPosition>

	double noon = fixHour(12 + tzOffset + dstOffset - (lon/15.0) - EoT);
    1f8a:	b5 01       	movw	r22, r10
    1f8c:	64 5f       	subi	r22, 0xF4	; 244
    1f8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f90:	68 0d       	add	r22, r8
    1f92:	79 1d       	adc	r23, r9
    1f94:	07 2e       	mov	r0, r23
    1f96:	00 0c       	add	r0, r0
    1f98:	88 0b       	sbc	r24, r24
    1f9a:	99 0b       	sbc	r25, r25
    1f9c:	0e 94 c5 13 	call	0x278a	; 0x278a <__floatsisf>
    1fa0:	4b 01       	movw	r8, r22
    1fa2:	5c 01       	movw	r10, r24
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	40 e7       	ldi	r20, 0x70	; 112
    1faa:	51 e4       	ldi	r21, 0x41	; 65
    1fac:	c7 01       	movw	r24, r14
    1fae:	b6 01       	movw	r22, r12
    1fb0:	0e 94 1b 13 	call	0x2636	; 0x2636 <__divsf3>
    1fb4:	9b 01       	movw	r18, r22
    1fb6:	ac 01       	movw	r20, r24
    1fb8:	c5 01       	movw	r24, r10
    1fba:	b4 01       	movw	r22, r8
    1fbc:	0e 94 17 12 	call	0x242e	; 0x242e <__subsf3>
    1fc0:	2d 81       	ldd	r18, Y+5	; 0x05
    1fc2:	3e 81       	ldd	r19, Y+6	; 0x06
    1fc4:	4f 81       	ldd	r20, Y+7	; 0x07
    1fc6:	58 85       	ldd	r21, Y+8	; 0x08
    1fc8:	0e 94 17 12 	call	0x242e	; 0x242e <__subsf3>
    1fcc:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <fixHour>
    1fd0:	2b 01       	movw	r4, r22
    1fd2:	3c 01       	movw	r6, r24
	
	// Accurate Asr calculation based on sun altitude
	double phi = lat - D;
    1fd4:	89 80       	ldd	r8, Y+1	; 0x01
    1fd6:	9a 80       	ldd	r9, Y+2	; 0x02
    1fd8:	ab 80       	ldd	r10, Y+3	; 0x03
    1fda:	bc 80       	ldd	r11, Y+4	; 0x04
	double temp1 = 1.0 / (1.0 + tan(phi * DEG_TO_RAD));
    1fdc:	a5 01       	movw	r20, r10
    1fde:	94 01       	movw	r18, r8
    1fe0:	6d 85       	ldd	r22, Y+13	; 0x0d
    1fe2:	7e 85       	ldd	r23, Y+14	; 0x0e
    1fe4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fe6:	98 89       	ldd	r25, Y+16	; 0x10
    1fe8:	0e 94 17 12 	call	0x242e	; 0x242e <__subsf3>
    1fec:	25 e3       	ldi	r18, 0x35	; 53
    1fee:	3a ef       	ldi	r19, 0xFA	; 250
    1ff0:	4e e8       	ldi	r20, 0x8E	; 142
    1ff2:	5c e3       	ldi	r21, 0x3C	; 60
    1ff4:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__mulsf3>
    1ff8:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <tan>
	double alt = atan(temp1) * RAD_TO_DEG;
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	40 e8       	ldi	r20, 0x80	; 128
    2002:	5f e3       	ldi	r21, 0x3F	; 63
    2004:	0e 94 18 12 	call	0x2430	; 0x2430 <__addsf3>
    2008:	9b 01       	movw	r18, r22
    200a:	ac 01       	movw	r20, r24
    200c:	60 e0       	ldi	r22, 0x00	; 0
    200e:	70 e0       	ldi	r23, 0x00	; 0
    2010:	80 e8       	ldi	r24, 0x80	; 128
    2012:	9f e3       	ldi	r25, 0x3F	; 63
    2014:	0e 94 1b 13 	call	0x2636	; 0x2636 <__divsf3>
    2018:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <atan>

	double angle_alt = alt;
	double term = (sin(angle_alt * DEG_TO_RAD) - sin(D * DEG_TO_RAD) * sin(lat * DEG_TO_RAD)) /
    201c:	20 ee       	ldi	r18, 0xE0	; 224
    201e:	3e e2       	ldi	r19, 0x2E	; 46
    2020:	45 e6       	ldi	r20, 0x65	; 101
    2022:	52 e4       	ldi	r21, 0x42	; 66
    2024:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__mulsf3>
    2028:	25 e3       	ldi	r18, 0x35	; 53
    202a:	3a ef       	ldi	r19, 0xFA	; 250
    202c:	4e e8       	ldi	r20, 0x8E	; 142
    202e:	5c e3       	ldi	r21, 0x3C	; 60
    2030:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__mulsf3>
    2034:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <sin>
    2038:	69 8b       	std	Y+17, r22	; 0x11
    203a:	7a 8b       	std	Y+18, r23	; 0x12
    203c:	8b 8b       	std	Y+19, r24	; 0x13
    203e:	9c 8b       	std	Y+20, r25	; 0x14
    2040:	25 e3       	ldi	r18, 0x35	; 53
    2042:	3a ef       	ldi	r19, 0xFA	; 250
    2044:	4e e8       	ldi	r20, 0x8E	; 142
    2046:	5c e3       	ldi	r21, 0x3C	; 60
    2048:	c5 01       	movw	r24, r10
    204a:	b4 01       	movw	r22, r8
    204c:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__mulsf3>
    2050:	69 87       	std	Y+9, r22	; 0x09
    2052:	7a 87       	std	Y+10, r23	; 0x0a
    2054:	8b 87       	std	Y+11, r24	; 0x0b
    2056:	9c 87       	std	Y+12, r25	; 0x0c
    2058:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <sin>
    205c:	6d 8b       	std	Y+21, r22	; 0x15
    205e:	7e 8b       	std	Y+22, r23	; 0x16
    2060:	8f 8b       	std	Y+23, r24	; 0x17
    2062:	98 8f       	std	Y+24, r25	; 0x18
    2064:	25 e3       	ldi	r18, 0x35	; 53
    2066:	3a ef       	ldi	r19, 0xFA	; 250
    2068:	4e e8       	ldi	r20, 0x8E	; 142
    206a:	5c e3       	ldi	r21, 0x3C	; 60
    206c:	6d 85       	ldd	r22, Y+13	; 0x0d
    206e:	7e 85       	ldd	r23, Y+14	; 0x0e
    2070:	8f 85       	ldd	r24, Y+15	; 0x0f
    2072:	98 89       	ldd	r25, Y+16	; 0x10
    2074:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__mulsf3>
    2078:	6b 01       	movw	r12, r22
    207a:	7c 01       	movw	r14, r24
    207c:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <sin>
    2080:	69 8f       	std	Y+25, r22	; 0x19
    2082:	7a 8f       	std	Y+26, r23	; 0x1a
    2084:	8b 8f       	std	Y+27, r24	; 0x1b
    2086:	9c 8f       	std	Y+28, r25	; 0x1c
	(cos(D * DEG_TO_RAD) * cos(lat * DEG_TO_RAD));
    2088:	69 85       	ldd	r22, Y+9	; 0x09
    208a:	7a 85       	ldd	r23, Y+10	; 0x0a
    208c:	8b 85       	ldd	r24, Y+11	; 0x0b
    208e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2090:	0e 94 16 13 	call	0x262c	; 0x262c <cos>
    2094:	69 87       	std	Y+9, r22	; 0x09
    2096:	7a 87       	std	Y+10, r23	; 0x0a
    2098:	8b 87       	std	Y+11, r24	; 0x0b
    209a:	9c 87       	std	Y+12, r25	; 0x0c
    209c:	c7 01       	movw	r24, r14
    209e:	b6 01       	movw	r22, r12
    20a0:	0e 94 16 13 	call	0x262c	; 0x262c <cos>
    20a4:	6d 8f       	std	Y+29, r22	; 0x1d
    20a6:	7e 8f       	std	Y+30, r23	; 0x1e
    20a8:	8f 8f       	std	Y+31, r24	; 0x1f
    20aa:	98 a3       	std	Y+32, r25	; 0x20
	term = fmin(fmax(term, -1.0), 1.0);  // clamp to avoid acos domain error
    20ac:	29 8d       	ldd	r18, Y+25	; 0x19
    20ae:	3a 8d       	ldd	r19, Y+26	; 0x1a
    20b0:	4b 8d       	ldd	r20, Y+27	; 0x1b
    20b2:	5c 8d       	ldd	r21, Y+28	; 0x1c
    20b4:	6d 89       	ldd	r22, Y+21	; 0x15
    20b6:	7e 89       	ldd	r23, Y+22	; 0x16
    20b8:	8f 89       	ldd	r24, Y+23	; 0x17
    20ba:	98 8d       	ldd	r25, Y+24	; 0x18
    20bc:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__mulsf3>
    20c0:	9b 01       	movw	r18, r22
    20c2:	ac 01       	movw	r20, r24
    20c4:	69 89       	ldd	r22, Y+17	; 0x11
    20c6:	7a 89       	ldd	r23, Y+18	; 0x12
    20c8:	8b 89       	ldd	r24, Y+19	; 0x13
    20ca:	9c 89       	ldd	r25, Y+20	; 0x14
    20cc:	0e 94 17 12 	call	0x242e	; 0x242e <__subsf3>
    20d0:	6b 01       	movw	r12, r22
    20d2:	7c 01       	movw	r14, r24
    20d4:	2d 8d       	ldd	r18, Y+29	; 0x1d
    20d6:	3e 8d       	ldd	r19, Y+30	; 0x1e
    20d8:	4f 8d       	ldd	r20, Y+31	; 0x1f
    20da:	58 a1       	ldd	r21, Y+32	; 0x20
    20dc:	69 85       	ldd	r22, Y+9	; 0x09
    20de:	7a 85       	ldd	r23, Y+10	; 0x0a
    20e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    20e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    20e4:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__mulsf3>
    20e8:	9b 01       	movw	r18, r22
    20ea:	ac 01       	movw	r20, r24
    20ec:	c7 01       	movw	r24, r14
    20ee:	b6 01       	movw	r22, r12
    20f0:	0e 94 1b 13 	call	0x2636	; 0x2636 <__divsf3>
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	40 e8       	ldi	r20, 0x80	; 128
    20fa:	5f eb       	ldi	r21, 0xBF	; 191
    20fc:	0e 94 17 14 	call	0x282e	; 0x282e <fmax>
    2100:	20 e0       	ldi	r18, 0x00	; 0
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	40 e8       	ldi	r20, 0x80	; 128
    2106:	5f e3       	ldi	r21, 0x3F	; 63
    2108:	0e 94 36 14 	call	0x286c	; 0x286c <fmin>
	double asr_ha = acos(term) * RAD_TO_DEG / 15.0;
    210c:	0e 94 06 12 	call	0x240c	; 0x240c <acos>
    2110:	69 87       	std	Y+9, r22	; 0x09
    2112:	7a 87       	std	Y+10, r23	; 0x0a
    2114:	8b 87       	std	Y+11, r24	; 0x0b
    2116:	9c 87       	std	Y+12, r25	; 0x0c
	
	times[0] = fixHour(noon - hourAngle(lat, D, ANGLE_FAJR));
    2118:	e1 2c       	mov	r14, r1
    211a:	f1 2c       	mov	r15, r1
    211c:	0c e9       	ldi	r16, 0x9C	; 156
    211e:	11 e4       	ldi	r17, 0x41	; 65
    2120:	a5 01       	movw	r20, r10
    2122:	94 01       	movw	r18, r8
    2124:	6d 85       	ldd	r22, Y+13	; 0x0d
    2126:	7e 85       	ldd	r23, Y+14	; 0x0e
    2128:	8f 85       	ldd	r24, Y+15	; 0x0f
    212a:	98 89       	ldd	r25, Y+16	; 0x10
    212c:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <hourAngle>
    2130:	9b 01       	movw	r18, r22
    2132:	ac 01       	movw	r20, r24
    2134:	c3 01       	movw	r24, r6
    2136:	b2 01       	movw	r22, r4
    2138:	0e 94 17 12 	call	0x242e	; 0x242e <__subsf3>
    213c:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <fixHour>
    2140:	f1 01       	movw	r30, r2
    2142:	60 83       	st	Z, r22
    2144:	71 83       	std	Z+1, r23	; 0x01
    2146:	82 83       	std	Z+2, r24	; 0x02
    2148:	93 83       	std	Z+3, r25	; 0x03
	times[1] = noon;  // Dhuhr
    214a:	44 82       	std	Z+4, r4	; 0x04
    214c:	55 82       	std	Z+5, r5	; 0x05
    214e:	66 82       	std	Z+6, r6	; 0x06
    2150:	77 82       	std	Z+7, r7	; 0x07
	times[2] = fixHour(noon + asr_ha);  // Asr
    2152:	20 ee       	ldi	r18, 0xE0	; 224
    2154:	3e e2       	ldi	r19, 0x2E	; 46
    2156:	45 e6       	ldi	r20, 0x65	; 101
    2158:	52 e4       	ldi	r21, 0x42	; 66
    215a:	69 85       	ldd	r22, Y+9	; 0x09
    215c:	7a 85       	ldd	r23, Y+10	; 0x0a
    215e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2160:	9c 85       	ldd	r25, Y+12	; 0x0c
    2162:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__mulsf3>
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	40 e7       	ldi	r20, 0x70	; 112
    216c:	51 e4       	ldi	r21, 0x41	; 65
    216e:	0e 94 1b 13 	call	0x2636	; 0x2636 <__divsf3>
    2172:	a3 01       	movw	r20, r6
    2174:	92 01       	movw	r18, r4
    2176:	0e 94 18 12 	call	0x2430	; 0x2430 <__addsf3>
    217a:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <fixHour>
    217e:	f1 01       	movw	r30, r2
    2180:	60 87       	std	Z+8, r22	; 0x08
    2182:	71 87       	std	Z+9, r23	; 0x09
    2184:	82 87       	std	Z+10, r24	; 0x0a
    2186:	93 87       	std	Z+11, r25	; 0x0b
	times[3] = fixHour(noon + hourAngle(lat, D, SUNSET)); // Maghrib
    2188:	1d e7       	ldi	r17, 0x7D	; 125
    218a:	e1 2e       	mov	r14, r17
    218c:	1f e3       	ldi	r17, 0x3F	; 63
    218e:	f1 2e       	mov	r15, r17
    2190:	05 e5       	ldi	r16, 0x55	; 85
    2192:	a5 01       	movw	r20, r10
    2194:	94 01       	movw	r18, r8
    2196:	6d 85       	ldd	r22, Y+13	; 0x0d
    2198:	7e 85       	ldd	r23, Y+14	; 0x0e
    219a:	8f 85       	ldd	r24, Y+15	; 0x0f
    219c:	98 89       	ldd	r25, Y+16	; 0x10
    219e:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <hourAngle>
    21a2:	9b 01       	movw	r18, r22
    21a4:	ac 01       	movw	r20, r24
    21a6:	c3 01       	movw	r24, r6
    21a8:	b2 01       	movw	r22, r4
    21aa:	0e 94 18 12 	call	0x2430	; 0x2430 <__addsf3>
    21ae:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <fixHour>
    21b2:	f1 01       	movw	r30, r2
    21b4:	64 87       	std	Z+12, r22	; 0x0c
    21b6:	75 87       	std	Z+13, r23	; 0x0d
    21b8:	86 87       	std	Z+14, r24	; 0x0e
    21ba:	97 87       	std	Z+15, r25	; 0x0f
	times[4] = fixHour(noon + hourAngle(lat, D, ANGLE_ISHA));
    21bc:	e1 2c       	mov	r14, r1
    21be:	f1 2c       	mov	r15, r1
    21c0:	0c e8       	ldi	r16, 0x8C	; 140
    21c2:	11 e4       	ldi	r17, 0x41	; 65
    21c4:	a5 01       	movw	r20, r10
    21c6:	94 01       	movw	r18, r8
    21c8:	6d 85       	ldd	r22, Y+13	; 0x0d
    21ca:	7e 85       	ldd	r23, Y+14	; 0x0e
    21cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ce:	98 89       	ldd	r25, Y+16	; 0x10
    21d0:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <hourAngle>
    21d4:	9b 01       	movw	r18, r22
    21d6:	ac 01       	movw	r20, r24
    21d8:	c3 01       	movw	r24, r6
    21da:	b2 01       	movw	r22, r4
    21dc:	0e 94 18 12 	call	0x2430	; 0x2430 <__addsf3>
    21e0:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <fixHour>
    21e4:	f1 01       	movw	r30, r2
    21e6:	60 8b       	std	Z+16, r22	; 0x10
    21e8:	71 8b       	std	Z+17, r23	; 0x11
    21ea:	82 8b       	std	Z+18, r24	; 0x12
    21ec:	93 8b       	std	Z+19, r25	; 0x13
    21ee:	a0 96       	adiw	r28, 0x20	; 32
    21f0:	0f b6       	in	r0, 0x3f	; 63
    21f2:	f8 94       	cli
    21f4:	de bf       	out	0x3e, r29	; 62
    21f6:	0f be       	out	0x3f, r0	; 63
    21f8:	cd bf       	out	0x3d, r28	; 61
    21fa:	df 91       	pop	r29
    21fc:	cf 91       	pop	r28
    21fe:	1f 91       	pop	r17
    2200:	0f 91       	pop	r16
    2202:	ff 90       	pop	r15
    2204:	ef 90       	pop	r14
    2206:	df 90       	pop	r13
    2208:	cf 90       	pop	r12
    220a:	bf 90       	pop	r11
    220c:	af 90       	pop	r10
    220e:	9f 90       	pop	r9
    2210:	8f 90       	pop	r8
    2212:	7f 90       	pop	r7
    2214:	6f 90       	pop	r6
    2216:	5f 90       	pop	r5
    2218:	4f 90       	pop	r4
    221a:	3f 90       	pop	r3
    221c:	2f 90       	pop	r2
    221e:	08 95       	ret

00002220 <seven_seg_vinit>:
 */ 
#include <avr/io.h>
#include "DIO.h"
void seven_seg_vinit(unsigned char port_name)
{
	DIO_set_port_direction(port_name,0xFF);
    2220:	6f ef       	ldi	r22, 0xFF	; 255
    2222:	0e 94 c0 03 	call	0x780	; 0x780 <DIO_set_port_direction>
    2226:	08 95       	ret

00002228 <seven_seg_write>:
}

void seven_seg_write(unsigned char portname,unsigned char number)
{
    2228:	cf 93       	push	r28
    222a:	df 93       	push	r29
    222c:	cd b7       	in	r28, 0x3d	; 61
    222e:	de b7       	in	r29, 0x3e	; 62
    2230:	2a 97       	sbiw	r28, 0x0a	; 10
    2232:	0f b6       	in	r0, 0x3f	; 63
    2234:	f8 94       	cli
    2236:	de bf       	out	0x3e, r29	; 62
    2238:	0f be       	out	0x3f, r0	; 63
    223a:	cd bf       	out	0x3d, r28	; 61
unsigned char arr[]={ 0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
    223c:	9a e0       	ldi	r25, 0x0A	; 10
    223e:	e3 e6       	ldi	r30, 0x63	; 99
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	de 01       	movw	r26, r28
    2244:	11 96       	adiw	r26, 0x01	; 1
    2246:	01 90       	ld	r0, Z+
    2248:	0d 92       	st	X+, r0
    224a:	9a 95       	dec	r25
    224c:	e1 f7       	brne	.-8      	; 0x2246 <seven_seg_write+0x1e>

DIO_write_port(portname,arr[number]);
    224e:	e1 e0       	ldi	r30, 0x01	; 1
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	ec 0f       	add	r30, r28
    2254:	fd 1f       	adc	r31, r29
    2256:	e6 0f       	add	r30, r22
    2258:	f1 1d       	adc	r31, r1
    225a:	60 81       	ld	r22, Z
    225c:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <DIO_write_port>
}
    2260:	2a 96       	adiw	r28, 0x0a	; 10
    2262:	0f b6       	in	r0, 0x3f	; 63
    2264:	f8 94       	cli
    2266:	de bf       	out	0x3e, r29	; 62
    2268:	0f be       	out	0x3f, r0	; 63
    226a:	cd bf       	out	0x3d, r28	; 61
    226c:	df 91       	pop	r29
    226e:	cf 91       	pop	r28
    2270:	08 95       	ret

00002272 <seven_seg_vinitT>:
void seven_seg_vinitT(void)
{
	DIO_vsetPINDir('A', 0, 1);
    2272:	41 e0       	ldi	r20, 0x01	; 1
    2274:	60 e0       	ldi	r22, 0x00	; 0
    2276:	81 e4       	ldi	r24, 0x41	; 65
    2278:	0e 94 8b 02 	call	0x516	; 0x516 <DIO_vsetPINDir>
	DIO_vsetPINDir('A', 1, 1);
    227c:	41 e0       	ldi	r20, 0x01	; 1
    227e:	61 e0       	ldi	r22, 0x01	; 1
    2280:	81 e4       	ldi	r24, 0x41	; 65
    2282:	0e 94 8b 02 	call	0x516	; 0x516 <DIO_vsetPINDir>
	DIO_vsetPINDir('A', 2, 1);
    2286:	41 e0       	ldi	r20, 0x01	; 1
    2288:	62 e0       	ldi	r22, 0x02	; 2
    228a:	81 e4       	ldi	r24, 0x41	; 65
    228c:	0e 94 8b 02 	call	0x516	; 0x516 <DIO_vsetPINDir>
	DIO_vsetPINDir('A', 3, 1);
    2290:	41 e0       	ldi	r20, 0x01	; 1
    2292:	63 e0       	ldi	r22, 0x03	; 3
    2294:	81 e4       	ldi	r24, 0x41	; 65
    2296:	0e 94 8b 02 	call	0x516	; 0x516 <DIO_vsetPINDir>
	DIO_vsetPINDir('A', 4, 1);
    229a:	41 e0       	ldi	r20, 0x01	; 1
    229c:	64 e0       	ldi	r22, 0x04	; 4
    229e:	81 e4       	ldi	r24, 0x41	; 65
    22a0:	0e 94 8b 02 	call	0x516	; 0x516 <DIO_vsetPINDir>
	DIO_vsetPINDir('A', 5, 1);
    22a4:	41 e0       	ldi	r20, 0x01	; 1
    22a6:	65 e0       	ldi	r22, 0x05	; 5
    22a8:	81 e4       	ldi	r24, 0x41	; 65
    22aa:	0e 94 8b 02 	call	0x516	; 0x516 <DIO_vsetPINDir>
	DIO_vsetPINDir('A', 6, 1);
    22ae:	41 e0       	ldi	r20, 0x01	; 1
    22b0:	66 e0       	ldi	r22, 0x06	; 6
    22b2:	81 e4       	ldi	r24, 0x41	; 65
    22b4:	0e 94 8b 02 	call	0x516	; 0x516 <DIO_vsetPINDir>
    22b8:	08 95       	ret

000022ba <seven_seg_writeT>:
}

void seven_seg_writeT(unsigned char number)
{
    22ba:	cf 93       	push	r28
    22bc:	df 93       	push	r29
    22be:	cd b7       	in	r28, 0x3d	; 61
    22c0:	de b7       	in	r29, 0x3e	; 62
    22c2:	2a 97       	sbiw	r28, 0x0a	; 10
    22c4:	0f b6       	in	r0, 0x3f	; 63
    22c6:	f8 94       	cli
    22c8:	de bf       	out	0x3e, r29	; 62
    22ca:	0f be       	out	0x3f, r0	; 63
    22cc:	cd bf       	out	0x3d, r28	; 61
	unsigned char arr[] = {
    22ce:	9a e0       	ldi	r25, 0x0A	; 10
    22d0:	e3 e6       	ldi	r30, 0x63	; 99
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	de 01       	movw	r26, r28
    22d6:	11 96       	adiw	r26, 0x01	; 1
    22d8:	01 90       	ld	r0, Z+
    22da:	0d 92       	st	X+, r0
    22dc:	9a 95       	dec	r25
    22de:	e1 f7       	brne	.-8      	; 0x22d8 <seven_seg_writeT+0x1e>
		0x07, // 7
		0x7F, // 8
		0x6F  // 9
	};

	if (number < 10)
    22e0:	8a 30       	cpi	r24, 0x0A	; 10
    22e2:	48 f4       	brcc	.+18     	; 0x22f6 <seven_seg_writeT+0x3c>
	{
		PORTA = (PORTA & 0x80) | arr[number]; // ????? ??? ?? A7 ?? ???????? ????? ?????
    22e4:	2b b3       	in	r18, 0x1b	; 27
    22e6:	20 78       	andi	r18, 0x80	; 128
    22e8:	fe 01       	movw	r30, r28
    22ea:	e8 0f       	add	r30, r24
    22ec:	f1 1d       	adc	r31, r1
    22ee:	91 81       	ldd	r25, Z+1	; 0x01
    22f0:	82 2f       	mov	r24, r18
    22f2:	89 2b       	or	r24, r25
    22f4:	8b bb       	out	0x1b, r24	; 27
	}
    22f6:	2a 96       	adiw	r28, 0x0a	; 10
    22f8:	0f b6       	in	r0, 0x3f	; 63
    22fa:	f8 94       	cli
    22fc:	de bf       	out	0x3e, r29	; 62
    22fe:	0f be       	out	0x3f, r0	; 63
    2300:	cd bf       	out	0x3d, r28	; 61
    2302:	df 91       	pop	r29
    2304:	cf 91       	pop	r28
    2306:	08 95       	ret

00002308 <shift_register_init>:
#define ST_CP_PORT7 'C'
#define ST_CP_PIN7  4

void shift_register_init()
{
	DIO_vsetPINDir(DS_PORT, DS_PIN, 1);     // ???? Output
    2308:	41 e0       	ldi	r20, 0x01	; 1
    230a:	65 e0       	ldi	r22, 0x05	; 5
    230c:	83 e4       	ldi	r24, 0x43	; 67
    230e:	0e 94 8b 02 	call	0x516	; 0x516 <DIO_vsetPINDir>
	DIO_vsetPINDir(SH_CP_PORT, SH_CP_PIN, 1); // ???? Output
    2312:	41 e0       	ldi	r20, 0x01	; 1
    2314:	66 e0       	ldi	r22, 0x06	; 6
    2316:	83 e4       	ldi	r24, 0x43	; 67
    2318:	0e 94 8b 02 	call	0x516	; 0x516 <DIO_vsetPINDir>
	DIO_vsetPINDir(ST_CP_PORT, ST_CP_PIN, 1); // ???? Output
    231c:	41 e0       	ldi	r20, 0x01	; 1
    231e:	67 e0       	ldi	r22, 0x07	; 7
    2320:	83 e4       	ldi	r24, 0x43	; 67
    2322:	0e 94 8b 02 	call	0x516	; 0x516 <DIO_vsetPINDir>
    2326:	08 95       	ret

00002328 <shift_register_send_16bit>:
}
void shift_register_send_16bit(uint16_t data) {
    2328:	0f 93       	push	r16
    232a:	1f 93       	push	r17
    232c:	cf 93       	push	r28
    232e:	df 93       	push	r29
    2330:	8c 01       	movw	r16, r24
	for (int i = 15; i >= 0; i--) {
    2332:	cf e0       	ldi	r28, 0x0F	; 15
    2334:	d0 e0       	ldi	r29, 0x00	; 0
		DIO_write(DS_PORT, DS_PIN, (data >> i) & 0x01);
    2336:	a8 01       	movw	r20, r16
    2338:	0c 2e       	mov	r0, r28
    233a:	02 c0       	rjmp	.+4      	; 0x2340 <shift_register_send_16bit+0x18>
    233c:	56 95       	lsr	r21
    233e:	47 95       	ror	r20
    2340:	0a 94       	dec	r0
    2342:	e2 f7       	brpl	.-8      	; 0x233c <shift_register_send_16bit+0x14>
    2344:	41 70       	andi	r20, 0x01	; 1
    2346:	65 e0       	ldi	r22, 0x05	; 5
    2348:	83 e4       	ldi	r24, 0x43	; 67
    234a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DIO_write>

		// Pulse the shift clock
		DIO_write(SH_CP_PORT, SH_CP_PIN, 1);
    234e:	41 e0       	ldi	r20, 0x01	; 1
    2350:	66 e0       	ldi	r22, 0x06	; 6
    2352:	83 e4       	ldi	r24, 0x43	; 67
    2354:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2358:	00 00       	nop
		_delay_us(1);
		DIO_write(SH_CP_PORT, SH_CP_PIN, 0);
    235a:	40 e0       	ldi	r20, 0x00	; 0
    235c:	66 e0       	ldi	r22, 0x06	; 6
    235e:	83 e4       	ldi	r24, 0x43	; 67
    2360:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DIO_write>
    2364:	00 00       	nop
	DIO_vsetPINDir(DS_PORT, DS_PIN, 1);     // ???? Output
	DIO_vsetPINDir(SH_CP_PORT, SH_CP_PIN, 1); // ???? Output
	DIO_vsetPINDir(ST_CP_PORT, ST_CP_PIN, 1); // ???? Output
}
void shift_register_send_16bit(uint16_t data) {
	for (int i = 15; i >= 0; i--) {
    2366:	21 97       	sbiw	r28, 0x01	; 1
    2368:	30 f7       	brcc	.-52     	; 0x2336 <shift_register_send_16bit+0xe>
		DIO_write(SH_CP_PORT, SH_CP_PIN, 0);
		_delay_us(1);
	}

	// Latch to output
	DIO_write(ST_CP_PORT, ST_CP_PIN, 1);
    236a:	41 e0       	ldi	r20, 0x01	; 1
    236c:	67 e0       	ldi	r22, 0x07	; 7
    236e:	83 e4       	ldi	r24, 0x43	; 67
    2370:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DIO_write>
    2374:	00 00       	nop
	_delay_us(1);
	DIO_write(ST_CP_PORT, ST_CP_PIN, 0);
    2376:	40 e0       	ldi	r20, 0x00	; 0
    2378:	67 e0       	ldi	r22, 0x07	; 7
    237a:	83 e4       	ldi	r24, 0x43	; 67
    237c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DIO_write>
}
    2380:	df 91       	pop	r29
    2382:	cf 91       	pop	r28
    2384:	1f 91       	pop	r17
    2386:	0f 91       	pop	r16
    2388:	08 95       	ret

0000238a <shift_registers_init16>:

void shift_registers_init16(void) {
	DIO_vsetPINDir(DS_PORT7, DS_PIN7, 1);       // DS (Data)
    238a:	41 e0       	ldi	r20, 0x01	; 1
    238c:	63 e0       	ldi	r22, 0x03	; 3
    238e:	83 e4       	ldi	r24, 0x43	; 67
    2390:	0e 94 8b 02 	call	0x516	; 0x516 <DIO_vsetPINDir>
	DIO_vsetPINDir(SH_CP_PORT7, SH_CP_PIN7, 1); // SH_CP (Shift Clock)
    2394:	41 e0       	ldi	r20, 0x01	; 1
    2396:	62 e0       	ldi	r22, 0x02	; 2
    2398:	83 e4       	ldi	r24, 0x43	; 67
    239a:	0e 94 8b 02 	call	0x516	; 0x516 <DIO_vsetPINDir>
	DIO_vsetPINDir(ST_CP_PORT7, ST_CP_PIN7, 1); // ST_CP (Latch)
    239e:	41 e0       	ldi	r20, 0x01	; 1
    23a0:	64 e0       	ldi	r22, 0x04	; 4
    23a2:	83 e4       	ldi	r24, 0x43	; 67
    23a4:	0e 94 8b 02 	call	0x516	; 0x516 <DIO_vsetPINDir>
    23a8:	08 95       	ret

000023aa <shift_register_send_digit_select16>:
}

void shift_register_send_digit_select16(uint16_t data) {
    23aa:	0f 93       	push	r16
    23ac:	1f 93       	push	r17
    23ae:	cf 93       	push	r28
    23b0:	df 93       	push	r29
    23b2:	8c 01       	movw	r16, r24
	for (int i = 15; i >= 0; i--) {
    23b4:	cf e0       	ldi	r28, 0x0F	; 15
    23b6:	d0 e0       	ldi	r29, 0x00	; 0
		DIO_write(DS_PORT7, DS_PIN7, (data >> i) & 0x01); // Send bit
    23b8:	a8 01       	movw	r20, r16
    23ba:	0c 2e       	mov	r0, r28
    23bc:	02 c0       	rjmp	.+4      	; 0x23c2 <shift_register_send_digit_select16+0x18>
    23be:	56 95       	lsr	r21
    23c0:	47 95       	ror	r20
    23c2:	0a 94       	dec	r0
    23c4:	e2 f7       	brpl	.-8      	; 0x23be <shift_register_send_digit_select16+0x14>
    23c6:	41 70       	andi	r20, 0x01	; 1
    23c8:	63 e0       	ldi	r22, 0x03	; 3
    23ca:	83 e4       	ldi	r24, 0x43	; 67
    23cc:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DIO_write>
		DIO_write(SH_CP_PORT7, SH_CP_PIN7, 1); _delay_us(1);
    23d0:	41 e0       	ldi	r20, 0x01	; 1
    23d2:	62 e0       	ldi	r22, 0x02	; 2
    23d4:	83 e4       	ldi	r24, 0x43	; 67
    23d6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DIO_write>
    23da:	00 00       	nop
		DIO_write(SH_CP_PORT7, SH_CP_PIN7, 0); _delay_us(1);
    23dc:	40 e0       	ldi	r20, 0x00	; 0
    23de:	62 e0       	ldi	r22, 0x02	; 2
    23e0:	83 e4       	ldi	r24, 0x43	; 67
    23e2:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DIO_write>
    23e6:	00 00       	nop
	DIO_vsetPINDir(SH_CP_PORT7, SH_CP_PIN7, 1); // SH_CP (Shift Clock)
	DIO_vsetPINDir(ST_CP_PORT7, ST_CP_PIN7, 1); // ST_CP (Latch)
}

void shift_register_send_digit_select16(uint16_t data) {
	for (int i = 15; i >= 0; i--) {
    23e8:	21 97       	sbiw	r28, 0x01	; 1
    23ea:	30 f7       	brcc	.-52     	; 0x23b8 <shift_register_send_digit_select16+0xe>
		DIO_write(DS_PORT7, DS_PIN7, (data >> i) & 0x01); // Send bit
		DIO_write(SH_CP_PORT7, SH_CP_PIN7, 1); _delay_us(1);
		DIO_write(SH_CP_PORT7, SH_CP_PIN7, 0); _delay_us(1);
	}
	// Latch
	DIO_write(ST_CP_PORT7, ST_CP_PIN7, 1); _delay_us(1);
    23ec:	41 e0       	ldi	r20, 0x01	; 1
    23ee:	64 e0       	ldi	r22, 0x04	; 4
    23f0:	83 e4       	ldi	r24, 0x43	; 67
    23f2:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DIO_write>
    23f6:	00 00       	nop
	DIO_write(ST_CP_PORT7, ST_CP_PIN7, 0);
    23f8:	40 e0       	ldi	r20, 0x00	; 0
    23fa:	64 e0       	ldi	r22, 0x04	; 4
    23fc:	83 e4       	ldi	r24, 0x43	; 67
    23fe:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DIO_write>
    2402:	df 91       	pop	r29
    2404:	cf 91       	pop	r28
    2406:	1f 91       	pop	r17
    2408:	0f 91       	pop	r16
    240a:	08 95       	ret

0000240c <acos>:
    240c:	9f 93       	push	r25
    240e:	9f 77       	andi	r25, 0x7F	; 127
    2410:	0e 94 a9 14 	call	0x2952	; 0x2952 <__fp_arccos>
    2414:	0f 90       	pop	r0
    2416:	00 20       	and	r0, r0
    2418:	42 f4       	brpl	.+16     	; 0x242a <acos+0x1e>
    241a:	90 58       	subi	r25, 0x80	; 128
    241c:	a2 ea       	ldi	r26, 0xA2	; 162
    241e:	2a ed       	ldi	r18, 0xDA	; 218
    2420:	3f e0       	ldi	r19, 0x0F	; 15
    2422:	49 e4       	ldi	r20, 0x49	; 73
    2424:	50 e4       	ldi	r21, 0x40	; 64
    2426:	0e 94 2f 12 	call	0x245e	; 0x245e <__addsf3x>
    242a:	0c 94 93 15 	jmp	0x2b26	; 0x2b26 <__fp_round>

0000242e <__subsf3>:
    242e:	50 58       	subi	r21, 0x80	; 128

00002430 <__addsf3>:
    2430:	bb 27       	eor	r27, r27
    2432:	aa 27       	eor	r26, r26
    2434:	0e 94 2f 12 	call	0x245e	; 0x245e <__addsf3x>
    2438:	0c 94 93 15 	jmp	0x2b26	; 0x2b26 <__fp_round>
    243c:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <__fp_pscA>
    2440:	38 f0       	brcs	.+14     	; 0x2450 <__addsf3+0x20>
    2442:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__fp_pscB>
    2446:	20 f0       	brcs	.+8      	; 0x2450 <__addsf3+0x20>
    2448:	39 f4       	brne	.+14     	; 0x2458 <__addsf3+0x28>
    244a:	9f 3f       	cpi	r25, 0xFF	; 255
    244c:	19 f4       	brne	.+6      	; 0x2454 <__addsf3+0x24>
    244e:	26 f4       	brtc	.+8      	; 0x2458 <__addsf3+0x28>
    2450:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <__fp_nan>
    2454:	0e f4       	brtc	.+2      	; 0x2458 <__addsf3+0x28>
    2456:	e0 95       	com	r30
    2458:	e7 fb       	bst	r30, 7
    245a:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__fp_inf>

0000245e <__addsf3x>:
    245e:	e9 2f       	mov	r30, r25
    2460:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fp_split3>
    2464:	58 f3       	brcs	.-42     	; 0x243c <__addsf3+0xc>
    2466:	ba 17       	cp	r27, r26
    2468:	62 07       	cpc	r22, r18
    246a:	73 07       	cpc	r23, r19
    246c:	84 07       	cpc	r24, r20
    246e:	95 07       	cpc	r25, r21
    2470:	20 f0       	brcs	.+8      	; 0x247a <__addsf3x+0x1c>
    2472:	79 f4       	brne	.+30     	; 0x2492 <__addsf3x+0x34>
    2474:	a6 f5       	brtc	.+104    	; 0x24de <__addsf3x+0x80>
    2476:	0c 94 f2 15 	jmp	0x2be4	; 0x2be4 <__fp_zero>
    247a:	0e f4       	brtc	.+2      	; 0x247e <__addsf3x+0x20>
    247c:	e0 95       	com	r30
    247e:	0b 2e       	mov	r0, r27
    2480:	ba 2f       	mov	r27, r26
    2482:	a0 2d       	mov	r26, r0
    2484:	0b 01       	movw	r0, r22
    2486:	b9 01       	movw	r22, r18
    2488:	90 01       	movw	r18, r0
    248a:	0c 01       	movw	r0, r24
    248c:	ca 01       	movw	r24, r20
    248e:	a0 01       	movw	r20, r0
    2490:	11 24       	eor	r1, r1
    2492:	ff 27       	eor	r31, r31
    2494:	59 1b       	sub	r21, r25
    2496:	99 f0       	breq	.+38     	; 0x24be <__addsf3x+0x60>
    2498:	59 3f       	cpi	r21, 0xF9	; 249
    249a:	50 f4       	brcc	.+20     	; 0x24b0 <__addsf3x+0x52>
    249c:	50 3e       	cpi	r21, 0xE0	; 224
    249e:	68 f1       	brcs	.+90     	; 0x24fa <__addsf3x+0x9c>
    24a0:	1a 16       	cp	r1, r26
    24a2:	f0 40       	sbci	r31, 0x00	; 0
    24a4:	a2 2f       	mov	r26, r18
    24a6:	23 2f       	mov	r18, r19
    24a8:	34 2f       	mov	r19, r20
    24aa:	44 27       	eor	r20, r20
    24ac:	58 5f       	subi	r21, 0xF8	; 248
    24ae:	f3 cf       	rjmp	.-26     	; 0x2496 <__addsf3x+0x38>
    24b0:	46 95       	lsr	r20
    24b2:	37 95       	ror	r19
    24b4:	27 95       	ror	r18
    24b6:	a7 95       	ror	r26
    24b8:	f0 40       	sbci	r31, 0x00	; 0
    24ba:	53 95       	inc	r21
    24bc:	c9 f7       	brne	.-14     	; 0x24b0 <__addsf3x+0x52>
    24be:	7e f4       	brtc	.+30     	; 0x24de <__addsf3x+0x80>
    24c0:	1f 16       	cp	r1, r31
    24c2:	ba 0b       	sbc	r27, r26
    24c4:	62 0b       	sbc	r22, r18
    24c6:	73 0b       	sbc	r23, r19
    24c8:	84 0b       	sbc	r24, r20
    24ca:	ba f0       	brmi	.+46     	; 0x24fa <__addsf3x+0x9c>
    24cc:	91 50       	subi	r25, 0x01	; 1
    24ce:	a1 f0       	breq	.+40     	; 0x24f8 <__addsf3x+0x9a>
    24d0:	ff 0f       	add	r31, r31
    24d2:	bb 1f       	adc	r27, r27
    24d4:	66 1f       	adc	r22, r22
    24d6:	77 1f       	adc	r23, r23
    24d8:	88 1f       	adc	r24, r24
    24da:	c2 f7       	brpl	.-16     	; 0x24cc <__addsf3x+0x6e>
    24dc:	0e c0       	rjmp	.+28     	; 0x24fa <__addsf3x+0x9c>
    24de:	ba 0f       	add	r27, r26
    24e0:	62 1f       	adc	r22, r18
    24e2:	73 1f       	adc	r23, r19
    24e4:	84 1f       	adc	r24, r20
    24e6:	48 f4       	brcc	.+18     	; 0x24fa <__addsf3x+0x9c>
    24e8:	87 95       	ror	r24
    24ea:	77 95       	ror	r23
    24ec:	67 95       	ror	r22
    24ee:	b7 95       	ror	r27
    24f0:	f7 95       	ror	r31
    24f2:	9e 3f       	cpi	r25, 0xFE	; 254
    24f4:	08 f0       	brcs	.+2      	; 0x24f8 <__addsf3x+0x9a>
    24f6:	b0 cf       	rjmp	.-160    	; 0x2458 <__addsf3+0x28>
    24f8:	93 95       	inc	r25
    24fa:	88 0f       	add	r24, r24
    24fc:	08 f0       	brcs	.+2      	; 0x2500 <__addsf3x+0xa2>
    24fe:	99 27       	eor	r25, r25
    2500:	ee 0f       	add	r30, r30
    2502:	97 95       	ror	r25
    2504:	87 95       	ror	r24
    2506:	08 95       	ret

00002508 <asin>:
    2508:	9f 93       	push	r25
    250a:	9f 77       	andi	r25, 0x7F	; 127
    250c:	ee e3       	ldi	r30, 0x3E	; 62
    250e:	89 37       	cpi	r24, 0x79	; 121
    2510:	9e 07       	cpc	r25, r30
    2512:	28 f4       	brcc	.+10     	; 0x251e <asin+0x16>
    2514:	e4 e5       	ldi	r30, 0x54	; 84
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <__fp_powsodd>
    251c:	0c c0       	rjmp	.+24     	; 0x2536 <asin+0x2e>
    251e:	0e 94 a9 14 	call	0x2952	; 0x2952 <__fp_arccos>
    2522:	90 58       	subi	r25, 0x80	; 128
    2524:	a2 ea       	ldi	r26, 0xA2	; 162
    2526:	2a ed       	ldi	r18, 0xDA	; 218
    2528:	3f e0       	ldi	r19, 0x0F	; 15
    252a:	49 ec       	ldi	r20, 0xC9	; 201
    252c:	5f e3       	ldi	r21, 0x3F	; 63
    252e:	0e 94 2f 12 	call	0x245e	; 0x245e <__addsf3x>
    2532:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__fp_round>
    2536:	0f 90       	pop	r0
    2538:	07 fc       	sbrc	r0, 7
    253a:	90 58       	subi	r25, 0x80	; 128
    253c:	08 95       	ret
    253e:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <__fp_pscA>
    2542:	60 f0       	brcs	.+24     	; 0x255c <asin+0x54>
    2544:	80 e8       	ldi	r24, 0x80	; 128
    2546:	91 e0       	ldi	r25, 0x01	; 1
    2548:	09 f4       	brne	.+2      	; 0x254c <asin+0x44>
    254a:	9e ef       	ldi	r25, 0xFE	; 254
    254c:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__fp_pscB>
    2550:	28 f0       	brcs	.+10     	; 0x255c <asin+0x54>
    2552:	40 e8       	ldi	r20, 0x80	; 128
    2554:	51 e0       	ldi	r21, 0x01	; 1
    2556:	71 f4       	brne	.+28     	; 0x2574 <atan2+0x10>
    2558:	5e ef       	ldi	r21, 0xFE	; 254
    255a:	0c c0       	rjmp	.+24     	; 0x2574 <atan2+0x10>
    255c:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <__fp_nan>
    2560:	0c 94 f2 15 	jmp	0x2be4	; 0x2be4 <__fp_zero>

00002564 <atan2>:
    2564:	e9 2f       	mov	r30, r25
    2566:	e0 78       	andi	r30, 0x80	; 128
    2568:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fp_split3>
    256c:	40 f3       	brcs	.-48     	; 0x253e <asin+0x36>
    256e:	09 2e       	mov	r0, r25
    2570:	05 2a       	or	r0, r21
    2572:	b1 f3       	breq	.-20     	; 0x2560 <asin+0x58>
    2574:	26 17       	cp	r18, r22
    2576:	37 07       	cpc	r19, r23
    2578:	48 07       	cpc	r20, r24
    257a:	59 07       	cpc	r21, r25
    257c:	38 f0       	brcs	.+14     	; 0x258c <atan2+0x28>
    257e:	0e 2e       	mov	r0, r30
    2580:	07 f8       	bld	r0, 7
    2582:	e0 25       	eor	r30, r0
    2584:	69 f0       	breq	.+26     	; 0x25a0 <atan2+0x3c>
    2586:	e0 25       	eor	r30, r0
    2588:	e0 64       	ori	r30, 0x40	; 64
    258a:	0a c0       	rjmp	.+20     	; 0x25a0 <atan2+0x3c>
    258c:	ef 63       	ori	r30, 0x3F	; 63
    258e:	07 f8       	bld	r0, 7
    2590:	00 94       	com	r0
    2592:	07 fa       	bst	r0, 7
    2594:	db 01       	movw	r26, r22
    2596:	b9 01       	movw	r22, r18
    2598:	9d 01       	movw	r18, r26
    259a:	dc 01       	movw	r26, r24
    259c:	ca 01       	movw	r24, r20
    259e:	ad 01       	movw	r20, r26
    25a0:	ef 93       	push	r30
    25a2:	0e 94 32 13 	call	0x2664	; 0x2664 <__divsf3_pse>
    25a6:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__fp_round>
    25aa:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <atan>
    25ae:	5f 91       	pop	r21
    25b0:	55 23       	and	r21, r21
    25b2:	39 f0       	breq	.+14     	; 0x25c2 <atan2+0x5e>
    25b4:	2b ed       	ldi	r18, 0xDB	; 219
    25b6:	3f e0       	ldi	r19, 0x0F	; 15
    25b8:	49 e4       	ldi	r20, 0x49	; 73
    25ba:	50 fd       	sbrc	r21, 0
    25bc:	49 ec       	ldi	r20, 0xC9	; 201
    25be:	0c 94 18 12 	jmp	0x2430	; 0x2430 <__addsf3>
    25c2:	08 95       	ret

000025c4 <atan>:
    25c4:	df 93       	push	r29
    25c6:	dd 27       	eor	r29, r29
    25c8:	b9 2f       	mov	r27, r25
    25ca:	bf 77       	andi	r27, 0x7F	; 127
    25cc:	40 e8       	ldi	r20, 0x80	; 128
    25ce:	5f e3       	ldi	r21, 0x3F	; 63
    25d0:	16 16       	cp	r1, r22
    25d2:	17 06       	cpc	r1, r23
    25d4:	48 07       	cpc	r20, r24
    25d6:	5b 07       	cpc	r21, r27
    25d8:	18 f4       	brcc	.+6      	; 0x25e0 <atan+0x1c>
    25da:	d9 2f       	mov	r29, r25
    25dc:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <inverse>
    25e0:	9f 93       	push	r25
    25e2:	8f 93       	push	r24
    25e4:	7f 93       	push	r23
    25e6:	6f 93       	push	r22
    25e8:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <square>
    25ec:	e8 e6       	ldi	r30, 0x68	; 104
    25ee:	f0 e0       	ldi	r31, 0x00	; 0
    25f0:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <__fp_powser>
    25f4:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__fp_round>
    25f8:	2f 91       	pop	r18
    25fa:	3f 91       	pop	r19
    25fc:	4f 91       	pop	r20
    25fe:	5f 91       	pop	r21
    2600:	0e 94 14 16 	call	0x2c28	; 0x2c28 <__mulsf3x>
    2604:	dd 23       	and	r29, r29
    2606:	51 f0       	breq	.+20     	; 0x261c <atan+0x58>
    2608:	90 58       	subi	r25, 0x80	; 128
    260a:	a2 ea       	ldi	r26, 0xA2	; 162
    260c:	2a ed       	ldi	r18, 0xDA	; 218
    260e:	3f e0       	ldi	r19, 0x0F	; 15
    2610:	49 ec       	ldi	r20, 0xC9	; 201
    2612:	5f e3       	ldi	r21, 0x3F	; 63
    2614:	d0 78       	andi	r29, 0x80	; 128
    2616:	5d 27       	eor	r21, r29
    2618:	0e 94 2f 12 	call	0x245e	; 0x245e <__addsf3x>
    261c:	df 91       	pop	r29
    261e:	0c 94 93 15 	jmp	0x2b26	; 0x2b26 <__fp_round>

00002622 <__cmpsf2>:
    2622:	0e 94 c9 14 	call	0x2992	; 0x2992 <__fp_cmp>
    2626:	08 f4       	brcc	.+2      	; 0x262a <__cmpsf2+0x8>
    2628:	81 e0       	ldi	r24, 0x01	; 1
    262a:	08 95       	ret

0000262c <cos>:
    262c:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <__fp_rempio2>
    2630:	e3 95       	inc	r30
    2632:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__fp_sinus>

00002636 <__divsf3>:
    2636:	0e 94 2f 13 	call	0x265e	; 0x265e <__divsf3x>
    263a:	0c 94 93 15 	jmp	0x2b26	; 0x2b26 <__fp_round>
    263e:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__fp_pscB>
    2642:	58 f0       	brcs	.+22     	; 0x265a <__divsf3+0x24>
    2644:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <__fp_pscA>
    2648:	40 f0       	brcs	.+16     	; 0x265a <__divsf3+0x24>
    264a:	29 f4       	brne	.+10     	; 0x2656 <__divsf3+0x20>
    264c:	5f 3f       	cpi	r21, 0xFF	; 255
    264e:	29 f0       	breq	.+10     	; 0x265a <__divsf3+0x24>
    2650:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__fp_inf>
    2654:	51 11       	cpse	r21, r1
    2656:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <__fp_szero>
    265a:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <__fp_nan>

0000265e <__divsf3x>:
    265e:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fp_split3>
    2662:	68 f3       	brcs	.-38     	; 0x263e <__divsf3+0x8>

00002664 <__divsf3_pse>:
    2664:	99 23       	and	r25, r25
    2666:	b1 f3       	breq	.-20     	; 0x2654 <__divsf3+0x1e>
    2668:	55 23       	and	r21, r21
    266a:	91 f3       	breq	.-28     	; 0x2650 <__divsf3+0x1a>
    266c:	95 1b       	sub	r25, r21
    266e:	55 0b       	sbc	r21, r21
    2670:	bb 27       	eor	r27, r27
    2672:	aa 27       	eor	r26, r26
    2674:	62 17       	cp	r22, r18
    2676:	73 07       	cpc	r23, r19
    2678:	84 07       	cpc	r24, r20
    267a:	38 f0       	brcs	.+14     	; 0x268a <__divsf3_pse+0x26>
    267c:	9f 5f       	subi	r25, 0xFF	; 255
    267e:	5f 4f       	sbci	r21, 0xFF	; 255
    2680:	22 0f       	add	r18, r18
    2682:	33 1f       	adc	r19, r19
    2684:	44 1f       	adc	r20, r20
    2686:	aa 1f       	adc	r26, r26
    2688:	a9 f3       	breq	.-22     	; 0x2674 <__divsf3_pse+0x10>
    268a:	35 d0       	rcall	.+106    	; 0x26f6 <__divsf3_pse+0x92>
    268c:	0e 2e       	mov	r0, r30
    268e:	3a f0       	brmi	.+14     	; 0x269e <__divsf3_pse+0x3a>
    2690:	e0 e8       	ldi	r30, 0x80	; 128
    2692:	32 d0       	rcall	.+100    	; 0x26f8 <__divsf3_pse+0x94>
    2694:	91 50       	subi	r25, 0x01	; 1
    2696:	50 40       	sbci	r21, 0x00	; 0
    2698:	e6 95       	lsr	r30
    269a:	00 1c       	adc	r0, r0
    269c:	ca f7       	brpl	.-14     	; 0x2690 <__divsf3_pse+0x2c>
    269e:	2b d0       	rcall	.+86     	; 0x26f6 <__divsf3_pse+0x92>
    26a0:	fe 2f       	mov	r31, r30
    26a2:	29 d0       	rcall	.+82     	; 0x26f6 <__divsf3_pse+0x92>
    26a4:	66 0f       	add	r22, r22
    26a6:	77 1f       	adc	r23, r23
    26a8:	88 1f       	adc	r24, r24
    26aa:	bb 1f       	adc	r27, r27
    26ac:	26 17       	cp	r18, r22
    26ae:	37 07       	cpc	r19, r23
    26b0:	48 07       	cpc	r20, r24
    26b2:	ab 07       	cpc	r26, r27
    26b4:	b0 e8       	ldi	r27, 0x80	; 128
    26b6:	09 f0       	breq	.+2      	; 0x26ba <__divsf3_pse+0x56>
    26b8:	bb 0b       	sbc	r27, r27
    26ba:	80 2d       	mov	r24, r0
    26bc:	bf 01       	movw	r22, r30
    26be:	ff 27       	eor	r31, r31
    26c0:	93 58       	subi	r25, 0x83	; 131
    26c2:	5f 4f       	sbci	r21, 0xFF	; 255
    26c4:	3a f0       	brmi	.+14     	; 0x26d4 <__divsf3_pse+0x70>
    26c6:	9e 3f       	cpi	r25, 0xFE	; 254
    26c8:	51 05       	cpc	r21, r1
    26ca:	78 f0       	brcs	.+30     	; 0x26ea <__divsf3_pse+0x86>
    26cc:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__fp_inf>
    26d0:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <__fp_szero>
    26d4:	5f 3f       	cpi	r21, 0xFF	; 255
    26d6:	e4 f3       	brlt	.-8      	; 0x26d0 <__divsf3_pse+0x6c>
    26d8:	98 3e       	cpi	r25, 0xE8	; 232
    26da:	d4 f3       	brlt	.-12     	; 0x26d0 <__divsf3_pse+0x6c>
    26dc:	86 95       	lsr	r24
    26de:	77 95       	ror	r23
    26e0:	67 95       	ror	r22
    26e2:	b7 95       	ror	r27
    26e4:	f7 95       	ror	r31
    26e6:	9f 5f       	subi	r25, 0xFF	; 255
    26e8:	c9 f7       	brne	.-14     	; 0x26dc <__divsf3_pse+0x78>
    26ea:	88 0f       	add	r24, r24
    26ec:	91 1d       	adc	r25, r1
    26ee:	96 95       	lsr	r25
    26f0:	87 95       	ror	r24
    26f2:	97 f9       	bld	r25, 7
    26f4:	08 95       	ret
    26f6:	e1 e0       	ldi	r30, 0x01	; 1
    26f8:	66 0f       	add	r22, r22
    26fa:	77 1f       	adc	r23, r23
    26fc:	88 1f       	adc	r24, r24
    26fe:	bb 1f       	adc	r27, r27
    2700:	62 17       	cp	r22, r18
    2702:	73 07       	cpc	r23, r19
    2704:	84 07       	cpc	r24, r20
    2706:	ba 07       	cpc	r27, r26
    2708:	20 f0       	brcs	.+8      	; 0x2712 <__divsf3_pse+0xae>
    270a:	62 1b       	sub	r22, r18
    270c:	73 0b       	sbc	r23, r19
    270e:	84 0b       	sbc	r24, r20
    2710:	ba 0b       	sbc	r27, r26
    2712:	ee 1f       	adc	r30, r30
    2714:	88 f7       	brcc	.-30     	; 0x26f8 <__divsf3_pse+0x94>
    2716:	e0 95       	com	r30
    2718:	08 95       	ret

0000271a <__fixsfsi>:
    271a:	0e 94 94 13 	call	0x2728	; 0x2728 <__fixunssfsi>
    271e:	68 94       	set
    2720:	b1 11       	cpse	r27, r1
    2722:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <__fp_szero>
    2726:	08 95       	ret

00002728 <__fixunssfsi>:
    2728:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <__fp_splitA>
    272c:	88 f0       	brcs	.+34     	; 0x2750 <__fixunssfsi+0x28>
    272e:	9f 57       	subi	r25, 0x7F	; 127
    2730:	98 f0       	brcs	.+38     	; 0x2758 <__fixunssfsi+0x30>
    2732:	b9 2f       	mov	r27, r25
    2734:	99 27       	eor	r25, r25
    2736:	b7 51       	subi	r27, 0x17	; 23
    2738:	b0 f0       	brcs	.+44     	; 0x2766 <__fixunssfsi+0x3e>
    273a:	e1 f0       	breq	.+56     	; 0x2774 <__fixunssfsi+0x4c>
    273c:	66 0f       	add	r22, r22
    273e:	77 1f       	adc	r23, r23
    2740:	88 1f       	adc	r24, r24
    2742:	99 1f       	adc	r25, r25
    2744:	1a f0       	brmi	.+6      	; 0x274c <__fixunssfsi+0x24>
    2746:	ba 95       	dec	r27
    2748:	c9 f7       	brne	.-14     	; 0x273c <__fixunssfsi+0x14>
    274a:	14 c0       	rjmp	.+40     	; 0x2774 <__fixunssfsi+0x4c>
    274c:	b1 30       	cpi	r27, 0x01	; 1
    274e:	91 f0       	breq	.+36     	; 0x2774 <__fixunssfsi+0x4c>
    2750:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__fp_zero>
    2754:	b1 e0       	ldi	r27, 0x01	; 1
    2756:	08 95       	ret
    2758:	0c 94 f2 15 	jmp	0x2be4	; 0x2be4 <__fp_zero>
    275c:	67 2f       	mov	r22, r23
    275e:	78 2f       	mov	r23, r24
    2760:	88 27       	eor	r24, r24
    2762:	b8 5f       	subi	r27, 0xF8	; 248
    2764:	39 f0       	breq	.+14     	; 0x2774 <__fixunssfsi+0x4c>
    2766:	b9 3f       	cpi	r27, 0xF9	; 249
    2768:	cc f3       	brlt	.-14     	; 0x275c <__fixunssfsi+0x34>
    276a:	86 95       	lsr	r24
    276c:	77 95       	ror	r23
    276e:	67 95       	ror	r22
    2770:	b3 95       	inc	r27
    2772:	d9 f7       	brne	.-10     	; 0x276a <__fixunssfsi+0x42>
    2774:	3e f4       	brtc	.+14     	; 0x2784 <__fixunssfsi+0x5c>
    2776:	90 95       	com	r25
    2778:	80 95       	com	r24
    277a:	70 95       	com	r23
    277c:	61 95       	neg	r22
    277e:	7f 4f       	sbci	r23, 0xFF	; 255
    2780:	8f 4f       	sbci	r24, 0xFF	; 255
    2782:	9f 4f       	sbci	r25, 0xFF	; 255
    2784:	08 95       	ret

00002786 <__floatunsisf>:
    2786:	e8 94       	clt
    2788:	09 c0       	rjmp	.+18     	; 0x279c <__floatsisf+0x12>

0000278a <__floatsisf>:
    278a:	97 fb       	bst	r25, 7
    278c:	3e f4       	brtc	.+14     	; 0x279c <__floatsisf+0x12>
    278e:	90 95       	com	r25
    2790:	80 95       	com	r24
    2792:	70 95       	com	r23
    2794:	61 95       	neg	r22
    2796:	7f 4f       	sbci	r23, 0xFF	; 255
    2798:	8f 4f       	sbci	r24, 0xFF	; 255
    279a:	9f 4f       	sbci	r25, 0xFF	; 255
    279c:	99 23       	and	r25, r25
    279e:	a9 f0       	breq	.+42     	; 0x27ca <__floatsisf+0x40>
    27a0:	f9 2f       	mov	r31, r25
    27a2:	96 e9       	ldi	r25, 0x96	; 150
    27a4:	bb 27       	eor	r27, r27
    27a6:	93 95       	inc	r25
    27a8:	f6 95       	lsr	r31
    27aa:	87 95       	ror	r24
    27ac:	77 95       	ror	r23
    27ae:	67 95       	ror	r22
    27b0:	b7 95       	ror	r27
    27b2:	f1 11       	cpse	r31, r1
    27b4:	f8 cf       	rjmp	.-16     	; 0x27a6 <__floatsisf+0x1c>
    27b6:	fa f4       	brpl	.+62     	; 0x27f6 <__floatsisf+0x6c>
    27b8:	bb 0f       	add	r27, r27
    27ba:	11 f4       	brne	.+4      	; 0x27c0 <__floatsisf+0x36>
    27bc:	60 ff       	sbrs	r22, 0
    27be:	1b c0       	rjmp	.+54     	; 0x27f6 <__floatsisf+0x6c>
    27c0:	6f 5f       	subi	r22, 0xFF	; 255
    27c2:	7f 4f       	sbci	r23, 0xFF	; 255
    27c4:	8f 4f       	sbci	r24, 0xFF	; 255
    27c6:	9f 4f       	sbci	r25, 0xFF	; 255
    27c8:	16 c0       	rjmp	.+44     	; 0x27f6 <__floatsisf+0x6c>
    27ca:	88 23       	and	r24, r24
    27cc:	11 f0       	breq	.+4      	; 0x27d2 <__floatsisf+0x48>
    27ce:	96 e9       	ldi	r25, 0x96	; 150
    27d0:	11 c0       	rjmp	.+34     	; 0x27f4 <__floatsisf+0x6a>
    27d2:	77 23       	and	r23, r23
    27d4:	21 f0       	breq	.+8      	; 0x27de <__floatsisf+0x54>
    27d6:	9e e8       	ldi	r25, 0x8E	; 142
    27d8:	87 2f       	mov	r24, r23
    27da:	76 2f       	mov	r23, r22
    27dc:	05 c0       	rjmp	.+10     	; 0x27e8 <__floatsisf+0x5e>
    27de:	66 23       	and	r22, r22
    27e0:	71 f0       	breq	.+28     	; 0x27fe <__floatsisf+0x74>
    27e2:	96 e8       	ldi	r25, 0x86	; 134
    27e4:	86 2f       	mov	r24, r22
    27e6:	70 e0       	ldi	r23, 0x00	; 0
    27e8:	60 e0       	ldi	r22, 0x00	; 0
    27ea:	2a f0       	brmi	.+10     	; 0x27f6 <__floatsisf+0x6c>
    27ec:	9a 95       	dec	r25
    27ee:	66 0f       	add	r22, r22
    27f0:	77 1f       	adc	r23, r23
    27f2:	88 1f       	adc	r24, r24
    27f4:	da f7       	brpl	.-10     	; 0x27ec <__floatsisf+0x62>
    27f6:	88 0f       	add	r24, r24
    27f8:	96 95       	lsr	r25
    27fa:	87 95       	ror	r24
    27fc:	97 f9       	bld	r25, 7
    27fe:	08 95       	ret

00002800 <floor>:
    2800:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <__fp_trunc>
    2804:	90 f0       	brcs	.+36     	; 0x282a <floor+0x2a>
    2806:	9f 37       	cpi	r25, 0x7F	; 127
    2808:	48 f4       	brcc	.+18     	; 0x281c <floor+0x1c>
    280a:	91 11       	cpse	r25, r1
    280c:	16 f0       	brts	.+4      	; 0x2812 <floor+0x12>
    280e:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <__fp_szero>
    2812:	60 e0       	ldi	r22, 0x00	; 0
    2814:	70 e0       	ldi	r23, 0x00	; 0
    2816:	80 e8       	ldi	r24, 0x80	; 128
    2818:	9f eb       	ldi	r25, 0xBF	; 191
    281a:	08 95       	ret
    281c:	26 f4       	brtc	.+8      	; 0x2826 <floor+0x26>
    281e:	1b 16       	cp	r1, r27
    2820:	61 1d       	adc	r22, r1
    2822:	71 1d       	adc	r23, r1
    2824:	81 1d       	adc	r24, r1
    2826:	0c 94 f3 14 	jmp	0x29e6	; 0x29e6 <__fp_mintl>
    282a:	0c 94 0e 15 	jmp	0x2a1c	; 0x2a1c <__fp_mpack>

0000282e <fmax>:
    282e:	99 0f       	add	r25, r25
    2830:	bb 0b       	sbc	r27, r27
    2832:	55 0f       	add	r21, r21
    2834:	aa 0b       	sbc	r26, r26
    2836:	e0 e8       	ldi	r30, 0x80	; 128
    2838:	fe ef       	ldi	r31, 0xFE	; 254
    283a:	16 16       	cp	r1, r22
    283c:	17 06       	cpc	r1, r23
    283e:	e8 07       	cpc	r30, r24
    2840:	f9 07       	cpc	r31, r25
    2842:	70 f0       	brcs	.+28     	; 0x2860 <fmax+0x32>
    2844:	12 16       	cp	r1, r18
    2846:	13 06       	cpc	r1, r19
    2848:	e4 07       	cpc	r30, r20
    284a:	f5 07       	cpc	r31, r21
    284c:	60 f0       	brcs	.+24     	; 0x2866 <fmax+0x38>
    284e:	ba 17       	cp	r27, r26
    2850:	3c f0       	brlt	.+14     	; 0x2860 <fmax+0x32>
    2852:	49 f4       	brne	.+18     	; 0x2866 <fmax+0x38>
    2854:	62 17       	cp	r22, r18
    2856:	73 07       	cpc	r23, r19
    2858:	84 07       	cpc	r24, r20
    285a:	95 07       	cpc	r25, r21
    285c:	a7 95       	ror	r26
    285e:	1b f4       	brvc	.+6      	; 0x2866 <fmax+0x38>
    2860:	b9 01       	movw	r22, r18
    2862:	ca 01       	movw	r24, r20
    2864:	ba 2f       	mov	r27, r26
    2866:	b6 95       	lsr	r27
    2868:	97 95       	ror	r25
    286a:	08 95       	ret

0000286c <fmin>:
    286c:	99 0f       	add	r25, r25
    286e:	bb 0b       	sbc	r27, r27
    2870:	55 0f       	add	r21, r21
    2872:	aa 0b       	sbc	r26, r26
    2874:	e0 e8       	ldi	r30, 0x80	; 128
    2876:	fe ef       	ldi	r31, 0xFE	; 254
    2878:	16 16       	cp	r1, r22
    287a:	17 06       	cpc	r1, r23
    287c:	e8 07       	cpc	r30, r24
    287e:	f9 07       	cpc	r31, r25
    2880:	70 f0       	brcs	.+28     	; 0x289e <fmin+0x32>
    2882:	12 16       	cp	r1, r18
    2884:	13 06       	cpc	r1, r19
    2886:	e4 07       	cpc	r30, r20
    2888:	f5 07       	cpc	r31, r21
    288a:	60 f0       	brcs	.+24     	; 0x28a4 <fmin+0x38>
    288c:	ba 17       	cp	r27, r26
    288e:	54 f0       	brlt	.+20     	; 0x28a4 <fmin+0x38>
    2890:	31 f4       	brne	.+12     	; 0x289e <fmin+0x32>
    2892:	26 17       	cp	r18, r22
    2894:	37 07       	cpc	r19, r23
    2896:	48 07       	cpc	r20, r24
    2898:	59 07       	cpc	r21, r25
    289a:	a7 95       	ror	r26
    289c:	1b f4       	brvc	.+6      	; 0x28a4 <fmin+0x38>
    289e:	b9 01       	movw	r22, r18
    28a0:	ca 01       	movw	r24, r20
    28a2:	ba 2f       	mov	r27, r26
    28a4:	b6 95       	lsr	r27
    28a6:	97 95       	ror	r25
    28a8:	08 95       	ret
    28aa:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <__fp_pscA>
    28ae:	20 f0       	brcs	.+8      	; 0x28b8 <fmin+0x4c>
    28b0:	19 f0       	breq	.+6      	; 0x28b8 <fmin+0x4c>
    28b2:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__fp_pscB>
    28b6:	50 f4       	brcc	.+20     	; 0x28cc <fmod+0xc>
    28b8:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <__fp_nan>
    28bc:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <__fp_szero>

000028c0 <fmod>:
    28c0:	e9 2f       	mov	r30, r25
    28c2:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fp_split3>
    28c6:	88 f3       	brcs	.-30     	; 0x28aa <fmin+0x3e>
    28c8:	55 23       	and	r21, r21
    28ca:	b1 f3       	breq	.-20     	; 0x28b8 <fmin+0x4c>
    28cc:	e7 fb       	bst	r30, 7
    28ce:	62 17       	cp	r22, r18
    28d0:	73 07       	cpc	r23, r19
    28d2:	84 07       	cpc	r24, r20
    28d4:	95 07       	cpc	r25, r21
    28d6:	a8 f1       	brcs	.+106    	; 0x2942 <fmod+0x82>
    28d8:	89 f3       	breq	.-30     	; 0x28bc <fmin+0x50>
    28da:	e9 2f       	mov	r30, r25
    28dc:	ff 27       	eor	r31, r31
    28de:	88 23       	and	r24, r24
    28e0:	2a f0       	brmi	.+10     	; 0x28ec <fmod+0x2c>
    28e2:	31 97       	sbiw	r30, 0x01	; 1
    28e4:	66 0f       	add	r22, r22
    28e6:	77 1f       	adc	r23, r23
    28e8:	88 1f       	adc	r24, r24
    28ea:	da f7       	brpl	.-10     	; 0x28e2 <fmod+0x22>
    28ec:	95 2f       	mov	r25, r21
    28ee:	55 27       	eor	r21, r21
    28f0:	44 23       	and	r20, r20
    28f2:	32 f0       	brmi	.+12     	; 0x2900 <fmod+0x40>
    28f4:	91 50       	subi	r25, 0x01	; 1
    28f6:	50 40       	sbci	r21, 0x00	; 0
    28f8:	22 0f       	add	r18, r18
    28fa:	33 1f       	adc	r19, r19
    28fc:	44 1f       	adc	r20, r20
    28fe:	d2 f7       	brpl	.-12     	; 0x28f4 <fmod+0x34>
    2900:	bb 27       	eor	r27, r27
    2902:	e9 1b       	sub	r30, r25
    2904:	f5 0b       	sbc	r31, r21
    2906:	62 1b       	sub	r22, r18
    2908:	73 0b       	sbc	r23, r19
    290a:	84 0b       	sbc	r24, r20
    290c:	b1 09       	sbc	r27, r1
    290e:	b1 f2       	breq	.-84     	; 0x28bc <fmin+0x50>
    2910:	22 f4       	brpl	.+8      	; 0x291a <fmod+0x5a>
    2912:	62 0f       	add	r22, r18
    2914:	73 1f       	adc	r23, r19
    2916:	84 1f       	adc	r24, r20
    2918:	b1 1d       	adc	r27, r1
    291a:	31 97       	sbiw	r30, 0x01	; 1
    291c:	2a f0       	brmi	.+10     	; 0x2928 <fmod+0x68>
    291e:	66 0f       	add	r22, r22
    2920:	77 1f       	adc	r23, r23
    2922:	88 1f       	adc	r24, r24
    2924:	bb 1f       	adc	r27, r27
    2926:	ef cf       	rjmp	.-34     	; 0x2906 <fmod+0x46>
    2928:	91 50       	subi	r25, 0x01	; 1
    292a:	50 40       	sbci	r21, 0x00	; 0
    292c:	62 f0       	brmi	.+24     	; 0x2946 <fmod+0x86>
    292e:	41 f0       	breq	.+16     	; 0x2940 <fmod+0x80>
    2930:	88 23       	and	r24, r24
    2932:	32 f0       	brmi	.+12     	; 0x2940 <fmod+0x80>
    2934:	66 0f       	add	r22, r22
    2936:	77 1f       	adc	r23, r23
    2938:	88 1f       	adc	r24, r24
    293a:	91 50       	subi	r25, 0x01	; 1
    293c:	50 40       	sbci	r21, 0x00	; 0
    293e:	c1 f7       	brne	.-16     	; 0x2930 <fmod+0x70>
    2940:	93 95       	inc	r25
    2942:	0c 94 0e 15 	jmp	0x2a1c	; 0x2a1c <__fp_mpack>
    2946:	86 95       	lsr	r24
    2948:	77 95       	ror	r23
    294a:	67 95       	ror	r22
    294c:	9f 5f       	subi	r25, 0xFF	; 255
    294e:	d9 f7       	brne	.-10     	; 0x2946 <fmod+0x86>
    2950:	f7 cf       	rjmp	.-18     	; 0x2940 <fmod+0x80>

00002952 <__fp_arccos>:
    2952:	df 93       	push	r29
    2954:	cf 93       	push	r28
    2956:	1f 93       	push	r17
    2958:	0f 93       	push	r16
    295a:	8b 01       	movw	r16, r22
    295c:	ec 01       	movw	r28, r24
    295e:	e5 e9       	ldi	r30, 0x95	; 149
    2960:	f0 e0       	ldi	r31, 0x00	; 0
    2962:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <__fp_powser>
    2966:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__fp_round>
    296a:	98 01       	movw	r18, r16
    296c:	ae 01       	movw	r20, r28
    296e:	8b 01       	movw	r16, r22
    2970:	ec 01       	movw	r28, r24
    2972:	60 e0       	ldi	r22, 0x00	; 0
    2974:	70 e0       	ldi	r23, 0x00	; 0
    2976:	80 e8       	ldi	r24, 0x80	; 128
    2978:	9f e3       	ldi	r25, 0x3F	; 63
    297a:	0e 94 17 12 	call	0x242e	; 0x242e <__subsf3>
    297e:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <sqrt>
    2982:	98 01       	movw	r18, r16
    2984:	ae 01       	movw	r20, r28
    2986:	0f 91       	pop	r16
    2988:	1f 91       	pop	r17
    298a:	cf 91       	pop	r28
    298c:	df 91       	pop	r29
    298e:	0c 94 14 16 	jmp	0x2c28	; 0x2c28 <__mulsf3x>

00002992 <__fp_cmp>:
    2992:	99 0f       	add	r25, r25
    2994:	00 08       	sbc	r0, r0
    2996:	55 0f       	add	r21, r21
    2998:	aa 0b       	sbc	r26, r26
    299a:	e0 e8       	ldi	r30, 0x80	; 128
    299c:	fe ef       	ldi	r31, 0xFE	; 254
    299e:	16 16       	cp	r1, r22
    29a0:	17 06       	cpc	r1, r23
    29a2:	e8 07       	cpc	r30, r24
    29a4:	f9 07       	cpc	r31, r25
    29a6:	c0 f0       	brcs	.+48     	; 0x29d8 <__fp_cmp+0x46>
    29a8:	12 16       	cp	r1, r18
    29aa:	13 06       	cpc	r1, r19
    29ac:	e4 07       	cpc	r30, r20
    29ae:	f5 07       	cpc	r31, r21
    29b0:	98 f0       	brcs	.+38     	; 0x29d8 <__fp_cmp+0x46>
    29b2:	62 1b       	sub	r22, r18
    29b4:	73 0b       	sbc	r23, r19
    29b6:	84 0b       	sbc	r24, r20
    29b8:	95 0b       	sbc	r25, r21
    29ba:	39 f4       	brne	.+14     	; 0x29ca <__fp_cmp+0x38>
    29bc:	0a 26       	eor	r0, r26
    29be:	61 f0       	breq	.+24     	; 0x29d8 <__fp_cmp+0x46>
    29c0:	23 2b       	or	r18, r19
    29c2:	24 2b       	or	r18, r20
    29c4:	25 2b       	or	r18, r21
    29c6:	21 f4       	brne	.+8      	; 0x29d0 <__fp_cmp+0x3e>
    29c8:	08 95       	ret
    29ca:	0a 26       	eor	r0, r26
    29cc:	09 f4       	brne	.+2      	; 0x29d0 <__fp_cmp+0x3e>
    29ce:	a1 40       	sbci	r26, 0x01	; 1
    29d0:	a6 95       	lsr	r26
    29d2:	8f ef       	ldi	r24, 0xFF	; 255
    29d4:	81 1d       	adc	r24, r1
    29d6:	81 1d       	adc	r24, r1
    29d8:	08 95       	ret

000029da <__fp_inf>:
    29da:	97 f9       	bld	r25, 7
    29dc:	9f 67       	ori	r25, 0x7F	; 127
    29de:	80 e8       	ldi	r24, 0x80	; 128
    29e0:	70 e0       	ldi	r23, 0x00	; 0
    29e2:	60 e0       	ldi	r22, 0x00	; 0
    29e4:	08 95       	ret

000029e6 <__fp_mintl>:
    29e6:	88 23       	and	r24, r24
    29e8:	71 f4       	brne	.+28     	; 0x2a06 <__fp_mintl+0x20>
    29ea:	77 23       	and	r23, r23
    29ec:	21 f0       	breq	.+8      	; 0x29f6 <__fp_mintl+0x10>
    29ee:	98 50       	subi	r25, 0x08	; 8
    29f0:	87 2b       	or	r24, r23
    29f2:	76 2f       	mov	r23, r22
    29f4:	07 c0       	rjmp	.+14     	; 0x2a04 <__fp_mintl+0x1e>
    29f6:	66 23       	and	r22, r22
    29f8:	11 f4       	brne	.+4      	; 0x29fe <__fp_mintl+0x18>
    29fa:	99 27       	eor	r25, r25
    29fc:	0d c0       	rjmp	.+26     	; 0x2a18 <__fp_mintl+0x32>
    29fe:	90 51       	subi	r25, 0x10	; 16
    2a00:	86 2b       	or	r24, r22
    2a02:	70 e0       	ldi	r23, 0x00	; 0
    2a04:	60 e0       	ldi	r22, 0x00	; 0
    2a06:	2a f0       	brmi	.+10     	; 0x2a12 <__fp_mintl+0x2c>
    2a08:	9a 95       	dec	r25
    2a0a:	66 0f       	add	r22, r22
    2a0c:	77 1f       	adc	r23, r23
    2a0e:	88 1f       	adc	r24, r24
    2a10:	da f7       	brpl	.-10     	; 0x2a08 <__fp_mintl+0x22>
    2a12:	88 0f       	add	r24, r24
    2a14:	96 95       	lsr	r25
    2a16:	87 95       	ror	r24
    2a18:	97 f9       	bld	r25, 7
    2a1a:	08 95       	ret

00002a1c <__fp_mpack>:
    2a1c:	9f 3f       	cpi	r25, 0xFF	; 255
    2a1e:	31 f0       	breq	.+12     	; 0x2a2c <__fp_mpack_finite+0xc>

00002a20 <__fp_mpack_finite>:
    2a20:	91 50       	subi	r25, 0x01	; 1
    2a22:	20 f4       	brcc	.+8      	; 0x2a2c <__fp_mpack_finite+0xc>
    2a24:	87 95       	ror	r24
    2a26:	77 95       	ror	r23
    2a28:	67 95       	ror	r22
    2a2a:	b7 95       	ror	r27
    2a2c:	88 0f       	add	r24, r24
    2a2e:	91 1d       	adc	r25, r1
    2a30:	96 95       	lsr	r25
    2a32:	87 95       	ror	r24
    2a34:	97 f9       	bld	r25, 7
    2a36:	08 95       	ret

00002a38 <__fp_nan>:
    2a38:	9f ef       	ldi	r25, 0xFF	; 255
    2a3a:	80 ec       	ldi	r24, 0xC0	; 192
    2a3c:	08 95       	ret

00002a3e <__fp_powser>:
    2a3e:	df 93       	push	r29
    2a40:	cf 93       	push	r28
    2a42:	1f 93       	push	r17
    2a44:	0f 93       	push	r16
    2a46:	ff 92       	push	r15
    2a48:	ef 92       	push	r14
    2a4a:	df 92       	push	r13
    2a4c:	7b 01       	movw	r14, r22
    2a4e:	8c 01       	movw	r16, r24
    2a50:	68 94       	set
    2a52:	06 c0       	rjmp	.+12     	; 0x2a60 <__fp_powser+0x22>
    2a54:	da 2e       	mov	r13, r26
    2a56:	ef 01       	movw	r28, r30
    2a58:	0e 94 14 16 	call	0x2c28	; 0x2c28 <__mulsf3x>
    2a5c:	fe 01       	movw	r30, r28
    2a5e:	e8 94       	clt
    2a60:	a5 91       	lpm	r26, Z+
    2a62:	25 91       	lpm	r18, Z+
    2a64:	35 91       	lpm	r19, Z+
    2a66:	45 91       	lpm	r20, Z+
    2a68:	55 91       	lpm	r21, Z+
    2a6a:	a6 f3       	brts	.-24     	; 0x2a54 <__fp_powser+0x16>
    2a6c:	ef 01       	movw	r28, r30
    2a6e:	0e 94 2f 12 	call	0x245e	; 0x245e <__addsf3x>
    2a72:	fe 01       	movw	r30, r28
    2a74:	97 01       	movw	r18, r14
    2a76:	a8 01       	movw	r20, r16
    2a78:	da 94       	dec	r13
    2a7a:	69 f7       	brne	.-38     	; 0x2a56 <__fp_powser+0x18>
    2a7c:	df 90       	pop	r13
    2a7e:	ef 90       	pop	r14
    2a80:	ff 90       	pop	r15
    2a82:	0f 91       	pop	r16
    2a84:	1f 91       	pop	r17
    2a86:	cf 91       	pop	r28
    2a88:	df 91       	pop	r29
    2a8a:	08 95       	ret

00002a8c <__fp_powsodd>:
    2a8c:	9f 93       	push	r25
    2a8e:	8f 93       	push	r24
    2a90:	7f 93       	push	r23
    2a92:	6f 93       	push	r22
    2a94:	ff 93       	push	r31
    2a96:	ef 93       	push	r30
    2a98:	9b 01       	movw	r18, r22
    2a9a:	ac 01       	movw	r20, r24
    2a9c:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__mulsf3>
    2aa0:	ef 91       	pop	r30
    2aa2:	ff 91       	pop	r31
    2aa4:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <__fp_powser>
    2aa8:	2f 91       	pop	r18
    2aaa:	3f 91       	pop	r19
    2aac:	4f 91       	pop	r20
    2aae:	5f 91       	pop	r21
    2ab0:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__mulsf3>

00002ab4 <__fp_pscA>:
    2ab4:	00 24       	eor	r0, r0
    2ab6:	0a 94       	dec	r0
    2ab8:	16 16       	cp	r1, r22
    2aba:	17 06       	cpc	r1, r23
    2abc:	18 06       	cpc	r1, r24
    2abe:	09 06       	cpc	r0, r25
    2ac0:	08 95       	ret

00002ac2 <__fp_pscB>:
    2ac2:	00 24       	eor	r0, r0
    2ac4:	0a 94       	dec	r0
    2ac6:	12 16       	cp	r1, r18
    2ac8:	13 06       	cpc	r1, r19
    2aca:	14 06       	cpc	r1, r20
    2acc:	05 06       	cpc	r0, r21
    2ace:	08 95       	ret
    2ad0:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <__fp_nan>

00002ad4 <__fp_rempio2>:
    2ad4:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <__fp_splitA>
    2ad8:	d8 f3       	brcs	.-10     	; 0x2ad0 <__fp_pscB+0xe>
    2ada:	e8 94       	clt
    2adc:	e0 e0       	ldi	r30, 0x00	; 0
    2ade:	bb 27       	eor	r27, r27
    2ae0:	9f 57       	subi	r25, 0x7F	; 127
    2ae2:	f0 f0       	brcs	.+60     	; 0x2b20 <__fp_rempio2+0x4c>
    2ae4:	2a ed       	ldi	r18, 0xDA	; 218
    2ae6:	3f e0       	ldi	r19, 0x0F	; 15
    2ae8:	49 ec       	ldi	r20, 0xC9	; 201
    2aea:	06 c0       	rjmp	.+12     	; 0x2af8 <__fp_rempio2+0x24>
    2aec:	ee 0f       	add	r30, r30
    2aee:	bb 0f       	add	r27, r27
    2af0:	66 1f       	adc	r22, r22
    2af2:	77 1f       	adc	r23, r23
    2af4:	88 1f       	adc	r24, r24
    2af6:	28 f0       	brcs	.+10     	; 0x2b02 <__fp_rempio2+0x2e>
    2af8:	b2 3a       	cpi	r27, 0xA2	; 162
    2afa:	62 07       	cpc	r22, r18
    2afc:	73 07       	cpc	r23, r19
    2afe:	84 07       	cpc	r24, r20
    2b00:	28 f0       	brcs	.+10     	; 0x2b0c <__fp_rempio2+0x38>
    2b02:	b2 5a       	subi	r27, 0xA2	; 162
    2b04:	62 0b       	sbc	r22, r18
    2b06:	73 0b       	sbc	r23, r19
    2b08:	84 0b       	sbc	r24, r20
    2b0a:	e3 95       	inc	r30
    2b0c:	9a 95       	dec	r25
    2b0e:	72 f7       	brpl	.-36     	; 0x2aec <__fp_rempio2+0x18>
    2b10:	80 38       	cpi	r24, 0x80	; 128
    2b12:	30 f4       	brcc	.+12     	; 0x2b20 <__fp_rempio2+0x4c>
    2b14:	9a 95       	dec	r25
    2b16:	bb 0f       	add	r27, r27
    2b18:	66 1f       	adc	r22, r22
    2b1a:	77 1f       	adc	r23, r23
    2b1c:	88 1f       	adc	r24, r24
    2b1e:	d2 f7       	brpl	.-12     	; 0x2b14 <__fp_rempio2+0x40>
    2b20:	90 48       	sbci	r25, 0x80	; 128
    2b22:	0c 94 10 15 	jmp	0x2a20	; 0x2a20 <__fp_mpack_finite>

00002b26 <__fp_round>:
    2b26:	09 2e       	mov	r0, r25
    2b28:	03 94       	inc	r0
    2b2a:	00 0c       	add	r0, r0
    2b2c:	11 f4       	brne	.+4      	; 0x2b32 <__fp_round+0xc>
    2b2e:	88 23       	and	r24, r24
    2b30:	52 f0       	brmi	.+20     	; 0x2b46 <__fp_round+0x20>
    2b32:	bb 0f       	add	r27, r27
    2b34:	40 f4       	brcc	.+16     	; 0x2b46 <__fp_round+0x20>
    2b36:	bf 2b       	or	r27, r31
    2b38:	11 f4       	brne	.+4      	; 0x2b3e <__fp_round+0x18>
    2b3a:	60 ff       	sbrs	r22, 0
    2b3c:	04 c0       	rjmp	.+8      	; 0x2b46 <__fp_round+0x20>
    2b3e:	6f 5f       	subi	r22, 0xFF	; 255
    2b40:	7f 4f       	sbci	r23, 0xFF	; 255
    2b42:	8f 4f       	sbci	r24, 0xFF	; 255
    2b44:	9f 4f       	sbci	r25, 0xFF	; 255
    2b46:	08 95       	ret

00002b48 <__fp_sinus>:
    2b48:	ef 93       	push	r30
    2b4a:	e0 ff       	sbrs	r30, 0
    2b4c:	07 c0       	rjmp	.+14     	; 0x2b5c <__fp_sinus+0x14>
    2b4e:	a2 ea       	ldi	r26, 0xA2	; 162
    2b50:	2a ed       	ldi	r18, 0xDA	; 218
    2b52:	3f e0       	ldi	r19, 0x0F	; 15
    2b54:	49 ec       	ldi	r20, 0xC9	; 201
    2b56:	5f eb       	ldi	r21, 0xBF	; 191
    2b58:	0e 94 2f 12 	call	0x245e	; 0x245e <__addsf3x>
    2b5c:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__fp_round>
    2b60:	0f 90       	pop	r0
    2b62:	03 94       	inc	r0
    2b64:	01 fc       	sbrc	r0, 1
    2b66:	90 58       	subi	r25, 0x80	; 128
    2b68:	ed eb       	ldi	r30, 0xBD	; 189
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	0c 94 46 15 	jmp	0x2a8c	; 0x2a8c <__fp_powsodd>

00002b70 <__fp_split3>:
    2b70:	57 fd       	sbrc	r21, 7
    2b72:	90 58       	subi	r25, 0x80	; 128
    2b74:	44 0f       	add	r20, r20
    2b76:	55 1f       	adc	r21, r21
    2b78:	59 f0       	breq	.+22     	; 0x2b90 <__fp_splitA+0x10>
    2b7a:	5f 3f       	cpi	r21, 0xFF	; 255
    2b7c:	71 f0       	breq	.+28     	; 0x2b9a <__fp_splitA+0x1a>
    2b7e:	47 95       	ror	r20

00002b80 <__fp_splitA>:
    2b80:	88 0f       	add	r24, r24
    2b82:	97 fb       	bst	r25, 7
    2b84:	99 1f       	adc	r25, r25
    2b86:	61 f0       	breq	.+24     	; 0x2ba0 <__fp_splitA+0x20>
    2b88:	9f 3f       	cpi	r25, 0xFF	; 255
    2b8a:	79 f0       	breq	.+30     	; 0x2baa <__fp_splitA+0x2a>
    2b8c:	87 95       	ror	r24
    2b8e:	08 95       	ret
    2b90:	12 16       	cp	r1, r18
    2b92:	13 06       	cpc	r1, r19
    2b94:	14 06       	cpc	r1, r20
    2b96:	55 1f       	adc	r21, r21
    2b98:	f2 cf       	rjmp	.-28     	; 0x2b7e <__fp_split3+0xe>
    2b9a:	46 95       	lsr	r20
    2b9c:	f1 df       	rcall	.-30     	; 0x2b80 <__fp_splitA>
    2b9e:	08 c0       	rjmp	.+16     	; 0x2bb0 <__fp_splitA+0x30>
    2ba0:	16 16       	cp	r1, r22
    2ba2:	17 06       	cpc	r1, r23
    2ba4:	18 06       	cpc	r1, r24
    2ba6:	99 1f       	adc	r25, r25
    2ba8:	f1 cf       	rjmp	.-30     	; 0x2b8c <__fp_splitA+0xc>
    2baa:	86 95       	lsr	r24
    2bac:	71 05       	cpc	r23, r1
    2bae:	61 05       	cpc	r22, r1
    2bb0:	08 94       	sec
    2bb2:	08 95       	ret

00002bb4 <__fp_trunc>:
    2bb4:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <__fp_splitA>
    2bb8:	a0 f0       	brcs	.+40     	; 0x2be2 <__fp_trunc+0x2e>
    2bba:	be e7       	ldi	r27, 0x7E	; 126
    2bbc:	b9 17       	cp	r27, r25
    2bbe:	88 f4       	brcc	.+34     	; 0x2be2 <__fp_trunc+0x2e>
    2bc0:	bb 27       	eor	r27, r27
    2bc2:	9f 38       	cpi	r25, 0x8F	; 143
    2bc4:	60 f4       	brcc	.+24     	; 0x2bde <__fp_trunc+0x2a>
    2bc6:	16 16       	cp	r1, r22
    2bc8:	b1 1d       	adc	r27, r1
    2bca:	67 2f       	mov	r22, r23
    2bcc:	78 2f       	mov	r23, r24
    2bce:	88 27       	eor	r24, r24
    2bd0:	98 5f       	subi	r25, 0xF8	; 248
    2bd2:	f7 cf       	rjmp	.-18     	; 0x2bc2 <__fp_trunc+0xe>
    2bd4:	86 95       	lsr	r24
    2bd6:	77 95       	ror	r23
    2bd8:	67 95       	ror	r22
    2bda:	b1 1d       	adc	r27, r1
    2bdc:	93 95       	inc	r25
    2bde:	96 39       	cpi	r25, 0x96	; 150
    2be0:	c8 f3       	brcs	.-14     	; 0x2bd4 <__fp_trunc+0x20>
    2be2:	08 95       	ret

00002be4 <__fp_zero>:
    2be4:	e8 94       	clt

00002be6 <__fp_szero>:
    2be6:	bb 27       	eor	r27, r27
    2be8:	66 27       	eor	r22, r22
    2bea:	77 27       	eor	r23, r23
    2bec:	cb 01       	movw	r24, r22
    2bee:	97 f9       	bld	r25, 7
    2bf0:	08 95       	ret

00002bf2 <inverse>:
    2bf2:	9b 01       	movw	r18, r22
    2bf4:	ac 01       	movw	r20, r24
    2bf6:	60 e0       	ldi	r22, 0x00	; 0
    2bf8:	70 e0       	ldi	r23, 0x00	; 0
    2bfa:	80 e8       	ldi	r24, 0x80	; 128
    2bfc:	9f e3       	ldi	r25, 0x3F	; 63
    2bfe:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__divsf3>

00002c02 <__mulsf3>:
    2c02:	0e 94 14 16 	call	0x2c28	; 0x2c28 <__mulsf3x>
    2c06:	0c 94 93 15 	jmp	0x2b26	; 0x2b26 <__fp_round>
    2c0a:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <__fp_pscA>
    2c0e:	38 f0       	brcs	.+14     	; 0x2c1e <__mulsf3+0x1c>
    2c10:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__fp_pscB>
    2c14:	20 f0       	brcs	.+8      	; 0x2c1e <__mulsf3+0x1c>
    2c16:	95 23       	and	r25, r21
    2c18:	11 f0       	breq	.+4      	; 0x2c1e <__mulsf3+0x1c>
    2c1a:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__fp_inf>
    2c1e:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <__fp_nan>
    2c22:	11 24       	eor	r1, r1
    2c24:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <__fp_szero>

00002c28 <__mulsf3x>:
    2c28:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fp_split3>
    2c2c:	70 f3       	brcs	.-36     	; 0x2c0a <__mulsf3+0x8>

00002c2e <__mulsf3_pse>:
    2c2e:	95 9f       	mul	r25, r21
    2c30:	c1 f3       	breq	.-16     	; 0x2c22 <__mulsf3+0x20>
    2c32:	95 0f       	add	r25, r21
    2c34:	50 e0       	ldi	r21, 0x00	; 0
    2c36:	55 1f       	adc	r21, r21
    2c38:	62 9f       	mul	r22, r18
    2c3a:	f0 01       	movw	r30, r0
    2c3c:	72 9f       	mul	r23, r18
    2c3e:	bb 27       	eor	r27, r27
    2c40:	f0 0d       	add	r31, r0
    2c42:	b1 1d       	adc	r27, r1
    2c44:	63 9f       	mul	r22, r19
    2c46:	aa 27       	eor	r26, r26
    2c48:	f0 0d       	add	r31, r0
    2c4a:	b1 1d       	adc	r27, r1
    2c4c:	aa 1f       	adc	r26, r26
    2c4e:	64 9f       	mul	r22, r20
    2c50:	66 27       	eor	r22, r22
    2c52:	b0 0d       	add	r27, r0
    2c54:	a1 1d       	adc	r26, r1
    2c56:	66 1f       	adc	r22, r22
    2c58:	82 9f       	mul	r24, r18
    2c5a:	22 27       	eor	r18, r18
    2c5c:	b0 0d       	add	r27, r0
    2c5e:	a1 1d       	adc	r26, r1
    2c60:	62 1f       	adc	r22, r18
    2c62:	73 9f       	mul	r23, r19
    2c64:	b0 0d       	add	r27, r0
    2c66:	a1 1d       	adc	r26, r1
    2c68:	62 1f       	adc	r22, r18
    2c6a:	83 9f       	mul	r24, r19
    2c6c:	a0 0d       	add	r26, r0
    2c6e:	61 1d       	adc	r22, r1
    2c70:	22 1f       	adc	r18, r18
    2c72:	74 9f       	mul	r23, r20
    2c74:	33 27       	eor	r19, r19
    2c76:	a0 0d       	add	r26, r0
    2c78:	61 1d       	adc	r22, r1
    2c7a:	23 1f       	adc	r18, r19
    2c7c:	84 9f       	mul	r24, r20
    2c7e:	60 0d       	add	r22, r0
    2c80:	21 1d       	adc	r18, r1
    2c82:	82 2f       	mov	r24, r18
    2c84:	76 2f       	mov	r23, r22
    2c86:	6a 2f       	mov	r22, r26
    2c88:	11 24       	eor	r1, r1
    2c8a:	9f 57       	subi	r25, 0x7F	; 127
    2c8c:	50 40       	sbci	r21, 0x00	; 0
    2c8e:	9a f0       	brmi	.+38     	; 0x2cb6 <__mulsf3_pse+0x88>
    2c90:	f1 f0       	breq	.+60     	; 0x2cce <__mulsf3_pse+0xa0>
    2c92:	88 23       	and	r24, r24
    2c94:	4a f0       	brmi	.+18     	; 0x2ca8 <__mulsf3_pse+0x7a>
    2c96:	ee 0f       	add	r30, r30
    2c98:	ff 1f       	adc	r31, r31
    2c9a:	bb 1f       	adc	r27, r27
    2c9c:	66 1f       	adc	r22, r22
    2c9e:	77 1f       	adc	r23, r23
    2ca0:	88 1f       	adc	r24, r24
    2ca2:	91 50       	subi	r25, 0x01	; 1
    2ca4:	50 40       	sbci	r21, 0x00	; 0
    2ca6:	a9 f7       	brne	.-22     	; 0x2c92 <__mulsf3_pse+0x64>
    2ca8:	9e 3f       	cpi	r25, 0xFE	; 254
    2caa:	51 05       	cpc	r21, r1
    2cac:	80 f0       	brcs	.+32     	; 0x2cce <__mulsf3_pse+0xa0>
    2cae:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__fp_inf>
    2cb2:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <__fp_szero>
    2cb6:	5f 3f       	cpi	r21, 0xFF	; 255
    2cb8:	e4 f3       	brlt	.-8      	; 0x2cb2 <__mulsf3_pse+0x84>
    2cba:	98 3e       	cpi	r25, 0xE8	; 232
    2cbc:	d4 f3       	brlt	.-12     	; 0x2cb2 <__mulsf3_pse+0x84>
    2cbe:	86 95       	lsr	r24
    2cc0:	77 95       	ror	r23
    2cc2:	67 95       	ror	r22
    2cc4:	b7 95       	ror	r27
    2cc6:	f7 95       	ror	r31
    2cc8:	e7 95       	ror	r30
    2cca:	9f 5f       	subi	r25, 0xFF	; 255
    2ccc:	c1 f7       	brne	.-16     	; 0x2cbe <__mulsf3_pse+0x90>
    2cce:	fe 2b       	or	r31, r30
    2cd0:	88 0f       	add	r24, r24
    2cd2:	91 1d       	adc	r25, r1
    2cd4:	96 95       	lsr	r25
    2cd6:	87 95       	ror	r24
    2cd8:	97 f9       	bld	r25, 7
    2cda:	08 95       	ret

00002cdc <sin>:
    2cdc:	9f 93       	push	r25
    2cde:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <__fp_rempio2>
    2ce2:	0f 90       	pop	r0
    2ce4:	07 fc       	sbrc	r0, 7
    2ce6:	ee 5f       	subi	r30, 0xFE	; 254
    2ce8:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__fp_sinus>
    2cec:	19 f4       	brne	.+6      	; 0x2cf4 <sin+0x18>
    2cee:	16 f4       	brtc	.+4      	; 0x2cf4 <sin+0x18>
    2cf0:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <__fp_nan>
    2cf4:	0c 94 0e 15 	jmp	0x2a1c	; 0x2a1c <__fp_mpack>

00002cf8 <sqrt>:
    2cf8:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <__fp_splitA>
    2cfc:	b8 f3       	brcs	.-18     	; 0x2cec <sin+0x10>
    2cfe:	99 23       	and	r25, r25
    2d00:	c9 f3       	breq	.-14     	; 0x2cf4 <sin+0x18>
    2d02:	b6 f3       	brts	.-20     	; 0x2cf0 <sin+0x14>
    2d04:	9f 57       	subi	r25, 0x7F	; 127
    2d06:	55 0b       	sbc	r21, r21
    2d08:	87 ff       	sbrs	r24, 7
    2d0a:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__fp_norm2>
    2d0e:	00 24       	eor	r0, r0
    2d10:	a0 e6       	ldi	r26, 0x60	; 96
    2d12:	40 ea       	ldi	r20, 0xA0	; 160
    2d14:	90 01       	movw	r18, r0
    2d16:	80 58       	subi	r24, 0x80	; 128
    2d18:	56 95       	lsr	r21
    2d1a:	97 95       	ror	r25
    2d1c:	28 f4       	brcc	.+10     	; 0x2d28 <sqrt+0x30>
    2d1e:	80 5c       	subi	r24, 0xC0	; 192
    2d20:	66 0f       	add	r22, r22
    2d22:	77 1f       	adc	r23, r23
    2d24:	88 1f       	adc	r24, r24
    2d26:	20 f0       	brcs	.+8      	; 0x2d30 <sqrt+0x38>
    2d28:	26 17       	cp	r18, r22
    2d2a:	37 07       	cpc	r19, r23
    2d2c:	48 07       	cpc	r20, r24
    2d2e:	30 f4       	brcc	.+12     	; 0x2d3c <sqrt+0x44>
    2d30:	62 1b       	sub	r22, r18
    2d32:	73 0b       	sbc	r23, r19
    2d34:	84 0b       	sbc	r24, r20
    2d36:	20 29       	or	r18, r0
    2d38:	31 29       	or	r19, r1
    2d3a:	4a 2b       	or	r20, r26
    2d3c:	a6 95       	lsr	r26
    2d3e:	17 94       	ror	r1
    2d40:	07 94       	ror	r0
    2d42:	20 25       	eor	r18, r0
    2d44:	31 25       	eor	r19, r1
    2d46:	4a 27       	eor	r20, r26
    2d48:	58 f7       	brcc	.-42     	; 0x2d20 <sqrt+0x28>
    2d4a:	66 0f       	add	r22, r22
    2d4c:	77 1f       	adc	r23, r23
    2d4e:	88 1f       	adc	r24, r24
    2d50:	20 f0       	brcs	.+8      	; 0x2d5a <sqrt+0x62>
    2d52:	26 17       	cp	r18, r22
    2d54:	37 07       	cpc	r19, r23
    2d56:	48 07       	cpc	r20, r24
    2d58:	30 f4       	brcc	.+12     	; 0x2d66 <sqrt+0x6e>
    2d5a:	62 0b       	sbc	r22, r18
    2d5c:	73 0b       	sbc	r23, r19
    2d5e:	84 0b       	sbc	r24, r20
    2d60:	20 0d       	add	r18, r0
    2d62:	31 1d       	adc	r19, r1
    2d64:	41 1d       	adc	r20, r1
    2d66:	a0 95       	com	r26
    2d68:	81 f7       	brne	.-32     	; 0x2d4a <sqrt+0x52>
    2d6a:	b9 01       	movw	r22, r18
    2d6c:	84 2f       	mov	r24, r20
    2d6e:	91 58       	subi	r25, 0x81	; 129
    2d70:	88 0f       	add	r24, r24
    2d72:	96 95       	lsr	r25
    2d74:	87 95       	ror	r24
    2d76:	08 95       	ret

00002d78 <square>:
    2d78:	9b 01       	movw	r18, r22
    2d7a:	ac 01       	movw	r20, r24
    2d7c:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__mulsf3>

00002d80 <tan>:
    2d80:	df 93       	push	r29
    2d82:	d9 2f       	mov	r29, r25
    2d84:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <__fp_rempio2>
    2d88:	e6 95       	lsr	r30
    2d8a:	d7 95       	ror	r29
    2d8c:	2a ed       	ldi	r18, 0xDA	; 218
    2d8e:	3f e0       	ldi	r19, 0x0F	; 15
    2d90:	49 e4       	ldi	r20, 0x49	; 73
    2d92:	5f e3       	ldi	r21, 0x3F	; 63
    2d94:	b3 3a       	cpi	r27, 0xA3	; 163
    2d96:	62 07       	cpc	r22, r18
    2d98:	73 07       	cpc	r23, r19
    2d9a:	84 07       	cpc	r24, r20
    2d9c:	95 07       	cpc	r25, r21
    2d9e:	d7 95       	ror	r29
    2da0:	3a f0       	brmi	.+14     	; 0x2db0 <tan+0x30>
    2da2:	a2 ea       	ldi	r26, 0xA2	; 162
    2da4:	49 ec       	ldi	r20, 0xC9	; 201
    2da6:	90 68       	ori	r25, 0x80	; 128
    2da8:	0e 94 2f 12 	call	0x245e	; 0x245e <__addsf3x>
    2dac:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__fp_round>
    2db0:	eb ed       	ldi	r30, 0xDB	; 219
    2db2:	f0 e0       	ldi	r31, 0x00	; 0
    2db4:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <__fp_powsodd>
    2db8:	dd 0f       	add	r29, r29
    2dba:	13 f0       	brvs	.+4      	; 0x2dc0 <tan+0x40>
    2dbc:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <inverse>
    2dc0:	dd 0f       	add	r29, r29
    2dc2:	0b f4       	brvc	.+2      	; 0x2dc6 <tan+0x46>
    2dc4:	90 58       	subi	r25, 0x80	; 128
    2dc6:	df 91       	pop	r29
    2dc8:	08 95       	ret

00002dca <__fp_norm2>:
    2dca:	91 50       	subi	r25, 0x01	; 1
    2dcc:	50 40       	sbci	r21, 0x00	; 0
    2dce:	66 0f       	add	r22, r22
    2dd0:	77 1f       	adc	r23, r23
    2dd2:	88 1f       	adc	r24, r24
    2dd4:	d2 f7       	brpl	.-12     	; 0x2dca <__fp_norm2>
    2dd6:	08 95       	ret

00002dd8 <__divmodhi4>:
    2dd8:	97 fb       	bst	r25, 7
    2dda:	07 2e       	mov	r0, r23
    2ddc:	16 f4       	brtc	.+4      	; 0x2de2 <__divmodhi4+0xa>
    2dde:	00 94       	com	r0
    2de0:	07 d0       	rcall	.+14     	; 0x2df0 <__divmodhi4_neg1>
    2de2:	77 fd       	sbrc	r23, 7
    2de4:	09 d0       	rcall	.+18     	; 0x2df8 <__divmodhi4_neg2>
    2de6:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <__udivmodhi4>
    2dea:	07 fc       	sbrc	r0, 7
    2dec:	05 d0       	rcall	.+10     	; 0x2df8 <__divmodhi4_neg2>
    2dee:	3e f4       	brtc	.+14     	; 0x2dfe <__divmodhi4_exit>

00002df0 <__divmodhi4_neg1>:
    2df0:	90 95       	com	r25
    2df2:	81 95       	neg	r24
    2df4:	9f 4f       	sbci	r25, 0xFF	; 255
    2df6:	08 95       	ret

00002df8 <__divmodhi4_neg2>:
    2df8:	70 95       	com	r23
    2dfa:	61 95       	neg	r22
    2dfc:	7f 4f       	sbci	r23, 0xFF	; 255

00002dfe <__divmodhi4_exit>:
    2dfe:	08 95       	ret

00002e00 <__udivmodsi4>:
    2e00:	a1 e2       	ldi	r26, 0x21	; 33
    2e02:	1a 2e       	mov	r1, r26
    2e04:	aa 1b       	sub	r26, r26
    2e06:	bb 1b       	sub	r27, r27
    2e08:	fd 01       	movw	r30, r26
    2e0a:	0d c0       	rjmp	.+26     	; 0x2e26 <__udivmodsi4_ep>

00002e0c <__udivmodsi4_loop>:
    2e0c:	aa 1f       	adc	r26, r26
    2e0e:	bb 1f       	adc	r27, r27
    2e10:	ee 1f       	adc	r30, r30
    2e12:	ff 1f       	adc	r31, r31
    2e14:	a2 17       	cp	r26, r18
    2e16:	b3 07       	cpc	r27, r19
    2e18:	e4 07       	cpc	r30, r20
    2e1a:	f5 07       	cpc	r31, r21
    2e1c:	20 f0       	brcs	.+8      	; 0x2e26 <__udivmodsi4_ep>
    2e1e:	a2 1b       	sub	r26, r18
    2e20:	b3 0b       	sbc	r27, r19
    2e22:	e4 0b       	sbc	r30, r20
    2e24:	f5 0b       	sbc	r31, r21

00002e26 <__udivmodsi4_ep>:
    2e26:	66 1f       	adc	r22, r22
    2e28:	77 1f       	adc	r23, r23
    2e2a:	88 1f       	adc	r24, r24
    2e2c:	99 1f       	adc	r25, r25
    2e2e:	1a 94       	dec	r1
    2e30:	69 f7       	brne	.-38     	; 0x2e0c <__udivmodsi4_loop>
    2e32:	60 95       	com	r22
    2e34:	70 95       	com	r23
    2e36:	80 95       	com	r24
    2e38:	90 95       	com	r25
    2e3a:	9b 01       	movw	r18, r22
    2e3c:	ac 01       	movw	r20, r24
    2e3e:	bd 01       	movw	r22, r26
    2e40:	cf 01       	movw	r24, r30
    2e42:	08 95       	ret

00002e44 <__divmodsi4>:
    2e44:	05 2e       	mov	r0, r21
    2e46:	97 fb       	bst	r25, 7
    2e48:	1e f4       	brtc	.+6      	; 0x2e50 <__divmodsi4+0xc>
    2e4a:	00 94       	com	r0
    2e4c:	0e 94 39 17 	call	0x2e72	; 0x2e72 <__negsi2>
    2e50:	57 fd       	sbrc	r21, 7
    2e52:	07 d0       	rcall	.+14     	; 0x2e62 <__divmodsi4_neg2>
    2e54:	0e 94 00 17 	call	0x2e00	; 0x2e00 <__udivmodsi4>
    2e58:	07 fc       	sbrc	r0, 7
    2e5a:	03 d0       	rcall	.+6      	; 0x2e62 <__divmodsi4_neg2>
    2e5c:	4e f4       	brtc	.+18     	; 0x2e70 <__divmodsi4_exit>
    2e5e:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <__negsi2>

00002e62 <__divmodsi4_neg2>:
    2e62:	50 95       	com	r21
    2e64:	40 95       	com	r20
    2e66:	30 95       	com	r19
    2e68:	21 95       	neg	r18
    2e6a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e6c:	4f 4f       	sbci	r20, 0xFF	; 255
    2e6e:	5f 4f       	sbci	r21, 0xFF	; 255

00002e70 <__divmodsi4_exit>:
    2e70:	08 95       	ret

00002e72 <__negsi2>:
    2e72:	90 95       	com	r25
    2e74:	80 95       	com	r24
    2e76:	70 95       	com	r23
    2e78:	61 95       	neg	r22
    2e7a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e7c:	8f 4f       	sbci	r24, 0xFF	; 255
    2e7e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e80:	08 95       	ret

00002e82 <__umulhisi3>:
    2e82:	a2 9f       	mul	r26, r18
    2e84:	b0 01       	movw	r22, r0
    2e86:	b3 9f       	mul	r27, r19
    2e88:	c0 01       	movw	r24, r0
    2e8a:	a3 9f       	mul	r26, r19
    2e8c:	70 0d       	add	r23, r0
    2e8e:	81 1d       	adc	r24, r1
    2e90:	11 24       	eor	r1, r1
    2e92:	91 1d       	adc	r25, r1
    2e94:	b2 9f       	mul	r27, r18
    2e96:	70 0d       	add	r23, r0
    2e98:	81 1d       	adc	r24, r1
    2e9a:	11 24       	eor	r1, r1
    2e9c:	91 1d       	adc	r25, r1
    2e9e:	08 95       	ret

00002ea0 <__muluhisi3>:
    2ea0:	0e 94 41 17 	call	0x2e82	; 0x2e82 <__umulhisi3>
    2ea4:	a5 9f       	mul	r26, r21
    2ea6:	90 0d       	add	r25, r0
    2ea8:	b4 9f       	mul	r27, r20
    2eaa:	90 0d       	add	r25, r0
    2eac:	a4 9f       	mul	r26, r20
    2eae:	80 0d       	add	r24, r0
    2eb0:	91 1d       	adc	r25, r1
    2eb2:	11 24       	eor	r1, r1
    2eb4:	08 95       	ret

00002eb6 <__udivmodhi4>:
    2eb6:	aa 1b       	sub	r26, r26
    2eb8:	bb 1b       	sub	r27, r27
    2eba:	51 e1       	ldi	r21, 0x11	; 17
    2ebc:	07 c0       	rjmp	.+14     	; 0x2ecc <__udivmodhi4_ep>

00002ebe <__udivmodhi4_loop>:
    2ebe:	aa 1f       	adc	r26, r26
    2ec0:	bb 1f       	adc	r27, r27
    2ec2:	a6 17       	cp	r26, r22
    2ec4:	b7 07       	cpc	r27, r23
    2ec6:	10 f0       	brcs	.+4      	; 0x2ecc <__udivmodhi4_ep>
    2ec8:	a6 1b       	sub	r26, r22
    2eca:	b7 0b       	sbc	r27, r23

00002ecc <__udivmodhi4_ep>:
    2ecc:	88 1f       	adc	r24, r24
    2ece:	99 1f       	adc	r25, r25
    2ed0:	5a 95       	dec	r21
    2ed2:	a9 f7       	brne	.-22     	; 0x2ebe <__udivmodhi4_loop>
    2ed4:	80 95       	com	r24
    2ed6:	90 95       	com	r25
    2ed8:	bc 01       	movw	r22, r24
    2eda:	cd 01       	movw	r24, r26
    2edc:	08 95       	ret

00002ede <strcmp>:
    2ede:	fb 01       	movw	r30, r22
    2ee0:	dc 01       	movw	r26, r24
    2ee2:	8d 91       	ld	r24, X+
    2ee4:	01 90       	ld	r0, Z+
    2ee6:	80 19       	sub	r24, r0
    2ee8:	01 10       	cpse	r0, r1
    2eea:	d9 f3       	breq	.-10     	; 0x2ee2 <strcmp+0x4>
    2eec:	99 0b       	sbc	r25, r25
    2eee:	08 95       	ret

00002ef0 <strncmp>:
    2ef0:	fb 01       	movw	r30, r22
    2ef2:	dc 01       	movw	r26, r24
    2ef4:	41 50       	subi	r20, 0x01	; 1
    2ef6:	50 40       	sbci	r21, 0x00	; 0
    2ef8:	30 f0       	brcs	.+12     	; 0x2f06 <strncmp+0x16>
    2efa:	8d 91       	ld	r24, X+
    2efc:	01 90       	ld	r0, Z+
    2efe:	80 19       	sub	r24, r0
    2f00:	19 f4       	brne	.+6      	; 0x2f08 <strncmp+0x18>
    2f02:	00 20       	and	r0, r0
    2f04:	b9 f7       	brne	.-18     	; 0x2ef4 <strncmp+0x4>
    2f06:	88 1b       	sub	r24, r24
    2f08:	99 0b       	sbc	r25, r25
    2f0a:	08 95       	ret

00002f0c <sscanf>:
    2f0c:	ae e0       	ldi	r26, 0x0E	; 14
    2f0e:	b0 e0       	ldi	r27, 0x00	; 0
    2f10:	ec e8       	ldi	r30, 0x8C	; 140
    2f12:	f7 e1       	ldi	r31, 0x17	; 23
    2f14:	0c 94 ca 1a 	jmp	0x3594	; 0x3594 <__prologue_saves__+0x20>
    2f18:	85 e0       	ldi	r24, 0x05	; 5
    2f1a:	8c 83       	std	Y+4, r24	; 0x04
    2f1c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f1e:	9c 89       	ldd	r25, Y+20	; 0x14
    2f20:	9a 83       	std	Y+2, r25	; 0x02
    2f22:	89 83       	std	Y+1, r24	; 0x01
    2f24:	ae 01       	movw	r20, r28
    2f26:	49 5e       	subi	r20, 0xE9	; 233
    2f28:	5f 4f       	sbci	r21, 0xFF	; 255
    2f2a:	6d 89       	ldd	r22, Y+21	; 0x15
    2f2c:	7e 89       	ldd	r23, Y+22	; 0x16
    2f2e:	ce 01       	movw	r24, r28
    2f30:	01 96       	adiw	r24, 0x01	; 1
    2f32:	0e 94 3b 19 	call	0x3276	; 0x3276 <vfscanf>
    2f36:	2e 96       	adiw	r28, 0x0e	; 14
    2f38:	e2 e0       	ldi	r30, 0x02	; 2
    2f3a:	0c 94 e6 1a 	jmp	0x35cc	; 0x35cc <__epilogue_restores__+0x20>

00002f3e <putval>:
    2f3e:	20 fd       	sbrc	r18, 0
    2f40:	09 c0       	rjmp	.+18     	; 0x2f54 <putval+0x16>
    2f42:	fc 01       	movw	r30, r24
    2f44:	23 fd       	sbrc	r18, 3
    2f46:	05 c0       	rjmp	.+10     	; 0x2f52 <putval+0x14>
    2f48:	22 ff       	sbrs	r18, 2
    2f4a:	02 c0       	rjmp	.+4      	; 0x2f50 <putval+0x12>
    2f4c:	73 83       	std	Z+3, r23	; 0x03
    2f4e:	62 83       	std	Z+2, r22	; 0x02
    2f50:	51 83       	std	Z+1, r21	; 0x01
    2f52:	40 83       	st	Z, r20
    2f54:	08 95       	ret

00002f56 <mulacc>:
    2f56:	44 fd       	sbrc	r20, 4
    2f58:	17 c0       	rjmp	.+46     	; 0x2f88 <mulacc+0x32>
    2f5a:	46 fd       	sbrc	r20, 6
    2f5c:	17 c0       	rjmp	.+46     	; 0x2f8c <mulacc+0x36>
    2f5e:	ab 01       	movw	r20, r22
    2f60:	bc 01       	movw	r22, r24
    2f62:	da 01       	movw	r26, r20
    2f64:	fb 01       	movw	r30, r22
    2f66:	aa 0f       	add	r26, r26
    2f68:	bb 1f       	adc	r27, r27
    2f6a:	ee 1f       	adc	r30, r30
    2f6c:	ff 1f       	adc	r31, r31
    2f6e:	10 94       	com	r1
    2f70:	d1 f7       	brne	.-12     	; 0x2f66 <mulacc+0x10>
    2f72:	4a 0f       	add	r20, r26
    2f74:	5b 1f       	adc	r21, r27
    2f76:	6e 1f       	adc	r22, r30
    2f78:	7f 1f       	adc	r23, r31
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	ba 01       	movw	r22, r20
    2f7e:	66 0f       	add	r22, r22
    2f80:	77 1f       	adc	r23, r23
    2f82:	88 1f       	adc	r24, r24
    2f84:	99 1f       	adc	r25, r25
    2f86:	09 c0       	rjmp	.+18     	; 0x2f9a <mulacc+0x44>
    2f88:	33 e0       	ldi	r19, 0x03	; 3
    2f8a:	01 c0       	rjmp	.+2      	; 0x2f8e <mulacc+0x38>
    2f8c:	34 e0       	ldi	r19, 0x04	; 4
    2f8e:	66 0f       	add	r22, r22
    2f90:	77 1f       	adc	r23, r23
    2f92:	88 1f       	adc	r24, r24
    2f94:	99 1f       	adc	r25, r25
    2f96:	31 50       	subi	r19, 0x01	; 1
    2f98:	d1 f7       	brne	.-12     	; 0x2f8e <mulacc+0x38>
    2f9a:	62 0f       	add	r22, r18
    2f9c:	71 1d       	adc	r23, r1
    2f9e:	81 1d       	adc	r24, r1
    2fa0:	91 1d       	adc	r25, r1
    2fa2:	08 95       	ret

00002fa4 <skip_spaces>:
    2fa4:	0f 93       	push	r16
    2fa6:	1f 93       	push	r17
    2fa8:	cf 93       	push	r28
    2faa:	df 93       	push	r29
    2fac:	8c 01       	movw	r16, r24
    2fae:	c8 01       	movw	r24, r16
    2fb0:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <fgetc>
    2fb4:	ec 01       	movw	r28, r24
    2fb6:	97 fd       	sbrc	r25, 7
    2fb8:	08 c0       	rjmp	.+16     	; 0x2fca <skip_spaces+0x26>
    2fba:	0e 94 4c 1a 	call	0x3498	; 0x3498 <isspace>
    2fbe:	89 2b       	or	r24, r25
    2fc0:	b1 f7       	brne	.-20     	; 0x2fae <skip_spaces+0xa>
    2fc2:	b8 01       	movw	r22, r16
    2fc4:	ce 01       	movw	r24, r28
    2fc6:	0e 94 9e 1a 	call	0x353c	; 0x353c <ungetc>
    2fca:	ce 01       	movw	r24, r28
    2fcc:	df 91       	pop	r29
    2fce:	cf 91       	pop	r28
    2fd0:	1f 91       	pop	r17
    2fd2:	0f 91       	pop	r16
    2fd4:	08 95       	ret

00002fd6 <conv_int>:
    2fd6:	8f 92       	push	r8
    2fd8:	9f 92       	push	r9
    2fda:	af 92       	push	r10
    2fdc:	bf 92       	push	r11
    2fde:	ef 92       	push	r14
    2fe0:	ff 92       	push	r15
    2fe2:	0f 93       	push	r16
    2fe4:	1f 93       	push	r17
    2fe6:	cf 93       	push	r28
    2fe8:	df 93       	push	r29
    2fea:	8c 01       	movw	r16, r24
    2fec:	d6 2f       	mov	r29, r22
    2fee:	7a 01       	movw	r14, r20
    2ff0:	b2 2e       	mov	r11, r18
    2ff2:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <fgetc>
    2ff6:	9c 01       	movw	r18, r24
    2ff8:	33 27       	eor	r19, r19
    2ffa:	2b 32       	cpi	r18, 0x2B	; 43
    2ffc:	31 05       	cpc	r19, r1
    2ffe:	31 f0       	breq	.+12     	; 0x300c <conv_int+0x36>
    3000:	2d 32       	cpi	r18, 0x2D	; 45
    3002:	31 05       	cpc	r19, r1
    3004:	61 f4       	brne	.+24     	; 0x301e <conv_int+0x48>
    3006:	8b 2d       	mov	r24, r11
    3008:	80 68       	ori	r24, 0x80	; 128
    300a:	b8 2e       	mov	r11, r24
    300c:	d1 50       	subi	r29, 0x01	; 1
    300e:	11 f4       	brne	.+4      	; 0x3014 <conv_int+0x3e>
    3010:	80 e0       	ldi	r24, 0x00	; 0
    3012:	68 c0       	rjmp	.+208    	; 0x30e4 <conv_int+0x10e>
    3014:	c8 01       	movw	r24, r16
    3016:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <fgetc>
    301a:	97 fd       	sbrc	r25, 7
    301c:	f9 cf       	rjmp	.-14     	; 0x3010 <conv_int+0x3a>
    301e:	cb 2d       	mov	r28, r11
    3020:	cd 7f       	andi	r28, 0xFD	; 253
    3022:	2b 2d       	mov	r18, r11
    3024:	20 73       	andi	r18, 0x30	; 48
    3026:	09 f5       	brne	.+66     	; 0x306a <conv_int+0x94>
    3028:	80 33       	cpi	r24, 0x30	; 48
    302a:	f9 f4       	brne	.+62     	; 0x306a <conv_int+0x94>
    302c:	aa 24       	eor	r10, r10
    302e:	aa 94       	dec	r10
    3030:	ad 0e       	add	r10, r29
    3032:	09 f4       	brne	.+2      	; 0x3036 <conv_int+0x60>
    3034:	43 c0       	rjmp	.+134    	; 0x30bc <conv_int+0xe6>
    3036:	c8 01       	movw	r24, r16
    3038:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <fgetc>
    303c:	97 fd       	sbrc	r25, 7
    303e:	3e c0       	rjmp	.+124    	; 0x30bc <conv_int+0xe6>
    3040:	9c 01       	movw	r18, r24
    3042:	2f 7d       	andi	r18, 0xDF	; 223
    3044:	33 27       	eor	r19, r19
    3046:	28 35       	cpi	r18, 0x58	; 88
    3048:	31 05       	cpc	r19, r1
    304a:	49 f4       	brne	.+18     	; 0x305e <conv_int+0x88>
    304c:	c2 64       	ori	r28, 0x42	; 66
    304e:	d2 50       	subi	r29, 0x02	; 2
    3050:	a9 f1       	breq	.+106    	; 0x30bc <conv_int+0xe6>
    3052:	c8 01       	movw	r24, r16
    3054:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <fgetc>
    3058:	97 ff       	sbrs	r25, 7
    305a:	07 c0       	rjmp	.+14     	; 0x306a <conv_int+0x94>
    305c:	2f c0       	rjmp	.+94     	; 0x30bc <conv_int+0xe6>
    305e:	b6 fe       	sbrs	r11, 6
    3060:	02 c0       	rjmp	.+4      	; 0x3066 <conv_int+0x90>
    3062:	c2 60       	ori	r28, 0x02	; 2
    3064:	01 c0       	rjmp	.+2      	; 0x3068 <conv_int+0x92>
    3066:	c2 61       	ori	r28, 0x12	; 18
    3068:	da 2d       	mov	r29, r10
    306a:	81 2c       	mov	r8, r1
    306c:	91 2c       	mov	r9, r1
    306e:	54 01       	movw	r10, r8
    3070:	20 ed       	ldi	r18, 0xD0	; 208
    3072:	28 0f       	add	r18, r24
    3074:	28 30       	cpi	r18, 0x08	; 8
    3076:	80 f0       	brcs	.+32     	; 0x3098 <conv_int+0xc2>
    3078:	c4 ff       	sbrs	r28, 4
    307a:	04 c0       	rjmp	.+8      	; 0x3084 <conv_int+0xae>
    307c:	b8 01       	movw	r22, r16
    307e:	0e 94 9e 1a 	call	0x353c	; 0x353c <ungetc>
    3082:	19 c0       	rjmp	.+50     	; 0x30b6 <conv_int+0xe0>
    3084:	2a 30       	cpi	r18, 0x0A	; 10
    3086:	40 f0       	brcs	.+16     	; 0x3098 <conv_int+0xc2>
    3088:	c6 ff       	sbrs	r28, 6
    308a:	f8 cf       	rjmp	.-16     	; 0x307c <conv_int+0xa6>
    308c:	2f 7d       	andi	r18, 0xDF	; 223
    308e:	3f ee       	ldi	r19, 0xEF	; 239
    3090:	32 0f       	add	r19, r18
    3092:	36 30       	cpi	r19, 0x06	; 6
    3094:	98 f7       	brcc	.-26     	; 0x307c <conv_int+0xa6>
    3096:	27 50       	subi	r18, 0x07	; 7
    3098:	4c 2f       	mov	r20, r28
    309a:	c5 01       	movw	r24, r10
    309c:	b4 01       	movw	r22, r8
    309e:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <mulacc>
    30a2:	4b 01       	movw	r8, r22
    30a4:	5c 01       	movw	r10, r24
    30a6:	c2 60       	ori	r28, 0x02	; 2
    30a8:	d1 50       	subi	r29, 0x01	; 1
    30aa:	59 f0       	breq	.+22     	; 0x30c2 <conv_int+0xec>
    30ac:	c8 01       	movw	r24, r16
    30ae:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <fgetc>
    30b2:	97 ff       	sbrs	r25, 7
    30b4:	dd cf       	rjmp	.-70     	; 0x3070 <conv_int+0x9a>
    30b6:	c1 fd       	sbrc	r28, 1
    30b8:	04 c0       	rjmp	.+8      	; 0x30c2 <conv_int+0xec>
    30ba:	aa cf       	rjmp	.-172    	; 0x3010 <conv_int+0x3a>
    30bc:	81 2c       	mov	r8, r1
    30be:	91 2c       	mov	r9, r1
    30c0:	54 01       	movw	r10, r8
    30c2:	c7 ff       	sbrs	r28, 7
    30c4:	08 c0       	rjmp	.+16     	; 0x30d6 <conv_int+0x100>
    30c6:	b0 94       	com	r11
    30c8:	a0 94       	com	r10
    30ca:	90 94       	com	r9
    30cc:	80 94       	com	r8
    30ce:	81 1c       	adc	r8, r1
    30d0:	91 1c       	adc	r9, r1
    30d2:	a1 1c       	adc	r10, r1
    30d4:	b1 1c       	adc	r11, r1
    30d6:	2c 2f       	mov	r18, r28
    30d8:	b5 01       	movw	r22, r10
    30da:	a4 01       	movw	r20, r8
    30dc:	c7 01       	movw	r24, r14
    30de:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <putval>
    30e2:	81 e0       	ldi	r24, 0x01	; 1
    30e4:	df 91       	pop	r29
    30e6:	cf 91       	pop	r28
    30e8:	1f 91       	pop	r17
    30ea:	0f 91       	pop	r16
    30ec:	ff 90       	pop	r15
    30ee:	ef 90       	pop	r14
    30f0:	bf 90       	pop	r11
    30f2:	af 90       	pop	r10
    30f4:	9f 90       	pop	r9
    30f6:	8f 90       	pop	r8
    30f8:	08 95       	ret

000030fa <conv_brk>:
    30fa:	a0 e2       	ldi	r26, 0x20	; 32
    30fc:	b0 e0       	ldi	r27, 0x00	; 0
    30fe:	e3 e8       	ldi	r30, 0x83	; 131
    3100:	f8 e1       	ldi	r31, 0x18	; 24
    3102:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <__prologue_saves__+0x6>
    3106:	5c 01       	movw	r10, r24
    3108:	96 2e       	mov	r9, r22
    310a:	7a 01       	movw	r14, r20
    310c:	f9 01       	movw	r30, r18
    310e:	8e 01       	movw	r16, r28
    3110:	0f 5f       	subi	r16, 0xFF	; 255
    3112:	1f 4f       	sbci	r17, 0xFF	; 255
    3114:	68 01       	movw	r12, r16
    3116:	80 e2       	ldi	r24, 0x20	; 32
    3118:	d8 01       	movw	r26, r16
    311a:	1d 92       	st	X+, r1
    311c:	8a 95       	dec	r24
    311e:	e9 f7       	brne	.-6      	; 0x311a <conv_brk+0x20>
    3120:	d5 01       	movw	r26, r10
    3122:	13 96       	adiw	r26, 0x03	; 3
    3124:	8c 90       	ld	r8, X
    3126:	80 e0       	ldi	r24, 0x00	; 0
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	61 2c       	mov	r6, r1
    312c:	71 2c       	mov	r7, r1
    312e:	30 e0       	ldi	r19, 0x00	; 0
    3130:	61 e0       	ldi	r22, 0x01	; 1
    3132:	70 e0       	ldi	r23, 0x00	; 0
    3134:	83 fc       	sbrc	r8, 3
    3136:	25 91       	lpm	r18, Z+
    3138:	83 fe       	sbrs	r8, 3
    313a:	21 91       	ld	r18, Z+
    313c:	8f 01       	movw	r16, r30
    313e:	52 2e       	mov	r5, r18
    3140:	21 11       	cpse	r18, r1
    3142:	03 c0       	rjmp	.+6      	; 0x314a <conv_brk+0x50>
    3144:	80 e0       	ldi	r24, 0x00	; 0
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	92 c0       	rjmp	.+292    	; 0x326e <conv_brk+0x174>
    314a:	2e 35       	cpi	r18, 0x5E	; 94
    314c:	11 f4       	brne	.+4      	; 0x3152 <conv_brk+0x58>
    314e:	00 97       	sbiw	r24, 0x00	; 0
    3150:	51 f1       	breq	.+84     	; 0x31a6 <conv_brk+0xac>
    3152:	43 2f       	mov	r20, r19
    3154:	50 e0       	ldi	r21, 0x00	; 0
    3156:	48 17       	cp	r20, r24
    3158:	59 07       	cpc	r21, r25
    315a:	3c f4       	brge	.+14     	; 0x316a <conv_brk+0x70>
    315c:	2d 35       	cpi	r18, 0x5D	; 93
    315e:	59 f1       	breq	.+86     	; 0x31b6 <conv_brk+0xbc>
    3160:	2d 32       	cpi	r18, 0x2D	; 45
    3162:	19 f4       	brne	.+6      	; 0x316a <conv_brk+0x70>
    3164:	77 20       	and	r7, r7
    3166:	09 f1       	breq	.+66     	; 0x31aa <conv_brk+0xb0>
    3168:	03 c0       	rjmp	.+6      	; 0x3170 <conv_brk+0x76>
    316a:	77 20       	and	r7, r7
    316c:	09 f4       	brne	.+2      	; 0x3170 <conv_brk+0x76>
    316e:	6a c0       	rjmp	.+212    	; 0x3244 <conv_brk+0x14a>
    3170:	45 2d       	mov	r20, r5
    3172:	46 95       	lsr	r20
    3174:	46 95       	lsr	r20
    3176:	46 95       	lsr	r20
    3178:	d6 01       	movw	r26, r12
    317a:	a4 0f       	add	r26, r20
    317c:	b1 1d       	adc	r27, r1
    317e:	45 2d       	mov	r20, r5
    3180:	47 70       	andi	r20, 0x07	; 7
    3182:	8b 01       	movw	r16, r22
    3184:	02 c0       	rjmp	.+4      	; 0x318a <conv_brk+0x90>
    3186:	00 0f       	add	r16, r16
    3188:	11 1f       	adc	r17, r17
    318a:	4a 95       	dec	r20
    318c:	e2 f7       	brpl	.-8      	; 0x3186 <conv_brk+0x8c>
    318e:	a8 01       	movw	r20, r16
    3190:	5c 91       	ld	r21, X
    3192:	45 2b       	or	r20, r21
    3194:	4c 93       	st	X, r20
    3196:	65 14       	cp	r6, r5
    3198:	59 f0       	breq	.+22     	; 0x31b0 <conv_brk+0xb6>
    319a:	56 14       	cp	r5, r6
    319c:	10 f4       	brcc	.+4      	; 0x31a2 <conv_brk+0xa8>
    319e:	53 94       	inc	r5
    31a0:	e7 cf       	rjmp	.-50     	; 0x3170 <conv_brk+0x76>
    31a2:	5a 94       	dec	r5
    31a4:	e5 cf       	rjmp	.-54     	; 0x3170 <conv_brk+0x76>
    31a6:	31 e0       	ldi	r19, 0x01	; 1
    31a8:	04 c0       	rjmp	.+8      	; 0x31b2 <conv_brk+0xb8>
    31aa:	77 24       	eor	r7, r7
    31ac:	73 94       	inc	r7
    31ae:	01 c0       	rjmp	.+2      	; 0x31b2 <conv_brk+0xb8>
    31b0:	71 2c       	mov	r7, r1
    31b2:	01 96       	adiw	r24, 0x01	; 1
    31b4:	bf cf       	rjmp	.-130    	; 0x3134 <conv_brk+0x3a>
    31b6:	77 20       	and	r7, r7
    31b8:	19 f0       	breq	.+6      	; 0x31c0 <conv_brk+0xc6>
    31ba:	8e 81       	ldd	r24, Y+6	; 0x06
    31bc:	80 62       	ori	r24, 0x20	; 32
    31be:	8e 83       	std	Y+6, r24	; 0x06
    31c0:	31 11       	cpse	r19, r1
    31c2:	03 c0       	rjmp	.+6      	; 0x31ca <conv_brk+0xd0>
    31c4:	88 24       	eor	r8, r8
    31c6:	83 94       	inc	r8
    31c8:	17 c0       	rjmp	.+46     	; 0x31f8 <conv_brk+0xfe>
    31ca:	f6 01       	movw	r30, r12
    31cc:	9e 01       	movw	r18, r28
    31ce:	2f 5d       	subi	r18, 0xDF	; 223
    31d0:	3f 4f       	sbci	r19, 0xFF	; 255
    31d2:	80 81       	ld	r24, Z
    31d4:	80 95       	com	r24
    31d6:	81 93       	st	Z+, r24
    31d8:	2e 17       	cp	r18, r30
    31da:	3f 07       	cpc	r19, r31
    31dc:	d1 f7       	brne	.-12     	; 0x31d2 <conv_brk+0xd8>
    31de:	f2 cf       	rjmp	.-28     	; 0x31c4 <conv_brk+0xca>
    31e0:	e1 14       	cp	r14, r1
    31e2:	f1 04       	cpc	r15, r1
    31e4:	29 f0       	breq	.+10     	; 0x31f0 <conv_brk+0xf6>
    31e6:	d7 01       	movw	r26, r14
    31e8:	8c 93       	st	X, r24
    31ea:	f7 01       	movw	r30, r14
    31ec:	31 96       	adiw	r30, 0x01	; 1
    31ee:	7f 01       	movw	r14, r30
    31f0:	9a 94       	dec	r9
    31f2:	81 2c       	mov	r8, r1
    31f4:	99 20       	and	r9, r9
    31f6:	f9 f0       	breq	.+62     	; 0x3236 <conv_brk+0x13c>
    31f8:	c5 01       	movw	r24, r10
    31fa:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <fgetc>
    31fe:	97 fd       	sbrc	r25, 7
    3200:	18 c0       	rjmp	.+48     	; 0x3232 <conv_brk+0x138>
    3202:	fc 01       	movw	r30, r24
    3204:	ff 27       	eor	r31, r31
    3206:	23 e0       	ldi	r18, 0x03	; 3
    3208:	f5 95       	asr	r31
    320a:	e7 95       	ror	r30
    320c:	2a 95       	dec	r18
    320e:	e1 f7       	brne	.-8      	; 0x3208 <conv_brk+0x10e>
    3210:	ec 0d       	add	r30, r12
    3212:	fd 1d       	adc	r31, r13
    3214:	20 81       	ld	r18, Z
    3216:	30 e0       	ldi	r19, 0x00	; 0
    3218:	ac 01       	movw	r20, r24
    321a:	47 70       	andi	r20, 0x07	; 7
    321c:	55 27       	eor	r21, r21
    321e:	02 c0       	rjmp	.+4      	; 0x3224 <conv_brk+0x12a>
    3220:	35 95       	asr	r19
    3222:	27 95       	ror	r18
    3224:	4a 95       	dec	r20
    3226:	e2 f7       	brpl	.-8      	; 0x3220 <conv_brk+0x126>
    3228:	20 fd       	sbrc	r18, 0
    322a:	da cf       	rjmp	.-76     	; 0x31e0 <conv_brk+0xe6>
    322c:	b5 01       	movw	r22, r10
    322e:	0e 94 9e 1a 	call	0x353c	; 0x353c <ungetc>
    3232:	81 10       	cpse	r8, r1
    3234:	87 cf       	rjmp	.-242    	; 0x3144 <conv_brk+0x4a>
    3236:	e1 14       	cp	r14, r1
    3238:	f1 04       	cpc	r15, r1
    323a:	11 f0       	breq	.+4      	; 0x3240 <conv_brk+0x146>
    323c:	d7 01       	movw	r26, r14
    323e:	1c 92       	st	X, r1
    3240:	c8 01       	movw	r24, r16
    3242:	15 c0       	rjmp	.+42     	; 0x326e <conv_brk+0x174>
    3244:	42 2f       	mov	r20, r18
    3246:	46 95       	lsr	r20
    3248:	46 95       	lsr	r20
    324a:	46 95       	lsr	r20
    324c:	d6 01       	movw	r26, r12
    324e:	a4 0f       	add	r26, r20
    3250:	b1 1d       	adc	r27, r1
    3252:	42 2f       	mov	r20, r18
    3254:	47 70       	andi	r20, 0x07	; 7
    3256:	8b 01       	movw	r16, r22
    3258:	02 c0       	rjmp	.+4      	; 0x325e <conv_brk+0x164>
    325a:	00 0f       	add	r16, r16
    325c:	11 1f       	adc	r17, r17
    325e:	4a 95       	dec	r20
    3260:	e2 f7       	brpl	.-8      	; 0x325a <conv_brk+0x160>
    3262:	a8 01       	movw	r20, r16
    3264:	5c 91       	ld	r21, X
    3266:	45 2b       	or	r20, r21
    3268:	4c 93       	st	X, r20
    326a:	62 2e       	mov	r6, r18
    326c:	a2 cf       	rjmp	.-188    	; 0x31b2 <conv_brk+0xb8>
    326e:	a0 96       	adiw	r28, 0x20	; 32
    3270:	ef e0       	ldi	r30, 0x0F	; 15
    3272:	0c 94 d9 1a 	jmp	0x35b2	; 0x35b2 <__epilogue_restores__+0x6>

00003276 <vfscanf>:
    3276:	a0 e0       	ldi	r26, 0x00	; 0
    3278:	b0 e0       	ldi	r27, 0x00	; 0
    327a:	e1 e4       	ldi	r30, 0x41	; 65
    327c:	f9 e1       	ldi	r31, 0x19	; 25
    327e:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <__prologue_saves__+0x6>
    3282:	6c 01       	movw	r12, r24
    3284:	eb 01       	movw	r28, r22
    3286:	5a 01       	movw	r10, r20
    3288:	fc 01       	movw	r30, r24
    328a:	17 82       	std	Z+7, r1	; 0x07
    328c:	16 82       	std	Z+6, r1	; 0x06
    328e:	51 2c       	mov	r5, r1
    3290:	f6 01       	movw	r30, r12
    3292:	e3 80       	ldd	r14, Z+3	; 0x03
    3294:	fe 01       	movw	r30, r28
    3296:	e3 fc       	sbrc	r14, 3
    3298:	85 91       	lpm	r24, Z+
    329a:	e3 fe       	sbrs	r14, 3
    329c:	81 91       	ld	r24, Z+
    329e:	18 2f       	mov	r17, r24
    32a0:	ef 01       	movw	r28, r30
    32a2:	88 23       	and	r24, r24
    32a4:	09 f4       	brne	.+2      	; 0x32a8 <vfscanf+0x32>
    32a6:	ee c0       	rjmp	.+476    	; 0x3484 <vfscanf+0x20e>
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	0e 94 4c 1a 	call	0x3498	; 0x3498 <isspace>
    32ae:	89 2b       	or	r24, r25
    32b0:	21 f0       	breq	.+8      	; 0x32ba <vfscanf+0x44>
    32b2:	c6 01       	movw	r24, r12
    32b4:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <skip_spaces>
    32b8:	eb cf       	rjmp	.-42     	; 0x3290 <vfscanf+0x1a>
    32ba:	15 32       	cpi	r17, 0x25	; 37
    32bc:	41 f4       	brne	.+16     	; 0x32ce <vfscanf+0x58>
    32be:	fe 01       	movw	r30, r28
    32c0:	e3 fc       	sbrc	r14, 3
    32c2:	15 91       	lpm	r17, Z+
    32c4:	e3 fe       	sbrs	r14, 3
    32c6:	11 91       	ld	r17, Z+
    32c8:	ef 01       	movw	r28, r30
    32ca:	15 32       	cpi	r17, 0x25	; 37
    32cc:	81 f4       	brne	.+32     	; 0x32ee <vfscanf+0x78>
    32ce:	c6 01       	movw	r24, r12
    32d0:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <fgetc>
    32d4:	97 fd       	sbrc	r25, 7
    32d6:	d4 c0       	rjmp	.+424    	; 0x3480 <vfscanf+0x20a>
    32d8:	41 2f       	mov	r20, r17
    32da:	50 e0       	ldi	r21, 0x00	; 0
    32dc:	9c 01       	movw	r18, r24
    32de:	33 27       	eor	r19, r19
    32e0:	24 17       	cp	r18, r20
    32e2:	35 07       	cpc	r19, r21
    32e4:	a9 f2       	breq	.-86     	; 0x3290 <vfscanf+0x1a>
    32e6:	b6 01       	movw	r22, r12
    32e8:	0e 94 9e 1a 	call	0x353c	; 0x353c <ungetc>
    32ec:	cb c0       	rjmp	.+406    	; 0x3484 <vfscanf+0x20e>
    32ee:	1a 32       	cpi	r17, 0x2A	; 42
    32f0:	39 f4       	brne	.+14     	; 0x3300 <vfscanf+0x8a>
    32f2:	e3 fc       	sbrc	r14, 3
    32f4:	15 91       	lpm	r17, Z+
    32f6:	e3 fe       	sbrs	r14, 3
    32f8:	11 91       	ld	r17, Z+
    32fa:	ef 01       	movw	r28, r30
    32fc:	01 e0       	ldi	r16, 0x01	; 1
    32fe:	01 c0       	rjmp	.+2      	; 0x3302 <vfscanf+0x8c>
    3300:	00 e0       	ldi	r16, 0x00	; 0
    3302:	f1 2c       	mov	r15, r1
    3304:	20 ed       	ldi	r18, 0xD0	; 208
    3306:	21 0f       	add	r18, r17
    3308:	2a 30       	cpi	r18, 0x0A	; 10
    330a:	80 f4       	brcc	.+32     	; 0x332c <vfscanf+0xb6>
    330c:	02 60       	ori	r16, 0x02	; 2
    330e:	6f 2d       	mov	r22, r15
    3310:	70 e0       	ldi	r23, 0x00	; 0
    3312:	80 e0       	ldi	r24, 0x00	; 0
    3314:	90 e0       	ldi	r25, 0x00	; 0
    3316:	40 e2       	ldi	r20, 0x20	; 32
    3318:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <mulacc>
    331c:	f6 2e       	mov	r15, r22
    331e:	fe 01       	movw	r30, r28
    3320:	e3 fc       	sbrc	r14, 3
    3322:	15 91       	lpm	r17, Z+
    3324:	e3 fe       	sbrs	r14, 3
    3326:	11 91       	ld	r17, Z+
    3328:	ef 01       	movw	r28, r30
    332a:	ec cf       	rjmp	.-40     	; 0x3304 <vfscanf+0x8e>
    332c:	01 ff       	sbrs	r16, 1
    332e:	03 c0       	rjmp	.+6      	; 0x3336 <vfscanf+0xc0>
    3330:	f1 10       	cpse	r15, r1
    3332:	03 c0       	rjmp	.+6      	; 0x333a <vfscanf+0xc4>
    3334:	a7 c0       	rjmp	.+334    	; 0x3484 <vfscanf+0x20e>
    3336:	ff 24       	eor	r15, r15
    3338:	fa 94       	dec	r15
    333a:	18 36       	cpi	r17, 0x68	; 104
    333c:	19 f0       	breq	.+6      	; 0x3344 <vfscanf+0xce>
    333e:	1c 36       	cpi	r17, 0x6C	; 108
    3340:	51 f0       	breq	.+20     	; 0x3356 <vfscanf+0xe0>
    3342:	10 c0       	rjmp	.+32     	; 0x3364 <vfscanf+0xee>
    3344:	fe 01       	movw	r30, r28
    3346:	e3 fc       	sbrc	r14, 3
    3348:	15 91       	lpm	r17, Z+
    334a:	e3 fe       	sbrs	r14, 3
    334c:	11 91       	ld	r17, Z+
    334e:	ef 01       	movw	r28, r30
    3350:	18 36       	cpi	r17, 0x68	; 104
    3352:	41 f4       	brne	.+16     	; 0x3364 <vfscanf+0xee>
    3354:	08 60       	ori	r16, 0x08	; 8
    3356:	04 60       	ori	r16, 0x04	; 4
    3358:	fe 01       	movw	r30, r28
    335a:	e3 fc       	sbrc	r14, 3
    335c:	15 91       	lpm	r17, Z+
    335e:	e3 fe       	sbrs	r14, 3
    3360:	11 91       	ld	r17, Z+
    3362:	ef 01       	movw	r28, r30
    3364:	11 23       	and	r17, r17
    3366:	09 f4       	brne	.+2      	; 0x336a <vfscanf+0xf4>
    3368:	8d c0       	rjmp	.+282    	; 0x3484 <vfscanf+0x20e>
    336a:	61 2f       	mov	r22, r17
    336c:	70 e0       	ldi	r23, 0x00	; 0
    336e:	8e ef       	ldi	r24, 0xFE	; 254
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	0e 94 55 1a 	call	0x34aa	; 0x34aa <strchr_P>
    3376:	89 2b       	or	r24, r25
    3378:	09 f4       	brne	.+2      	; 0x337c <vfscanf+0x106>
    337a:	84 c0       	rjmp	.+264    	; 0x3484 <vfscanf+0x20e>
    337c:	00 fd       	sbrc	r16, 0
    337e:	07 c0       	rjmp	.+14     	; 0x338e <vfscanf+0x118>
    3380:	f5 01       	movw	r30, r10
    3382:	80 80       	ld	r8, Z
    3384:	91 80       	ldd	r9, Z+1	; 0x01
    3386:	c5 01       	movw	r24, r10
    3388:	02 96       	adiw	r24, 0x02	; 2
    338a:	5c 01       	movw	r10, r24
    338c:	02 c0       	rjmp	.+4      	; 0x3392 <vfscanf+0x11c>
    338e:	81 2c       	mov	r8, r1
    3390:	91 2c       	mov	r9, r1
    3392:	1e 36       	cpi	r17, 0x6E	; 110
    3394:	51 f4       	brne	.+20     	; 0x33aa <vfscanf+0x134>
    3396:	f6 01       	movw	r30, r12
    3398:	46 81       	ldd	r20, Z+6	; 0x06
    339a:	57 81       	ldd	r21, Z+7	; 0x07
    339c:	60 e0       	ldi	r22, 0x00	; 0
    339e:	70 e0       	ldi	r23, 0x00	; 0
    33a0:	20 2f       	mov	r18, r16
    33a2:	c4 01       	movw	r24, r8
    33a4:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <putval>
    33a8:	73 cf       	rjmp	.-282    	; 0x3290 <vfscanf+0x1a>
    33aa:	13 36       	cpi	r17, 0x63	; 99
    33ac:	a9 f4       	brne	.+42     	; 0x33d8 <vfscanf+0x162>
    33ae:	01 fd       	sbrc	r16, 1
    33b0:	02 c0       	rjmp	.+4      	; 0x33b6 <vfscanf+0x140>
    33b2:	ff 24       	eor	r15, r15
    33b4:	f3 94       	inc	r15
    33b6:	c6 01       	movw	r24, r12
    33b8:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <fgetc>
    33bc:	97 fd       	sbrc	r25, 7
    33be:	60 c0       	rjmp	.+192    	; 0x3480 <vfscanf+0x20a>
    33c0:	81 14       	cp	r8, r1
    33c2:	91 04       	cpc	r9, r1
    33c4:	29 f0       	breq	.+10     	; 0x33d0 <vfscanf+0x15a>
    33c6:	f4 01       	movw	r30, r8
    33c8:	80 83       	st	Z, r24
    33ca:	c4 01       	movw	r24, r8
    33cc:	01 96       	adiw	r24, 0x01	; 1
    33ce:	4c 01       	movw	r8, r24
    33d0:	fa 94       	dec	r15
    33d2:	f1 10       	cpse	r15, r1
    33d4:	f0 cf       	rjmp	.-32     	; 0x33b6 <vfscanf+0x140>
    33d6:	50 c0       	rjmp	.+160    	; 0x3478 <vfscanf+0x202>
    33d8:	1b 35       	cpi	r17, 0x5B	; 91
    33da:	59 f4       	brne	.+22     	; 0x33f2 <vfscanf+0x17c>
    33dc:	9e 01       	movw	r18, r28
    33de:	a4 01       	movw	r20, r8
    33e0:	6f 2d       	mov	r22, r15
    33e2:	c6 01       	movw	r24, r12
    33e4:	0e 94 7d 18 	call	0x30fa	; 0x30fa <conv_brk>
    33e8:	ec 01       	movw	r28, r24
    33ea:	89 2b       	or	r24, r25
    33ec:	09 f0       	breq	.+2      	; 0x33f0 <vfscanf+0x17a>
    33ee:	44 c0       	rjmp	.+136    	; 0x3478 <vfscanf+0x202>
    33f0:	3e c0       	rjmp	.+124    	; 0x346e <vfscanf+0x1f8>
    33f2:	c6 01       	movw	r24, r12
    33f4:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <skip_spaces>
    33f8:	97 fd       	sbrc	r25, 7
    33fa:	42 c0       	rjmp	.+132    	; 0x3480 <vfscanf+0x20a>
    33fc:	1f 36       	cpi	r17, 0x6F	; 111
    33fe:	61 f1       	breq	.+88     	; 0x3458 <vfscanf+0x1e2>
    3400:	28 f4       	brcc	.+10     	; 0x340c <vfscanf+0x196>
    3402:	14 36       	cpi	r17, 0x64	; 100
    3404:	39 f1       	breq	.+78     	; 0x3454 <vfscanf+0x1de>
    3406:	19 36       	cpi	r17, 0x69	; 105
    3408:	51 f1       	breq	.+84     	; 0x345e <vfscanf+0x1e8>
    340a:	28 c0       	rjmp	.+80     	; 0x345c <vfscanf+0x1e6>
    340c:	13 37       	cpi	r17, 0x73	; 115
    340e:	71 f0       	breq	.+28     	; 0x342c <vfscanf+0x1b6>
    3410:	15 37       	cpi	r17, 0x75	; 117
    3412:	01 f1       	breq	.+64     	; 0x3454 <vfscanf+0x1de>
    3414:	23 c0       	rjmp	.+70     	; 0x345c <vfscanf+0x1e6>
    3416:	81 14       	cp	r8, r1
    3418:	91 04       	cpc	r9, r1
    341a:	29 f0       	breq	.+10     	; 0x3426 <vfscanf+0x1b0>
    341c:	f4 01       	movw	r30, r8
    341e:	60 82       	st	Z, r6
    3420:	c4 01       	movw	r24, r8
    3422:	01 96       	adiw	r24, 0x01	; 1
    3424:	4c 01       	movw	r8, r24
    3426:	fa 94       	dec	r15
    3428:	ff 20       	and	r15, r15
    342a:	71 f0       	breq	.+28     	; 0x3448 <vfscanf+0x1d2>
    342c:	c6 01       	movw	r24, r12
    342e:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <fgetc>
    3432:	3c 01       	movw	r6, r24
    3434:	97 fd       	sbrc	r25, 7
    3436:	08 c0       	rjmp	.+16     	; 0x3448 <vfscanf+0x1d2>
    3438:	0e 94 4c 1a 	call	0x3498	; 0x3498 <isspace>
    343c:	89 2b       	or	r24, r25
    343e:	59 f3       	breq	.-42     	; 0x3416 <vfscanf+0x1a0>
    3440:	b6 01       	movw	r22, r12
    3442:	c3 01       	movw	r24, r6
    3444:	0e 94 9e 1a 	call	0x353c	; 0x353c <ungetc>
    3448:	81 14       	cp	r8, r1
    344a:	91 04       	cpc	r9, r1
    344c:	a9 f0       	breq	.+42     	; 0x3478 <vfscanf+0x202>
    344e:	f4 01       	movw	r30, r8
    3450:	10 82       	st	Z, r1
    3452:	12 c0       	rjmp	.+36     	; 0x3478 <vfscanf+0x202>
    3454:	00 62       	ori	r16, 0x20	; 32
    3456:	03 c0       	rjmp	.+6      	; 0x345e <vfscanf+0x1e8>
    3458:	00 61       	ori	r16, 0x10	; 16
    345a:	01 c0       	rjmp	.+2      	; 0x345e <vfscanf+0x1e8>
    345c:	00 64       	ori	r16, 0x40	; 64
    345e:	20 2f       	mov	r18, r16
    3460:	a4 01       	movw	r20, r8
    3462:	6f 2d       	mov	r22, r15
    3464:	c6 01       	movw	r24, r12
    3466:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <conv_int>
    346a:	81 11       	cpse	r24, r1
    346c:	05 c0       	rjmp	.+10     	; 0x3478 <vfscanf+0x202>
    346e:	f6 01       	movw	r30, r12
    3470:	83 81       	ldd	r24, Z+3	; 0x03
    3472:	80 73       	andi	r24, 0x30	; 48
    3474:	29 f4       	brne	.+10     	; 0x3480 <vfscanf+0x20a>
    3476:	06 c0       	rjmp	.+12     	; 0x3484 <vfscanf+0x20e>
    3478:	00 fd       	sbrc	r16, 0
    347a:	0a cf       	rjmp	.-492    	; 0x3290 <vfscanf+0x1a>
    347c:	53 94       	inc	r5
    347e:	08 cf       	rjmp	.-496    	; 0x3290 <vfscanf+0x1a>
    3480:	55 20       	and	r5, r5
    3482:	19 f0       	breq	.+6      	; 0x348a <vfscanf+0x214>
    3484:	85 2d       	mov	r24, r5
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	02 c0       	rjmp	.+4      	; 0x348e <vfscanf+0x218>
    348a:	8f ef       	ldi	r24, 0xFF	; 255
    348c:	9f ef       	ldi	r25, 0xFF	; 255
    348e:	cd b7       	in	r28, 0x3d	; 61
    3490:	de b7       	in	r29, 0x3e	; 62
    3492:	ef e0       	ldi	r30, 0x0F	; 15
    3494:	0c 94 d9 1a 	jmp	0x35b2	; 0x35b2 <__epilogue_restores__+0x6>

00003498 <isspace>:
    3498:	91 11       	cpse	r25, r1
    349a:	0c 94 b7 1a 	jmp	0x356e	; 0x356e <__ctype_isfalse>
    349e:	80 32       	cpi	r24, 0x20	; 32
    34a0:	19 f0       	breq	.+6      	; 0x34a8 <isspace+0x10>
    34a2:	89 50       	subi	r24, 0x09	; 9
    34a4:	85 50       	subi	r24, 0x05	; 5
    34a6:	c8 f7       	brcc	.-14     	; 0x349a <isspace+0x2>
    34a8:	08 95       	ret

000034aa <strchr_P>:
    34aa:	fc 01       	movw	r30, r24
    34ac:	05 90       	lpm	r0, Z+
    34ae:	06 16       	cp	r0, r22
    34b0:	21 f0       	breq	.+8      	; 0x34ba <strchr_P+0x10>
    34b2:	00 20       	and	r0, r0
    34b4:	d9 f7       	brne	.-10     	; 0x34ac <strchr_P+0x2>
    34b6:	c0 01       	movw	r24, r0
    34b8:	08 95       	ret
    34ba:	31 97       	sbiw	r30, 0x01	; 1
    34bc:	cf 01       	movw	r24, r30
    34be:	08 95       	ret

000034c0 <fgetc>:
    34c0:	cf 93       	push	r28
    34c2:	df 93       	push	r29
    34c4:	ec 01       	movw	r28, r24
    34c6:	2b 81       	ldd	r18, Y+3	; 0x03
    34c8:	20 ff       	sbrs	r18, 0
    34ca:	33 c0       	rjmp	.+102    	; 0x3532 <fgetc+0x72>
    34cc:	26 ff       	sbrs	r18, 6
    34ce:	0a c0       	rjmp	.+20     	; 0x34e4 <fgetc+0x24>
    34d0:	2f 7b       	andi	r18, 0xBF	; 191
    34d2:	2b 83       	std	Y+3, r18	; 0x03
    34d4:	8e 81       	ldd	r24, Y+6	; 0x06
    34d6:	9f 81       	ldd	r25, Y+7	; 0x07
    34d8:	01 96       	adiw	r24, 0x01	; 1
    34da:	9f 83       	std	Y+7, r25	; 0x07
    34dc:	8e 83       	std	Y+6, r24	; 0x06
    34de:	8a 81       	ldd	r24, Y+2	; 0x02
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	29 c0       	rjmp	.+82     	; 0x3536 <fgetc+0x76>
    34e4:	22 ff       	sbrs	r18, 2
    34e6:	0f c0       	rjmp	.+30     	; 0x3506 <fgetc+0x46>
    34e8:	e8 81       	ld	r30, Y
    34ea:	f9 81       	ldd	r31, Y+1	; 0x01
    34ec:	80 81       	ld	r24, Z
    34ee:	08 2e       	mov	r0, r24
    34f0:	00 0c       	add	r0, r0
    34f2:	99 0b       	sbc	r25, r25
    34f4:	00 97       	sbiw	r24, 0x00	; 0
    34f6:	19 f4       	brne	.+6      	; 0x34fe <fgetc+0x3e>
    34f8:	20 62       	ori	r18, 0x20	; 32
    34fa:	2b 83       	std	Y+3, r18	; 0x03
    34fc:	1a c0       	rjmp	.+52     	; 0x3532 <fgetc+0x72>
    34fe:	31 96       	adiw	r30, 0x01	; 1
    3500:	f9 83       	std	Y+1, r31	; 0x01
    3502:	e8 83       	st	Y, r30
    3504:	0e c0       	rjmp	.+28     	; 0x3522 <fgetc+0x62>
    3506:	ea 85       	ldd	r30, Y+10	; 0x0a
    3508:	fb 85       	ldd	r31, Y+11	; 0x0b
    350a:	09 95       	icall
    350c:	97 ff       	sbrs	r25, 7
    350e:	09 c0       	rjmp	.+18     	; 0x3522 <fgetc+0x62>
    3510:	2b 81       	ldd	r18, Y+3	; 0x03
    3512:	01 96       	adiw	r24, 0x01	; 1
    3514:	11 f0       	breq	.+4      	; 0x351a <fgetc+0x5a>
    3516:	80 e2       	ldi	r24, 0x20	; 32
    3518:	01 c0       	rjmp	.+2      	; 0x351c <fgetc+0x5c>
    351a:	80 e1       	ldi	r24, 0x10	; 16
    351c:	82 2b       	or	r24, r18
    351e:	8b 83       	std	Y+3, r24	; 0x03
    3520:	08 c0       	rjmp	.+16     	; 0x3532 <fgetc+0x72>
    3522:	2e 81       	ldd	r18, Y+6	; 0x06
    3524:	3f 81       	ldd	r19, Y+7	; 0x07
    3526:	2f 5f       	subi	r18, 0xFF	; 255
    3528:	3f 4f       	sbci	r19, 0xFF	; 255
    352a:	3f 83       	std	Y+7, r19	; 0x07
    352c:	2e 83       	std	Y+6, r18	; 0x06
    352e:	99 27       	eor	r25, r25
    3530:	02 c0       	rjmp	.+4      	; 0x3536 <fgetc+0x76>
    3532:	8f ef       	ldi	r24, 0xFF	; 255
    3534:	9f ef       	ldi	r25, 0xFF	; 255
    3536:	df 91       	pop	r29
    3538:	cf 91       	pop	r28
    353a:	08 95       	ret

0000353c <ungetc>:
    353c:	fb 01       	movw	r30, r22
    353e:	23 81       	ldd	r18, Z+3	; 0x03
    3540:	20 ff       	sbrs	r18, 0
    3542:	12 c0       	rjmp	.+36     	; 0x3568 <ungetc+0x2c>
    3544:	26 fd       	sbrc	r18, 6
    3546:	10 c0       	rjmp	.+32     	; 0x3568 <ungetc+0x2c>
    3548:	8f 3f       	cpi	r24, 0xFF	; 255
    354a:	3f ef       	ldi	r19, 0xFF	; 255
    354c:	93 07       	cpc	r25, r19
    354e:	61 f0       	breq	.+24     	; 0x3568 <ungetc+0x2c>
    3550:	82 83       	std	Z+2, r24	; 0x02
    3552:	2f 7d       	andi	r18, 0xDF	; 223
    3554:	20 64       	ori	r18, 0x40	; 64
    3556:	23 83       	std	Z+3, r18	; 0x03
    3558:	26 81       	ldd	r18, Z+6	; 0x06
    355a:	37 81       	ldd	r19, Z+7	; 0x07
    355c:	21 50       	subi	r18, 0x01	; 1
    355e:	31 09       	sbc	r19, r1
    3560:	37 83       	std	Z+7, r19	; 0x07
    3562:	26 83       	std	Z+6, r18	; 0x06
    3564:	99 27       	eor	r25, r25
    3566:	08 95       	ret
    3568:	8f ef       	ldi	r24, 0xFF	; 255
    356a:	9f ef       	ldi	r25, 0xFF	; 255
    356c:	08 95       	ret

0000356e <__ctype_isfalse>:
    356e:	99 27       	eor	r25, r25
    3570:	88 27       	eor	r24, r24

00003572 <__ctype_istrue>:
    3572:	08 95       	ret

00003574 <__prologue_saves__>:
    3574:	2f 92       	push	r2
    3576:	3f 92       	push	r3
    3578:	4f 92       	push	r4
    357a:	5f 92       	push	r5
    357c:	6f 92       	push	r6
    357e:	7f 92       	push	r7
    3580:	8f 92       	push	r8
    3582:	9f 92       	push	r9
    3584:	af 92       	push	r10
    3586:	bf 92       	push	r11
    3588:	cf 92       	push	r12
    358a:	df 92       	push	r13
    358c:	ef 92       	push	r14
    358e:	ff 92       	push	r15
    3590:	0f 93       	push	r16
    3592:	1f 93       	push	r17
    3594:	cf 93       	push	r28
    3596:	df 93       	push	r29
    3598:	cd b7       	in	r28, 0x3d	; 61
    359a:	de b7       	in	r29, 0x3e	; 62
    359c:	ca 1b       	sub	r28, r26
    359e:	db 0b       	sbc	r29, r27
    35a0:	0f b6       	in	r0, 0x3f	; 63
    35a2:	f8 94       	cli
    35a4:	de bf       	out	0x3e, r29	; 62
    35a6:	0f be       	out	0x3f, r0	; 63
    35a8:	cd bf       	out	0x3d, r28	; 61
    35aa:	09 94       	ijmp

000035ac <__epilogue_restores__>:
    35ac:	2a 88       	ldd	r2, Y+18	; 0x12
    35ae:	39 88       	ldd	r3, Y+17	; 0x11
    35b0:	48 88       	ldd	r4, Y+16	; 0x10
    35b2:	5f 84       	ldd	r5, Y+15	; 0x0f
    35b4:	6e 84       	ldd	r6, Y+14	; 0x0e
    35b6:	7d 84       	ldd	r7, Y+13	; 0x0d
    35b8:	8c 84       	ldd	r8, Y+12	; 0x0c
    35ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    35bc:	aa 84       	ldd	r10, Y+10	; 0x0a
    35be:	b9 84       	ldd	r11, Y+9	; 0x09
    35c0:	c8 84       	ldd	r12, Y+8	; 0x08
    35c2:	df 80       	ldd	r13, Y+7	; 0x07
    35c4:	ee 80       	ldd	r14, Y+6	; 0x06
    35c6:	fd 80       	ldd	r15, Y+5	; 0x05
    35c8:	0c 81       	ldd	r16, Y+4	; 0x04
    35ca:	1b 81       	ldd	r17, Y+3	; 0x03
    35cc:	aa 81       	ldd	r26, Y+2	; 0x02
    35ce:	b9 81       	ldd	r27, Y+1	; 0x01
    35d0:	ce 0f       	add	r28, r30
    35d2:	d1 1d       	adc	r29, r1
    35d4:	0f b6       	in	r0, 0x3f	; 63
    35d6:	f8 94       	cli
    35d8:	de bf       	out	0x3e, r29	; 62
    35da:	0f be       	out	0x3f, r0	; 63
    35dc:	cd bf       	out	0x3d, r28	; 61
    35de:	ed 01       	movw	r28, r26
    35e0:	08 95       	ret

000035e2 <_exit>:
    35e2:	f8 94       	cli

000035e4 <__stop_program>:
    35e4:	ff cf       	rjmp	.-2      	; 0x35e4 <__stop_program>
